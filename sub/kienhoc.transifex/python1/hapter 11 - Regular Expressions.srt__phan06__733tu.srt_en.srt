471
00:22:05,916 --> 00:22:08,290
https://youtu.be/UR6a_wZ8ido
But what we can do with the
parentheses-- the parentheses

472
00:22:08,290 --> 00:22:12,460
are part of the regular
expression language-- saying,

473
00:22:12,460 --> 00:22:14,640
OK, I want to match
the whole thing.

474
00:22:14,640 --> 00:22:17,190
The parentheses aren't
part of the string up here.

475
00:22:17,190 --> 00:22:18,950
I want to match the
whole thing but I only

476
00:22:18,950 --> 00:22:21,800
want to extract this
part in parentheses.

477
00:22:21,800 --> 00:22:24,950
So this whole thing is a regular
expression that's matched.

478
00:22:24,950 --> 00:22:28,640
And then the parentheses part
is what's retrieved for you.

479
00:22:28,640 --> 00:22:31,360
And so this makes it
so that the only time

480
00:22:31,360 --> 00:22:33,375
it's going to look for
at signs are on lines

481
00:22:33,375 --> 00:22:35,130
that start with from space.

482
00:22:35,130 --> 00:22:38,240
It is going to want the
immediate next character

483
00:22:38,240 --> 00:22:41,811
to be a non blank, some number
of non-white characters,

484
00:22:41,811 --> 00:22:44,310
followed by an at sign, some
number of non blank characters.

485
00:22:44,310 --> 00:22:45,850
It's going to stop right there.

486
00:22:45,850 --> 00:22:48,980
And it's only going to
extract from here to here.

487
00:22:48,980 --> 00:22:50,580
So we get out Stephen Marquard.

488
00:22:50,580 --> 00:22:54,970
But this is a pretty
narrowly scoped thing

489
00:22:54,970 --> 00:22:56,870
because the first
four characters

490
00:22:56,870 --> 00:22:58,010
have to be from space.

491
00:22:58,010 --> 00:23:01,070
And so that's a way
to combine a stricter

492
00:23:01,070 --> 00:23:04,030
match even though you don't
actually want all the data.

493
00:23:04,030 --> 00:23:08,410
So you can add those things
all over the place, OK?

494
00:23:08,410 --> 00:23:14,070
OK, then we can compare
the different ways

495
00:23:14,070 --> 00:23:15,570
of extracting data.

496
00:23:15,570 --> 00:23:19,750
So if we look at how we
extract the hostname.

497
00:23:19,750 --> 00:23:23,200
Remember how we did
this many chapters ago.

498
00:23:23,200 --> 00:23:27,040
So we did a data dot find which
says, oh, the first at sign

499
00:23:27,040 --> 00:23:28,870
is a 21.

500
00:23:28,870 --> 00:23:30,710
So the first one is a 21.

501
00:23:30,710 --> 00:23:34,340
Then we say, we want to
find the space after that.

502
00:23:34,340 --> 00:23:35,840
So that's the at position.

503
00:23:35,840 --> 00:23:37,489
That's 31.

504
00:23:37,489 --> 00:23:39,280
And then we want to
extract the data that's

505
00:23:39,280 --> 00:23:45,080
one beyond the at up to but
not including the space.

506
00:23:45,080 --> 00:23:47,580
And that is the variable that
we're going to print out host.

507
00:23:47,580 --> 00:23:50,180
And so we extract this
bit of information

508
00:23:50,180 --> 00:23:53,890
and out comes the
host-- quite nice, OK?

509
00:23:53,890 --> 00:23:55,445
We also saw another technique.

510
00:23:55,445 --> 00:23:58,690
And by the way, all
these techniques are OK.

511
00:23:58,690 --> 00:24:00,310
All these techniques are fine.

512
00:24:00,310 --> 00:24:02,830
Another technique we saw once
we sort of played the split

513
00:24:02,830 --> 00:24:05,150
and lists was what I
call the double split

514
00:24:05,150 --> 00:24:08,580
version of this where
the first thing we do

515
00:24:08,580 --> 00:24:11,900
is we split that line.

516
00:24:11,900 --> 00:24:14,000
The first thing we do
is we split the line.

517
00:24:14,000 --> 00:24:20,540
And then we know-- and blanks--
that the second thing, which

518
00:24:20,540 --> 00:24:26,910
is the sub 1, word sub 1,
is the entire email address.

519
00:24:26,910 --> 00:24:28,740
And then this is
the double split.

520
00:24:28,740 --> 00:24:33,190
We take the email address and
we split it by an at sign.

521
00:24:33,190 --> 00:24:37,010
And then we get a list of the
pieces of the email address--

522
00:24:37,010 --> 00:24:39,260
the email name and
the email host--

523
00:24:39,260 --> 00:24:43,960
and then we grab
the sub 1 of that.

524
00:24:43,960 --> 00:24:47,210
And then we have the host
so that's the double split

525
00:24:47,210 --> 00:24:49,750
way of doing this, right?

526
00:24:49,750 --> 00:24:53,840
Now, in this, we still
haven't done the from yet.

527
00:24:53,840 --> 00:24:57,180
But it is the double
split way to do this.

528
00:24:57,180 --> 00:24:59,570
So if we think
about how we would

529
00:24:59,570 --> 00:25:05,320
do this in a regular
expression, we're

530
00:25:05,320 --> 00:25:11,540
going to say look
through the string.

531
00:25:11,540 --> 00:25:13,540
Find all-- we're going
to-- here's the find all.

532
00:25:13,540 --> 00:25:15,200
And the reg
expression exploded up

533
00:25:15,200 --> 00:25:17,692
says, look through
the string for an and.

534
00:25:17,692 --> 00:25:20,960
Do, do, do, do, got an and.

535
00:25:20,960 --> 00:25:25,620
Then, oh, start
extracting and extracting.

536
00:25:25,620 --> 00:25:28,560
And then this is another
form of the sync--

537
00:25:28,560 --> 00:25:30,941
this is one character.

538
00:25:30,941 --> 00:25:31,940
It's a single character.

539
00:25:31,940 --> 00:25:37,400
Match any non blank character
and zero or more of them, OK?

540
00:25:37,400 --> 00:25:41,760
So find an at sign.

541
00:25:41,760 --> 00:25:45,790
Start extracting and extracting.

542
00:25:45,790 --> 00:25:48,010
Match this is one character.

543
00:25:48,010 --> 00:25:50,940
That is a set of
possible matches.

544
00:25:50,940 --> 00:25:52,990
And that's some character.

545
00:25:52,990 --> 00:25:58,235
This means not-- not a blank.

546
00:25:58,235 --> 00:25:59,360
That's a blank right there.

547
00:25:59,360 --> 00:26:01,130
That's a plane
character right there--

548
00:26:01,130 --> 00:26:03,940
not a blank as many
times as you want.

549
00:26:03,940 --> 00:26:05,800
You might want to
turn that into a plus

550
00:26:05,800 --> 00:26:07,911
to guarantee at least one.

551
00:26:07,911 --> 00:26:09,910
That might be better done
as a plus right there.

552
00:26:09,910 --> 00:26:13,343

553
00:26:13,343 --> 00:26:14,926
So this would probably
make more sense

554
00:26:14,926 --> 00:26:18,190
as a plus to say I want at
least-- after the at sign, I

555
00:26:18,190 --> 00:26:20,805
want at least one
non blank character.

556
00:26:20,805 --> 00:26:26,250

557
00:26:26,250 --> 00:26:30,840
And the parentheses simply
say I don't want the at sign.

558
00:26:30,840 --> 00:26:34,100
So the at sign-- I really want
those non blank characters

559
00:26:34,100 --> 00:26:36,310
after the at sign.

560
00:26:36,310 --> 00:26:38,550
So that's what I
want to extract.

561
00:26:38,550 --> 00:26:41,880
So it's like, go
find the at sign.

562
00:26:41,880 --> 00:26:43,280
OK, great, found the at sign.

563
00:26:43,280 --> 00:26:44,870
Start extracting.

564
00:26:44,870 --> 00:26:47,960
Look for non blank
characters and extracting.

