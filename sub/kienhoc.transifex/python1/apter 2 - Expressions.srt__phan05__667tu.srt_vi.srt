381
00:17:51,860 --> 00:17:56,710
Luu_Huong_Minh 15/05/16
Nhưng đối với Python 2,
9 chia 2 là 4

382
00:17:56,710 --> 00:18:00,940
Còn 99 chia 100 là 0

383
00:18:00,940 --> 00:18:02,590
Có thể nó không dễ hiểu lắm.

384
00:18:02,590 --> 00:18:04,040
Nhưng đây là phép chia làm tròn xuống
(hay còn gọi là phép chia với kết quả bị cắt cụt)

385
00:18:04,040 --> 00:18:05,680
Không phải phép chia làm tròn bình thường 
(bình thường có thể làm tròn Lên hoặc Xuống)

386
00:18:05,680 --> 00:18:07,150
Nó là phép chia làm tròn xuống

387
00:18:07,150 --> 00:18:09,690
Một điều thú vị là nếu
1 trong 2 số trong phép tính

388
00:18:09,690 --> 00:18:14,380
có dấu thập phân, 
mà ta gọi chúng là số thực

389
00:18:14,380 --> 00:18:16,310
thì phép chia sẽ được thực hiện
như giữa các số thực

390
00:18:16,310 --> 00:18:18,860

391
00:18:18,860 --> 00:18:21,790
Vậy nên 10.0 chia 2.0 là 5.0

392
00:18:21,790 --> 00:18:24,100
Kết quả này sẽ khác

393
00:18:24,100 --> 00:18:26,590
Đây là số nguyên, 
còn đây là số thực.

394
00:18:26,590 --> 00:18:27,430
Đây là số nguyên, 
còn đây là số thực.

395
00:18:27,430 --> 00:18:28,350
Kết quả là 5.0

396
00:18:28,350 --> 00:18:32,285
Còn 99.0 chia 100.0 
sẽ giống với cách hiểu thông thường,

397
00:18:32,285 --> 00:18:33,660
với kết quả là một số thực.

398
00:18:33,660 --> 00:18:36,840

399
00:18:36,840 --> 00:18:40,080
Ta cũng có thể trộn lẫn 
số nguyên và số thực trong phép tính

400
00:18:40,080 --> 00:18:41,380
  

401
00:18:41,380 --> 00:18:43,390
Đây là phép chia 99 cho 100

402
00:18:43,390 --> 00:18:47,530
Cả 2 đều là số nguyên.

403
00:18:47,530 --> 00:18:50,020
Nên kết quả được 
làm tròn xuống thành 0,

404
00:18:50,020 --> 00:18:53,580
Giờ nếu ta có một số nguyên
chia cho một số thực,

405
00:18:53,580 --> 00:18:58,340
như 99 chia 100.0, thì
kết quả là 0.99

406
00:18:58,340 --> 00:19:00,824
Ngược lại, nếu chia 99.0 cho 100

407
00:19:00,824 --> 00:19:02,740
tức là số thực chia cho số nguyên,

408
00:19:02,740 --> 00:19:04,323
thì kết quả vẫn là số thực.

409
00:19:04,323 --> 00:19:06,490
Đây là các số thực

410
00:19:06,490 --> 00:19:11,140
Điều này cũng đúng
với một biểu thức phức tạp

411
00:19:11,140 --> 00:19:12,219
có chứa số nguyên.

412
00:19:12,219 --> 00:19:13,760
Trước hết ta sẽ tính

413
00:19:13,760 --> 00:19:15,650
2 * 3 là 6

414
00:19:15,650 --> 00:19:20,930
Biểu thức trở thành
1 + 6 / 4.0 - 5

415
00:19:20,930 --> 00:19:23,240
Rồi tính 6 chia 4.0

416
00:19:23,240 --> 00:19:25,780
là 1.5

417
00:19:25,780 --> 00:19:29,460
1 + 1.5 - 5

418
00:19:29,460 --> 00:19:32,080
Đây là một số nguyên
và kia là một số thực

419
00:19:32,080 --> 00:19:33,780
nên kết quả sẽ là số thực.

420
00:19:33,780 --> 00:19:35,280
Phần còn lại của biểu thức 

421
00:19:35,280 --> 00:19:38,790
sẽ được thực hiện với số thực

422
00:19:38,790 --> 00:19:41,170
và cho kết quả là -2.5

423
00:19:41,170 --> 00:19:44,580
Ta có thể cho một số thực vào
bất kỳ phép tính nào,

424
00:19:44,580 --> 00:19:47,630
và khi phép tính được thực hiện
đến số thực đó,

425
00:19:47,630 --> 00:19:50,482
phần còn lại của phép tính
sẽ được thực hiện như giữa các số thực

426
00:19:50,482 --> 00:19:52,190
Đại khái, Python chuyển đổi phép tính
sang số thực

427
00:19:52,190 --> 00:19:54,610
nhưng nó sẽ không chuyển đổi
phép tính về lại số nguyên

428
00:19:54,610 --> 00:19:57,840
vì Python coi số thực 
là hình thức tổng quát hơn số nguyên

429
00:19:57,840 --> 00:19:59,023
vì Python coi số thực 
là hình thức tổng quát hơn số nguyên

430
00:19:59,023 --> 00:20:01,800

431
00:20:01,800 --> 00:20:06,520
Ta đang nói về số nguyên và số thực.

432
00:20:06,520 --> 00:20:08,990
Đây là những khái niệm
trong các ngôn ngữ lập trình

433
00:20:08,990 --> 00:20:11,840
và trong Python gọi là "kiểu dữ liệu".

434
00:20:11,840 --> 00:20:15,620
Mọi biến và hằng
đều có một kiểu dữ liệu.

435
00:20:15,620 --> 00:20:19,630
Kiểu dữ liệu của 1 khác với của 1.0

436
00:20:19,630 --> 00:20:22,080
nên chúng hoạt động khác nhau.

437
00:20:22,080 --> 00:20:25,650
Python theo dõi tất cả biến 

438
00:20:25,650 --> 00:20:30,030
và hằng số để gán cho
chúng một kiểu dữ liệu.

439
00:20:30,030 --> 00:20:32,260
Ta đã thấy đoạn mã này, phải không?

440
00:20:32,260 --> 00:20:34,230
Điều thú vị là Python có thể

441
00:20:34,230 --> 00:20:37,860
tự xác định được kiểu dữ liệu,
giúp ta dùng cùng một cú pháp

442
00:20:37,860 --> 00:20:40,010
để thực hiện những việc khác nhau.

443
00:20:40,010 --> 00:20:43,369
Ở dòng này, ta có ddd = 1 + 4

444
00:20:43,369 --> 00:20:45,660
Python sẽ xác định 1 và 4

445
00:20:45,660 --> 00:20:47,050
là hai số nguyên,

446
00:20:47,050 --> 00:20:49,720
và nó sẽ cộng hai số đó,
cho ra 5

447
00:20:49,720 --> 00:20:51,370
Như vậy, ta nhập vào hai số nguyên,

448
00:20:51,370 --> 00:20:54,010
Python cho kết quả là một số nguyên.

449
00:20:54,010 --> 00:20:56,590
Sau đó ta có, eee = 'hello ' + 'there',

450
00:20:56,590 --> 00:20:58,930
Python xác định được 2 chuỗi ký tự, 
'hello ' và 'there'

451
00:20:58,930 --> 00:21:02,330
và nó hiểu rằng đây là phép nối chuỗi

452
00:21:02,330 --> 00:21:04,880

453
00:21:04,880 --> 00:21:06,810
Do đó, Python sẽ nối chúng lại

454
00:21:06,810 --> 00:21:08,000
vì đây là những chuỗi ký tự.

455
00:21:08,000 --> 00:21:10,050
Tôi biết cách ghép nối các chuỗi ký tự

456
00:21:10,050 --> 00:21:14,040
khá giống với việc 'cộng'
các chuỗi ký tự với nhau,

457
00:21:14,040 --> 00:21:17,170
Kết quả là 'hello there'.

458
00:21:17,170 --> 00:21:20,016
Điều thú vị là: dấu cách này ở đâu ra?

459
00:21:20,016 --> 00:21:21,990
Để tôi đổi màu bút

460
00:21:21,990 --> 00:21:22,690
 

461
00:21:22,690 --> 00:21:24,310
Dấu cách đó ở đâu ra?

462
00:21:24,310 --> 00:21:27,080
Thật ra, dấu + không thêm dấu cách vào kết quả.

463
00:21:27,080 --> 00:21:28,510
Mà trong chuỗi ký tự này có dấu cách.

464
00:21:28,510 --> 00:21:29,780
Đó là dấu cách

465
00:21:29,780 --> 00:21:33,060
Ta ghép nối 'hello ' có dấu cách và 'there'

466
00:21:33,060 --> 00:21:35,050
cho ra 'hello there'

467
00:21:35,050 --> 00:21:39,590
Điểm mất chốt là toán tử cộng này.

468
00:21:39,590 --> 00:21:43,480
Toán tử cộng nhìn qua hai bên

469
00:21:43,480 --> 00:21:44,810
và thấy 2 chuỗi ký tự.

470
00:21:44,810 --> 00:21:46,740
Nó hiểu rằng đây là phép nối chuỗi

471
00:21:46,740 --> 00:21:48,880
Còn ở đây, toán tử cộng nhìn qua hai bên

472
00:21:48,880 --> 00:21:50,240
thấy 2 số nguyên,

473
00:21:50,240 --> 00:21:51,910
và hiểu rằng đây là phép cộng.

474
00:21:51,910 --> 00:21:54,340
Python rất hiểu về các kiểu dữ liệu

475
00:21:54,340 --> 00:21:57,640
và kiểu dữ liệu cho Python biết
ý bạn muốn là gì

