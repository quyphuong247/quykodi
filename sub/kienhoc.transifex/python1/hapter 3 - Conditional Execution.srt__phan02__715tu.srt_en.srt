96
00:04:07,470 --> 00:04:09,240
https://youtu.be/VXyRfgnzL2o
This time the answer is no.

97
00:04:09,240 --> 00:04:11,480
So I'd come down here, right?

98
00:04:11,480 --> 00:04:14,950
And so this bit of
code is never executed.

99
00:04:14,950 --> 00:04:18,050
Now, this is a very
simple example.

100
00:04:18,050 --> 00:04:20,600
But you get the basic idea.

101
00:04:20,600 --> 00:04:23,410
So that's conditional execution.

102
00:04:23,410 --> 00:04:26,000
Now, there's a number
of conditional operators

103
00:04:26,000 --> 00:04:28,860
that we want to use, just
like we had multiplication,

104
00:04:28,860 --> 00:04:30,160
division.

105
00:04:30,160 --> 00:04:33,239
Some of them are
pretty intuitive.

106
00:04:33,239 --> 00:04:35,280
And the others you just
kind of have to memorize.

107
00:04:35,280 --> 00:04:38,300
Like less than and greater
than make a lot of sense.

108
00:04:38,300 --> 00:04:40,819
The one that
probably-- the easy,

109
00:04:40,819 --> 00:04:43,110
like less than or equal to
or greater than or equal to,

110
00:04:43,110 --> 00:04:44,700
those kind of makes sense to.

111
00:04:44,700 --> 00:04:49,260
They're <=, just because we
don't have a less than or equal

112
00:04:49,260 --> 00:04:52,140
to sign on a symbol or a
greater than or equal to sign,

113
00:04:52,140 --> 00:04:54,450
which will we would
use in mathematics.

114
00:04:54,450 --> 00:04:57,700
Equality-- asking the question
of whether something is equal

115
00:04:57,700 --> 00:05:00,430
to something else
or not-- is ==.

116
00:05:00,430 --> 00:05:04,240
And that's because we're already
single equals as assignment.

117
00:05:04,240 --> 00:05:08,510
So when we say x=3, that is an
assignment and sticks a value

118
00:05:08,510 --> 00:05:10,090
into x.

119
00:05:10,090 --> 00:05:14,059
This is the question
is x equal to.

120
00:05:14,059 --> 00:05:15,600
If I was building
a language, I would

121
00:05:15,600 --> 00:05:18,830
make it be equal question
mark, or something like that.

122
00:05:18,830 --> 00:05:19,980
It'd be like, huh?

123
00:05:19,980 --> 00:05:20,940
Is it equal?

124
00:05:20,940 --> 00:05:23,370
Kind of a question mark,
but that's not what we do.

125
00:05:23,370 --> 00:05:24,350
I didn't invent this.

126
00:05:24,350 --> 00:05:29,970
So double equals is the question
is something equal to another.

127
00:05:29,970 --> 00:05:31,700
A single equals
changes something.

128
00:05:31,700 --> 00:05:35,180
x=5 changes x.

129
00:05:35,180 --> 00:05:38,760
OK, and then not
equal-- exclamation

130
00:05:38,760 --> 00:05:41,400
is commonly used to mean
not in computer context.

131
00:05:41,400 --> 00:05:43,740
So if something is not
equal to something,

132
00:05:43,740 --> 00:05:46,227
it is exclamation !=.

133
00:05:46,227 --> 00:05:47,185
Here are some examples.

134
00:05:47,185 --> 00:05:50,480

135
00:05:50,480 --> 00:05:52,760
Just kind of running
through them,

136
00:05:52,760 --> 00:05:55,630
they all turn out to be
true because I set x to 5.

137
00:05:55,630 --> 00:05:58,540
If x = 5, print "Equals 4."

138
00:05:58,540 --> 00:06:02,110
I'm out here if x > 4, which is
true, print "Greater than 4."

139
00:06:02,110 --> 00:06:07,590
If x >= 5, if x < 6,
print "Less than 6."

140
00:06:07,590 --> 00:06:11,500
Now, there are two sort of
syntaxes to the if statement.

141
00:06:11,500 --> 00:06:14,640
One is where the if statement
is down here on a separate line,

142
00:06:14,640 --> 00:06:16,140
and it's indented.

143
00:06:16,140 --> 00:06:18,490
And the other is where
there's a single line,

144
00:06:18,490 --> 00:06:20,020
and it's right on the same line.

145
00:06:20,020 --> 00:06:23,360
If x < 6, print "Less than 6."

146
00:06:23,360 --> 00:06:26,330
This is true, so this
whole thing executes.

147
00:06:26,330 --> 00:06:29,302
Then it continues
down, if x <= 5,

148
00:06:29,302 --> 00:06:30,510
print "Less than or Equal 5."

149
00:06:30,510 --> 00:06:35,270
If x != 6, which is true because
it's 5, then "Not equal to 6 ."

150
00:06:35,270 --> 00:06:38,020
So all those will
turn out to be true,

151
00:06:38,020 --> 00:06:42,320
and all those will execute,
and so the tricky bit here

152
00:06:42,320 --> 00:06:48,730
is seeing this syntax for an if
statement, where it's all one

153
00:06:48,730 --> 00:06:52,040
line, and this syntax where you
end the first line with a colon

154
00:06:52,040 --> 00:06:54,410
and then indent the second line.

155
00:06:54,410 --> 00:06:55,660
This you can only do one line.

156
00:06:55,660 --> 00:06:57,770
We will soon see that you
can put more than one line an

157
00:06:57,770 --> 00:06:58,743
the indented block.

158
00:06:58,743 --> 00:07:03,410

159
00:07:03,410 --> 00:07:06,850
Here we have more than one
line in the indented block.

160
00:07:06,850 --> 00:07:09,100
These are called
one-way decisions.

161
00:07:09,100 --> 00:07:11,300
And so we say x = 5.

162
00:07:11,300 --> 00:07:12,550
We print out Before 5.

163
00:07:12,550 --> 00:07:13,980
So that prints out.

164
00:07:13,980 --> 00:07:17,560
If x == 5, remember the double
equals is the question mark

165
00:07:17,560 --> 00:07:20,700
version of equality--
single equals assignment--

166
00:07:20,700 --> 00:07:21,870
it says yes.

167
00:07:21,870 --> 00:07:22,940
So we indent.

168
00:07:22,940 --> 00:07:24,984
And the convention is
to indent four spaces.

169
00:07:24,984 --> 00:07:26,400
Although it doesn't
really matter,

170
00:07:26,400 --> 00:07:27,720
as long as you're consistent.

171
00:07:27,720 --> 00:07:29,470
Then it's going to run
all three of those.

172
00:07:29,470 --> 00:07:31,560
Is 5 still 5, Third 5.

173
00:07:31,560 --> 00:07:33,200
These lines all come out.

174
00:07:33,200 --> 00:07:35,440
And then it comes
out and prints.

175
00:07:35,440 --> 00:07:37,870
And the de-indenting--
the fact that this print

176
00:07:37,870 --> 00:07:40,569
has been moved to line
up with the if-- that's

177
00:07:40,569 --> 00:07:42,110
what indicates that
this little block

178
00:07:42,110 --> 00:07:47,590
of conditional executed
code is finished.

179
00:07:47,590 --> 00:07:49,150
So then it prints
out "Afterwards 5".

180
00:07:49,150 --> 00:07:52,240
Comes some more Before 6.

181
00:07:52,240 --> 00:07:54,960
Then it asks another
question-- if x == 6.

182
00:07:54,960 --> 00:07:58,040
Again, that's the question
mark version of it.

183
00:07:58,040 --> 00:08:01,000
And if this is false
now, because x happens

184
00:08:01,000 --> 00:08:03,150
to be 5, so the answer
to this expression--

185
00:08:03,150 --> 00:08:05,980
the logical
expression-- is false,

186
00:08:05,980 --> 00:08:07,990
then it skips all of
the indented bits.

187
00:08:07,990 --> 00:08:10,710
So none of this executes.

188
00:08:10,710 --> 00:08:13,460
So since it's false, it skips
all of the indented bit.

189
00:08:13,460 --> 00:08:16,370
But then this print lines up,
and so then it picks back up

190
00:08:16,370 --> 00:08:18,010
with Afterwards 6.

