96
00:04:30,280 --> 00:04:31,540
https://youtu.be/IXXHH6ztsSA
that would confuse it.

97
00:04:31,540 --> 00:04:35,180

98
00:04:35,180 --> 00:04:37,940
And it wouldn't understand
what we really mean there.

99
00:04:37,940 --> 00:04:41,060
So that would be a syntax error.

100
00:04:41,060 --> 00:04:44,090
Because case is
sensitive, that means

101
00:04:44,090 --> 00:04:46,260
that things like
all lowercase spam

102
00:04:46,260 --> 00:04:49,730
is different than a uppercase
S and all uppercase.

103
00:04:49,730 --> 00:04:55,120
These are three distinct
variables that are unique.

104
00:04:55,120 --> 00:04:57,080
Most people don't
choose variables

105
00:04:57,080 --> 00:04:58,560
that might be so confusing.

106
00:04:58,560 --> 00:05:01,740
So to you as you write
it, and as to anybody

107
00:05:01,740 --> 00:05:04,530
that might read it, would
find three variables

108
00:05:04,530 --> 00:05:06,400
named as very confusing.

109
00:05:06,400 --> 00:05:08,100
So it's a bad idea.

110
00:05:08,100 --> 00:05:08,990
Don't do it.

111
00:05:08,990 --> 00:05:10,930
But I'm just showing
you as an example

112
00:05:10,930 --> 00:05:14,940
that case can make a
variable name distinct.

113
00:05:14,940 --> 00:05:18,190
And again, this variable
is a place in memory

114
00:05:18,190 --> 00:05:22,530
that we are going to store
and retrieve information,

115
00:05:22,530 --> 00:05:24,730
whether it be numbers
or strings or whatever.

116
00:05:24,730 --> 00:05:27,030
These are things
that we control.

117
00:05:27,030 --> 00:05:29,990
Now Python also has a
set of reserved words.

118
00:05:29,990 --> 00:05:33,070
And what it really means is you
can't use these for variables.

119
00:05:33,070 --> 00:05:36,020
These words have
very special meaning,

120
00:05:36,020 --> 00:05:40,530
and, four, is, raise, if.

121
00:05:40,530 --> 00:05:42,280
So you can't make
a variable name if.

122
00:05:42,280 --> 00:05:43,620
It'll be like, oh, no.

123
00:05:43,620 --> 00:05:44,741
That is if.

124
00:05:44,741 --> 00:05:45,490
I know what if is.

125
00:05:45,490 --> 00:05:49,300
So these are words that Python
has as its core vocabulary

126
00:05:49,300 --> 00:05:52,620
and forbids you to use
them for other purposes,

127
00:05:52,620 --> 00:05:55,600
like variable names or
later function names.

128
00:05:55,600 --> 00:05:58,870
So that's kind of the
vocabulary, constants,

129
00:05:58,870 --> 00:06:03,000
variables, and reserved words.

130
00:06:03,000 --> 00:06:06,020
Now, we take these and
we start assembling them

131
00:06:06,020 --> 00:06:09,060
into sort of sentences,
statements, Python statements

132
00:06:09,060 --> 00:06:10,590
that do something.

133
00:06:10,590 --> 00:06:13,250
So we've already talked about
an assignment statement.

134
00:06:13,250 --> 00:06:15,210
It has kind of an arrow here.

135
00:06:15,210 --> 00:06:18,230
It says, hey, Python, go
find me a place called x.

136
00:06:18,230 --> 00:06:21,370
Take the number 2 and stick
it in there for later,

137
00:06:21,370 --> 00:06:22,740
then continue on.

138
00:06:22,740 --> 00:06:25,570
Now because there's an
arrow, the right side of this

139
00:06:25,570 --> 00:06:26,980
is done first.

140
00:06:26,980 --> 00:06:32,159
And you can kind of ignore for
the moment the left-hand side.

141
00:06:32,159 --> 00:06:33,700
And it calculates
the right-hand side

142
00:06:33,700 --> 00:06:37,560
by looking at the current value
for x, which happens to be 2.

143
00:06:37,560 --> 00:06:40,590
And it adds these two things
together, and then gets 4.

144
00:06:40,590 --> 00:06:46,290
And then at the point where it
knows that this number is 4,

145
00:06:46,290 --> 00:06:48,720
it will then store
that back into x.

146
00:06:48,720 --> 00:06:52,910
And so then later we print
x, and we will get the 4.

147
00:06:52,910 --> 00:06:55,410
And so again, this is
a sequence of steps.

148
00:06:55,410 --> 00:06:59,669
And the variable x changes
as these steps continue.

149
00:06:59,669 --> 00:07:01,460
And we're saying print
x, that really means

150
00:07:01,460 --> 00:07:03,680
print the current value for x.

151
00:07:03,680 --> 00:07:07,660

152
00:07:07,660 --> 00:07:11,140
So we can do a number
of different operators

153
00:07:11,140 --> 00:07:12,610
and assignment statements.

154
00:07:12,610 --> 00:07:15,970
We calculate this
right-hand side.

155
00:07:15,970 --> 00:07:18,860
This is sort of all
calculated, whatever this is,

156
00:07:18,860 --> 00:07:20,560
based on the
current value for x.

157
00:07:20,560 --> 00:07:21,860
It does this calculation.

158
00:07:21,860 --> 00:07:24,230
And then when it knows
what the answer is,

159
00:07:24,230 --> 00:07:26,340
it assigns that
into the variable

160
00:07:26,340 --> 00:07:30,840
that's on the left-hand side
of the assignment statement.

161
00:07:30,840 --> 00:07:34,627
Again, calculate the right-hand
side completely, and then move

162
00:07:34,627 --> 00:07:35,800
it to the left-hand side.

163
00:07:35,800 --> 00:07:39,630
Some early languages actually
didn't use the equal sign

164
00:07:39,630 --> 00:07:41,290
for the assignment operator.

165
00:07:41,290 --> 00:07:43,720
This assignment
operator, in a way,

166
00:07:43,720 --> 00:07:49,380
it kind of-- some languages,
an early language, actually

167
00:07:49,380 --> 00:07:50,760
used an arrow.

168
00:07:50,760 --> 00:07:53,610
Arrows aren't really
on people's keyboards.

169
00:07:53,610 --> 00:07:56,810
Another language used colon
equals as this assignment

170
00:07:56,810 --> 00:07:57,310
operator.

171
00:07:57,310 --> 00:07:58,890
But we use equals.

172
00:07:58,890 --> 00:08:00,340
Now if you're
familiar with math,

173
00:08:00,340 --> 00:08:05,930
this can be a little confusing,
like x = 1, and then x = 2.

174
00:08:05,930 --> 00:08:07,880
That, as mathematics,
would be bad math.

175
00:08:07,880 --> 00:08:11,710
Because in a proof or a problem,
x can only have one value.

176
00:08:11,710 --> 00:08:14,300
But in programming, if
this was two statements,

177
00:08:14,300 --> 00:08:16,710
that means just x had
value, and then the value

178
00:08:16,710 --> 00:08:19,430
for x changed later.

179
00:08:19,430 --> 00:08:20,580
OK.

180
00:08:20,580 --> 00:08:22,350
So I'll just kind
of go through this.

181
00:08:22,350 --> 00:08:24,720
Because it's working
from the right-hand side

182
00:08:24,720 --> 00:08:27,090
to the left-hand side on
assignment statements,

183
00:08:27,090 --> 00:08:29,700
it is pulling out
these x values.

184
00:08:29,700 --> 00:08:31,750
So x may have 0.6.

185
00:08:31,750 --> 00:08:34,440
It pulls the values
out before sort

186
00:08:34,440 --> 00:08:36,250
of ignoring this
part right here.

187
00:08:36,250 --> 00:08:39,250
And it's just going to try
to resolve this expression.

188
00:08:39,250 --> 00:08:41,690
And it has multiplication
and parentheses and things

189
00:08:41,690 --> 00:08:42,520
like that.

190
00:08:42,520 --> 00:08:46,500
So it basically pulls the
0.6 into the calculation,

