1
00:00:09,789 --> 00:00:11,470
https://youtu.be/bQbNgMjGRrs
So we've learned about foreign keys.

2
00:00:11,470 --> 00:00:12,840
We've learned about JOIN.

3
00:00:12,840 --> 00:00:17,260
We've learned about how to normalize
data to remove duplicates.

4
00:00:17,260 --> 00:00:20,770
But there's still one more basic data
modeling thing that we have to learn about

5
00:00:20,770 --> 00:00:23,640
and that's many-to-many relationships.

6
00:00:23,640 --> 00:00:27,460
And so everything we've done so
far is what we call one-to-many.

7
00:00:27,460 --> 00:00:30,640
And that is, an album has many tracks.

8
00:00:30,640 --> 00:00:35,050
So at the end of these arrows, and
we see these on some of the crow's foot

9
00:00:35,050 --> 00:00:38,720
data model diagrams, one end is like many 
and then there's one.

10
00:00:38,720 --> 00:00:42,310
So one album, and then many tracks.

11
00:00:42,310 --> 00:00:44,450
And so, this is the kind of thing
that we've got.

12
00:00:44,450 --> 00:00:47,250
And we've got a foreign
key in the many side.

13
00:00:47,250 --> 00:00:51,640
So that allows there to be many,
many, many tracks for one album.

14
00:00:51,640 --> 00:00:54,550
And then another album would have
many, many, many tracks.

15
00:00:54,550 --> 00:00:55,730
Right? And so that's the idea.

16
00:00:55,730 --> 00:01:00,210
There's a set of tracks that have the same
I mean this is the duplication that we

17
00:01:00,210 --> 00:01:06,210
just got rid of and that's called a
many-to-one or a one-to-many, okay?

18
00:01:06,210 --> 00:01:11,660
And so that is one form and
it's the most common form and

19
00:01:11,660 --> 00:01:17,160
we see this in our tables where we
have genre_id or album_id and we have

20
00:01:17,160 --> 00:01:21,700
duplication in here and this is the many
side so there's many of these things

21
00:01:21,700 --> 00:01:23,660
for one of those things.

22
00:01:23,660 --> 00:01:27,640
And, as an example of
biological mother and children,

23
00:01:27,640 --> 00:01:30,730
a biological, single biological
mother might have many children.

24
00:01:30,730 --> 00:01:32,870
And this is also a crow's foot diagram.

25
00:01:32,870 --> 00:01:38,270
And this little like crow's foot says many,
and then one shows right there.

26
00:01:39,270 --> 00:01:41,510
So when we're drawing
these data model diagrams,

27
00:01:41,510 --> 00:01:43,380
which we haven't spent too much time with,

28
00:01:43,380 --> 00:01:47,110
we always draw them in a way so
that we capture the manyness or

29
00:01:47,110 --> 00:01:49,290
the cardinality of each
end of the relationship.

30
00:01:49,290 --> 00:01:51,410
Now, so that's one-to-many.

31
00:01:51,410 --> 00:01:56,530
But sometimes we have a relationship
between data that's many-to-many, and

32
00:01:56,530 --> 00:02:01,000
frankly in our music data that we've been
playing with, I already told you that, like,

33
00:02:01,000 --> 00:02:04,130
well there's actually
many artists on an album.

34
00:02:04,130 --> 00:02:06,830
But I said don't worry about that.
Well now we're going to worry about that.

35
00:02:06,830 --> 00:02:10,070
So the example that I took from
Wikipedia is books and authors.

36
00:02:10,070 --> 00:02:13,296
There are many authors and many books.

37
00:02:13,296 --> 00:02:18,630
And so, one author may talk to many books,

38
00:02:18,630 --> 00:02:23,490
and one book may have different authors
that they're connected to. And so

39
00:02:23,490 --> 00:02:26,460
we can't say that either of these is a
one relationship, and so

40
00:02:26,460 --> 00:02:28,580
we call this a many-to-many.

41
00:02:28,580 --> 00:02:31,170
On both ends there's a many-to-many.

42
00:02:31,170 --> 00:02:36,840
But in terms of the table that we
want to do, there is no way.

43
00:02:36,840 --> 00:02:39,970
You can't put a single
foreign key in this side.

44
00:02:39,970 --> 00:02:41,410
Oops, come back.

45
00:02:41,410 --> 00:02:44,370
We can't put a foreign key in
this table to point to Books.

46
00:02:44,370 --> 00:02:47,390
And we can't put a foreign key in Books
pointing to Authors because that would be

47
00:02:47,390 --> 00:02:49,390
sort of a one on either side.

48
00:02:49,390 --> 00:02:53,130
And so we build a table in the
middle, okay?

49
00:02:53,130 --> 00:02:58,240
And in Wikipedia they call it a junction
table, all kinds of names for

50
00:02:58,240 --> 00:03:00,960
this thing, but what we do is we
have a little table that we create.

51
00:03:00,960 --> 00:03:03,380
We still have a Books table and
a Authors table, but

52
00:03:03,380 --> 00:03:07,970
then we have a table that models nothing
but the connection between them and so

53
00:03:07,970 --> 00:03:13,010
we decompose this many-to-many
relationship into a

54
00:03:13,010 --> 00:03:18,130
many-to-one relationship and a many-to-one
relationship and these two things

55
00:03:18,130 --> 00:03:22,710
then we can model properly using the exact
same techniques that we've been using

56
00:03:22,710 --> 00:03:23,630
all along.

57
00:03:23,630 --> 00:03:29,030
And so we end up with a table that has two
foreign keys in it and no primary key.

58
00:03:29,030 --> 00:03:33,880
So let's take a look at how this looks
when we actually build it and model it.

59
00:03:33,880 --> 00:03:39,650
So here we're going to have something
I care a lot about, courses and users.

60
00:03:39,650 --> 00:03:44,080
So this has to do with the fact that one
user is a member of many courses and

61
00:03:44,080 --> 00:03:48,650
each course has many users so the
relationship between courses and users,

62
00:03:48,650 --> 00:03:52,050
the member-of relationship,
is many on both ends.

63
00:03:52,050 --> 00:03:54,410
And we just can't model that directly.

64
00:03:54,410 --> 00:03:57,360
So we make a little mini-table
in the middle, right?

65
00:03:57,360 --> 00:04:01,190
So we call this the membership table or
the table called Member.

66
00:04:01,190 --> 00:04:03,480
We still have a User table and
a Course table.

67
00:04:03,480 --> 00:04:06,140
And we have a primary key in
the Course and the User table.

68
00:04:06,140 --> 00:04:09,610
And what we do is we have this
Member table that has each row

69
00:04:09,610 --> 00:04:11,270
has two foreign keys.

70
00:04:11,270 --> 00:04:15,100
And it is a connection, so if you think
of all the courses on one side, and

71
00:04:15,100 --> 00:04:17,060
all the users on another side,

72
00:04:17,060 --> 00:04:20,350
each connection,
these could be friends of people,

73
00:04:20,350 --> 00:04:23,070
each connection has one row

74
00:04:23,070 --> 00:04:26,870
that connects a particular
course with a particular user.

75
00:04:26,870 --> 00:04:28,560
And that's how it works.

76
00:04:28,560 --> 00:04:32,930
And so then that decomposes
our many-to-many relationship

77
00:04:32,930 --> 00:04:36,110
into two halves of two many-to-ones,

78
00:04:36,110 --> 00:04:40,140
that then models the many-to-many
relationship between the two tables.

79
00:04:40,140 --> 00:04:42,680
We don't put an id.

80
00:04:42,680 --> 00:04:46,080
We don't put that in there,
because we can make a composite key,

81
00:04:46,080 --> 00:04:49,930
which is, both these two things
are the primary key for that table.

82
00:04:49,930 --> 00:04:53,530
They're both numbers,
duplication is allowed and so

83
00:04:53,530 --> 00:04:55,420
this is all perfectly great.

84
00:04:55,420 --> 00:05:00,040
Now sometimes we'll model something like
put a role here so that you can say okay,

85
00:05:00,040 --> 00:05:01,350
this is courses and users.

86
00:05:01,350 --> 00:05:06,328
We might indicate that this particular
user/course combination also

87
00:05:06,328 --> 00:05:10,629
is an instructor and this particular
is a student, right?

88
00:05:10,629 --> 00:05:15,337
And so we can sometimes put a little bit
of extra data on the link itself, and so

89
00:05:15,337 --> 00:05:18,388
we have a little bit of data
that we add down there.

90
00:05:18,388 --> 00:05:19,448
Okay?

91
00:05:19,448 --> 00:05:23,246
So we make this little table in
the middle, and so here we're going to run

92
00:05:23,246 --> 00:05:27,669
some databases. I'm going to start with
a fresh database. I'm going to make a User

93
00:05:27,669 --> 00:05:31,844
table, the main difference is I'm going
to give the primary key for the users,

94
00:05:31,844 --> 00:05:36,081
I'm going to make a Course table, and
this is our standard primary key stuff.

95
00:05:36,081 --> 00:05:40,300
I'm going to have a name and email for
the users, and a title for the courses.

96
00:05:40,300 --> 00:05:43,520
And then, those are just normal
things that we're used to doing.

97
00:05:43,520 --> 00:05:46,310
But now what we're going to do is
create this little connector table

98
00:05:46,310 --> 00:05:49,870
that's going to have two,
it's going to have a role_id, and course_id.

99
00:05:49,870 --> 00:05:52,210
I mean a user_id and a course_id.

100
00:05:52,210 --> 00:05:56,360
And then we're going to model a little bit
of data, right here in the middle, and

101
00:05:56,360 --> 00:05:57,360
we're going to model role.

102
00:05:57,360 --> 00:06:02,330
And this is going to allow us to say whether
someone's a teacher or a student.

103
00:06:02,330 --> 00:06:05,190
And the other thing that we're doing
that's effectively a substitute for this

104
00:06:05,190 --> 00:06:09,690
primary key is we're saying our primary
key is actually two columns together.

105
00:06:09,690 --> 00:06:11,200
And it's the combination.

106
00:06:11,200 --> 00:06:12,770
So this forces it to be unique.

107
00:06:14,550 --> 00:06:19,140
But it's really the combination of
user_id and course_id must be unique.

108
00:06:19,140 --> 00:06:19,640
Okay?

109
00:06:21,730 --> 00:06:22,890
So let's take a look at this.

110
00:06:24,070 --> 00:06:26,300
Let's actually go ahead and run some code.

111
00:06:26,300 --> 00:06:34,120
And so what I'm going to suggest that you do
is to start with a brand new fresh database.

112
00:06:34,120 --> 00:06:35,630
Just click New Database. Right?

113
00:06:36,810 --> 00:06:43,910
And we're going to call this,
I'll call it sql3, New Database.

114
00:06:43,910 --> 00:06:47,358
And, I'm not going to do my table there,
I'm going to go over Execute SQL,

115
00:06:47,358 --> 00:06:51,530
which by now I hope
is coming somewhat comfortable to you.

116
00:06:51,530 --> 00:06:52,830
And then, I'm going to grab.

117
00:06:52,830 --> 00:06:59,820
Actually, I'm going to grab these two.

118
00:06:59,820 --> 00:07:02,099
First we'll grab those two
CREATE TABLE statements.

119
00:07:05,559 --> 00:07:08,700
I'll put a semicolon at the end of
this one so we can run them both.

120
00:07:08,700 --> 00:07:12,560
Let's see if they worked.

121
00:07:13,570 --> 00:07:17,090
Yep, I've got a course and user,
primary key, title, id, name,

122
00:07:17,090 --> 00:07:18,720
just exactly what we've got.

123
00:07:18,720 --> 00:07:22,060
And so now what we're going
to do is we are going to

124
00:07:22,060 --> 00:07:24,330
execute the SQL to make
the little connector table.

125
00:07:30,000 --> 00:07:33,090
So I'll paste that in,
and I will run that.

126
00:07:35,990 --> 00:07:39,150
Let's see if it worked, and it did work.

127
00:07:39,150 --> 00:07:40,980
So we're all good, primary key.

128
00:07:42,410 --> 00:07:44,160
And now we're going to put some data in.

129
00:07:44,160 --> 00:07:45,230
So let's take a look at some data.

130
00:07:45,230 --> 00:07:49,440
When we're done, we've got that,
which we've seen.

131
00:07:49,440 --> 00:07:52,180
And so we're going to insert some users and
some courses, so

132
00:07:52,180 --> 00:07:54,370
let's take a look at that
before we go doing it.

133
00:07:55,920 --> 00:08:00,100
So because these have auto
increment primary keys and

134
00:08:00,100 --> 00:08:03,650
we're just going to insert the name
and the email jane@tsugi.org and

135
00:08:03,650 --> 00:08:07,210
we're going to insert three users and
then we're going to get the user id's and

136
00:08:07,210 --> 00:08:10,660
then we're going to insert three courses,
Python, SQL, and PHP.

137
00:08:11,680 --> 00:08:12,680
So we'll just do those.

138
00:08:12,680 --> 00:08:14,070
Those are nothing special.

139
00:08:14,070 --> 00:08:16,738
They're no different than the things
we've been doing all along.

140
00:08:25,109 --> 00:08:26,046
Go over here in SQL.

141
00:08:26,046 --> 00:08:29,699
They all have semicolons at the end.

142
00:08:33,539 --> 00:08:36,050
So it all ran, so we'll browse the data.

143
00:08:36,050 --> 00:08:36,940
We see the course data.

144
00:08:36,940 --> 00:08:39,350
And we see the user data.

145
00:08:39,350 --> 00:08:41,920
And there's nothing in
the membership data.

146
00:08:41,920 --> 00:08:45,730
I mean, the database doesn't know
that we've done anything like this.

147
00:08:45,730 --> 00:08:47,740
We just inserted some stuff over here.

148
00:08:47,740 --> 00:08:50,420
And what we're really doing is
establishing the primary key in this

149
00:08:50,420 --> 00:08:51,050
id column.

150
00:08:51,050 --> 00:08:52,600
So Python is 1.

151
00:08:52,600 --> 00:08:54,910
SQL is 2 and PHP is 3.

152
00:08:54,910 --> 00:08:58,499
And so now we're going to actually put
some data into the member column, and

153
00:08:58,499 --> 00:09:00,550
the user_id, course_id, role.

154
00:09:00,550 --> 00:09:02,790
So we're connecting one
user to one course, and

155
00:09:02,790 --> 00:09:05,380
then assigning a role to
that particular membership.

156
00:09:05,380 --> 00:09:11,500
So this is a membership record, who is
a member of what and some aspect of it.

157
00:09:11,500 --> 00:09:13,420
And there can be a few things that are

158
00:09:13,420 --> 00:09:15,560
often a few more columns
that you could do.

159
00:09:15,560 --> 00:09:18,980
So let's take a look at the thing
we've got to do to actually

160
00:09:18,980 --> 00:09:20,690
insert users into the courses.

161
00:09:20,690 --> 00:09:21,380
Right?

162
00:09:21,380 --> 00:09:23,120
So here's the numbers that we've got.

163
00:09:23,120 --> 00:09:27,050
And so now what we're going to do is

164
00:09:27,050 --> 00:09:32,990
insert into, there we go, insert into the member
table the enrollment records, as it were.

165
00:09:32,990 --> 00:09:36,610
So we've got to insert user_id, course_id,
foreign keys, and then the role.

166
00:09:36,610 --> 00:09:39,770
And so this says, we're going to do user 1
is going to be in course 1, and

167
00:09:39,770 --> 00:09:42,300
we'll make 1 be the instructor, okay?

168
00:09:42,300 --> 00:09:43,520
And then we're saying

169
00:09:44,680 --> 00:09:47,390
user 2 is in course 1 as a student.

170
00:09:47,390 --> 00:09:50,350
User 3 is in course 1 as a student.

171
00:09:50,350 --> 00:09:52,640
User 1 is course 2 as a student.

172
00:09:52,640 --> 00:09:55,220
User 2 is in course 2 as an instructor.

173
00:09:55,220 --> 00:09:57,030
Etc., etc., etc.

174
00:09:57,030 --> 00:10:01,470
And so because we know what
these numbers are in actual code

175
00:10:01,470 --> 00:10:03,430
we'll know what the numbers are.

176
00:10:03,430 --> 00:10:04,950
We know what the numbers are, and so

177
00:10:04,950 --> 00:10:07,370
we sort of put them right
in the insert statements.

178
00:10:07,370 --> 00:10:09,250
And that's how we make our connections.

179
00:10:10,770 --> 00:10:17,590
So let's go ahead and run those,

180
00:10:20,590 --> 00:10:25,470
go to SQL and insert all those.

181
00:10:25,470 --> 00:10:25,970
Click.

182
00:10:28,349 --> 00:10:30,179
Oh yikes, hope I didn't do that twice.

183
00:10:33,219 --> 00:10:34,370
Nope, I didn't do it twice.

184
00:10:34,370 --> 00:10:35,720
I'm glad.

185
00:10:35,720 --> 00:10:37,810
Let me just refresh to make
sure I didn't do it twice.

186
00:10:37,810 --> 00:10:42,550
Okay, so that's just the numbers that
came from those insert statements and

187
00:10:42,550 --> 00:10:46,230
instructor, instructor, instructor,
the courses, and the students. Okay?

188
00:10:46,230 --> 00:10:49,670
And so now what we have is we have

189
00:10:49,670 --> 00:10:55,390
in our database, we have now
connected these things together.

190
00:10:55,390 --> 00:10:56,725
Right?
So we've got them all connected

191
00:10:56,725 --> 00:11:00,700
together. We've got our User table,
we've got our Ccourse table, and

192
00:11:00,700 --> 00:11:05,920
then we've got our connectors that go
from here to here and here to here.

193
00:11:05,920 --> 00:11:08,720
And we are modeling
a little tiny bit of data

194
00:11:08,720 --> 00:11:11,020
on the connection, is what we'd call that.

195
00:11:11,020 --> 00:11:13,340
On the connection, okay?

196
00:11:13,340 --> 00:11:16,860
So, let's get some data
out of this table now.

197
00:11:16,860 --> 00:11:21,817
We are going to write a select statement,
SELECT User.name,

198
00:11:21,817 --> 00:11:25,069
Member.role, and then Course.title.

199
00:11:25,069 --> 00:11:28,340
We're going to select those from the User,

200
00:11:28,340 --> 00:11:32,453
joined with the Member,
joined with the Course, so

201
00:11:32,453 --> 00:11:37,328
we're going to join all those
together into one big long row.

202
00:11:37,328 --> 00:11:42,983
We use the ON clause and the
Member.user_id is equal to the user's id and

203
00:11:42,983 --> 00:11:50,320
the members and the courses, the membership
course id is equal to the course's id.

204
00:11:50,320 --> 00:11:52,290
Member.course_id equals the course's id.

205
00:11:52,290 --> 00:11:54,810
Oh and then we're going to do cool stuff.

206
00:11:54,810 --> 00:11:57,760
We're going to order by the course
title then the member role.

207
00:11:57,760 --> 00:11:58,390
The way these.

208
00:11:58,390 --> 00:12:01,590
And then member role descending and
then the user name.

209
00:12:01,590 --> 00:12:06,790
So what this means is, the precedence is
course title's the most important thing.

210
00:12:06,790 --> 00:12:08,990
The role's the next most important thing.

211
00:12:08,990 --> 00:12:10,540
And we're going to do that descending and

212
00:12:10,540 --> 00:12:13,380
then the user name is the third
most important thing.

213
00:12:13,380 --> 00:12:18,690
So this is going to give us
sorted by course first and

214
00:12:18,690 --> 00:12:23,710
then within course it's role first, and
then for people that have the same role

215
00:12:23,710 --> 00:12:28,270
like this one has the same role, so this
allows us to see the teachers first and

216
00:12:28,270 --> 00:12:33,060
then the students in alphabetical order
because the role in 1 for teachers and

217
00:12:33,060 --> 00:12:34,750
0 for students, okay?

218
00:12:34,750 --> 00:12:39,140
So that's what we get when
we make this join, and so

219
00:12:39,140 --> 00:12:41,580
we've kind of created
an enrollment record.

220
00:12:41,580 --> 00:12:46,140
If we had a WHERE clause we could pick
it for one particular course, etc., etc.

221
00:12:46,140 --> 00:12:48,210
So let's go ahead and run that select.

222
00:12:48,210 --> 00:12:52,218
It will be really boring
if everything went well.

223
00:12:52,218 --> 00:12:58,608
Execute SQL.

224
00:12:58,608 --> 00:13:00,810
Paste that SQL in.

225
00:13:00,810 --> 00:13:02,710
And run that SQL.

226
00:13:02,710 --> 00:13:07,530
And so we see ordered by course,
then ordered by role,

227
00:13:07,530 --> 00:13:12,350
and then within the same role
it's ordered by student name.

228
00:13:12,350 --> 00:13:15,220
Okay? So that was an example of
three things in

229
00:13:15,220 --> 00:13:16,040
the ORDER BY clause.

230
00:13:18,070 --> 00:13:21,060
Okay. So, you see this sort of working

231
00:13:21,060 --> 00:13:22,870
if you look at various data models.

232
00:13:22,870 --> 00:13:29,260
This happens to be a data model for
your autograder actually.

233
00:13:29,260 --> 00:13:31,800
It uses a piece of software called Tsugi.

234
00:13:31,800 --> 00:13:34,210
And the interaction between
the learning system and

235
00:13:34,210 --> 00:13:38,140
Tsugi has to model things like
what course you're coming from,

236
00:13:38,140 --> 00:13:43,110
the membership you are, whether you're a
teacher or not, and so if I look at this,

237
00:13:43,110 --> 00:13:47,070
not that you really need to look at
this in great detail, we got this

238
00:13:47,070 --> 00:13:51,330
is a production software, a User table,
a Context which is the same as course, and

239
00:13:51,330 --> 00:13:57,700
then the Membership, and the Membership
has a many, many-to-one, one.

240
00:13:57,700 --> 00:14:01,030
So we have a many-to-many relationship
between users and courses, but

241
00:14:01,030 --> 00:14:05,270
we model it with this little table
that's the connector table. And,

242
00:14:05,270 --> 00:14:06,820
here's a role in there.

243
00:14:06,820 --> 00:14:09,150
As you might expect in any teaching and
learning environment,

244
00:14:09,150 --> 00:14:12,470
you're going to keep track of the role. And
I have a thing called the role override.

245
00:14:12,470 --> 00:14:17,240
And I also have two little things that
keep track of when things happen.

246
00:14:17,240 --> 00:14:19,930
And so let's see.

247
00:14:20,940 --> 00:14:21,760
So some of these.

248
00:14:21,760 --> 00:14:22,320
Some of these.

249
00:14:22,320 --> 00:14:24,060
So that's a many-to-many relationship.

250
00:14:24,060 --> 00:14:26,360
Most of these other
things are many-to-one.

251
00:14:26,360 --> 00:14:28,460
This is a many-to-one relationship.

252
00:14:28,460 --> 00:14:30,820
And so this is a modified crow's foot.

253
00:14:30,820 --> 00:14:34,200
This is a many-to-one relationship
between the course link.

254
00:14:34,200 --> 00:14:35,840
This happens to be the link
that you click on.

255
00:14:35,840 --> 00:14:37,120
Blah blah blah blah blah.

256
00:14:37,120 --> 00:14:39,100
And this is actually your grade.

257
00:14:39,100 --> 00:14:42,000
And results are great, and so
there's many results for one link,

258
00:14:42,000 --> 00:14:46,820
and that's because every
student gets their own grade.

259
00:14:46,820 --> 00:14:49,260
Okay, so this just happens to be
the data model for

260
00:14:49,260 --> 00:14:54,520
this piece of software you have now been
using, perhaps, for several months.

261
00:14:54,520 --> 00:14:57,690
But you see one of these
many-to-many relationships.

262
00:14:58,910 --> 00:15:03,960
Okay. So, why did we do all this?

263
00:15:03,960 --> 00:15:05,630
Why did we do all of these things?

264
00:15:05,630 --> 00:15:09,800
Why did we make these little integers?
Why did we take you about JOIN?

265
00:15:09,800 --> 00:15:11,620
Why did we teach about many-to-many?

266
00:15:11,620 --> 00:15:16,800
Why did we make your data look so
crazy? And that is all about speed.

267
00:15:16,800 --> 00:15:19,860
And you might say I
don't care about speed.

268
00:15:20,900 --> 00:15:22,850
And it turns out that there
are plenty of programs for

269
00:15:22,850 --> 00:15:23,930
which you don't care about speed.

270
00:15:23,930 --> 00:15:27,450
You know, the little program
to calculate the US floor from

271
00:15:27,450 --> 00:15:28,320
the Europe floor.

272
00:15:28,320 --> 00:15:29,796
It doesn't matter.

273
00:15:29,796 --> 00:15:35,340
Reading 10,000 lines from a file doesn't
matter. But when you build a SAN online

274
00:15:35,340 --> 00:15:39,900
application or even a large data analysis
application, speed begins to matter.

275
00:15:39,900 --> 00:15:43,930
And so what happens is you cross over this
moment where it become too slow.

276
00:15:43,930 --> 00:15:47,390
And then the only way to make it go
fast is to really make it go fast.

277
00:15:47,390 --> 00:15:51,820
And so when you use databases you can
do things that seem amazingly fast.

278
00:15:51,820 --> 00:15:54,700
And so all this normalization,
the amount of data that you store,

279
00:15:54,700 --> 00:15:57,910
the amount of data you
scan, is really taken out.

280
00:15:57,910 --> 00:15:59,900
And it's not really a trade-off.

281
00:15:59,900 --> 00:16:03,610
Either your thing is small enough that you
don't have to do this, or you cross over

282
00:16:03,610 --> 00:16:07,060
this point where your application
will fail unless you don't do this.

283
00:16:07,060 --> 00:16:08,150
And so that's why

284
00:16:08,150 --> 00:16:09,960
this is an important skill to have.

285
00:16:10,960 --> 00:16:15,340
So, we've covered a lot of SQL
in a short period of time.

286
00:16:15,340 --> 00:16:16,950
There's much more to learn.

287
00:16:16,950 --> 00:16:20,370
People always ask me,
is there an advanced SQL class, and

288
00:16:20,370 --> 00:16:25,110
I'm like, well it's kind of a beginning
SQL class and then the rest of your life.

289
00:16:25,110 --> 00:16:28,030
Because you can always learn more
about Structured Query Language, and

290
00:16:28,030 --> 00:16:31,300
how databases work, and what goes fast,
and what doesn't go fast.

291
00:16:31,300 --> 00:16:32,740
A couple things that you can look for

292
00:16:32,740 --> 00:16:35,240
as topics that we really
didn't cover very well.

293
00:16:35,240 --> 00:16:39,920
Indexes, this has to do with like logical
keys and lookups really fast for strings.

294
00:16:39,920 --> 00:16:40,740
Constraints.

295
00:16:40,740 --> 00:16:42,800
We did have a thing not null.

296
00:16:42,800 --> 00:16:45,120
There's other constraints
that you can put on data.

297
00:16:45,120 --> 00:16:46,030
And transactions.

298
00:16:46,030 --> 00:16:50,450
They're a way to group operations,
like if a read starts,

299
00:16:50,450 --> 00:16:52,500
no more reads until a write happens.

300
00:16:52,500 --> 00:16:59,300
And so it's a way of blocking things, and
so these are all very, very important topics.

301
00:16:59,300 --> 00:17:02,930
And so, relational databases could
be a profession all by itself.

302
00:17:02,930 --> 00:17:05,020
Just knowing how to do
databases is impressive.

303
00:17:05,020 --> 00:17:07,000
Doing database design is impressive.

304
00:17:07,000 --> 00:17:09,870
And I hope this has gotten you to
the point where you can somewhat

305
00:17:09,870 --> 00:17:13,346
understand what's going on, and
then, learn the rest of your life.

306
00:17:13,346 --> 00:17:14,873
Okay?

307
00:17:14,873 --> 00:17:15,413
See you.