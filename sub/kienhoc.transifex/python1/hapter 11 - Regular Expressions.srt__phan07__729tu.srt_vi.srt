565
00:26:47,960 --> 00:26:52,640
quangdutran Thao reviewed
Lấy phần đó ra 
và đặt nó ở đây.

566
00:26:52,640 --> 00:26:56,720
Có một cách còn hay hơn mà

567
00:26:56,720 --> 00:27:04,190
chắc các bạn đã đoán ra được.

568
00:27:04,190 --> 00:27:06,709
Đó là chọn ký tự đầu tiên

569
00:27:06,709 --> 00:27:08,250
nằm đầu dòng là

570
00:27:08,250 --> 00:27:17,190
"From" với một khoảng trắng,
theo sau là số ký tự bất kì

571
00:27:17,190 --> 00:27:18,870
rồi đến dấu @.

572
00:27:18,870 --> 00:27:20,420
Dấu @ là ký tự thực.

573
00:27:20,420 --> 00:27:25,070
Sau đó bắt đầu tách ra
số ký tự không trắng

574
00:27:25,070 --> 00:27:27,350
bất kì.

575
00:27:27,350 --> 00:27:32,420
Đây giống như 8-9
dòng code Python

576
00:27:32,420 --> 00:27:35,650
được gộp lại trong một dòng.

577
00:27:35,650 --> 00:27:38,800

578
00:27:38,800 --> 00:27:41,470
Vậy là bắt đầu từ đầu dòng,

579
00:27:41,470 --> 00:27:44,210
tìm chuỗi ký tự "From" 
kèm một khoảng trắng.

580
00:27:44,210 --> 00:27:49,040
Bỏ qua một loạt ký tự
và tìm dấu @.

581
00:27:49,040 --> 00:27:52,350
Bỏ qua các ký tự đó đến khi tìm được @,

582
00:27:52,350 --> 00:27:55,590
rồi bắt đầu tách ký tự.

583
00:27:55,590 --> 00:27:58,230
Lấy những ký tự nào 
không phải là khoảng trắng.

584
00:27:58,230 --> 00:28:02,495
Cái này biểu thị một ký tự

585
00:28:02,495 --> 00:28:03,300
không trắng.

586
00:28:03,300 --> 00:28:05,780
Nhưng nếu thêm hậu tố
là một dấu sao,

587
00:28:05,780 --> 00:28:10,570
thì nó trở thành một loạt
ký tự không trắng.

588
00:28:10,570 --> 00:28:15,340
Sau đó thì dừng tách.

589
00:28:15,340 --> 00:28:20,660
Tìm chữ "From" có khoảng trắng
theo sau -- tốt.

590
00:28:20,660 --> 00:28:22,280
Đó là phần đầu tiên.

591
00:28:22,280 --> 00:28:26,140
Giờ bỏ qua cho tới khi thấy @.

592
00:28:26,140 --> 00:28:28,060
Bắt đầu tách chữ.

593
00:28:28,060 --> 00:28:30,870
Tiếp tục với các
ký tự không trắng

594
00:28:30,870 --> 00:28:33,210
cho tới khi thấy
khoảng trắng đầu tiên

595
00:28:33,210 --> 00:28:34,290
rồi kết thúc tách chữ.

596
00:28:34,290 --> 00:28:36,620
Kết quả là ta có
dữ liệu như nhau.

597
00:28:36,620 --> 00:28:40,530
Nhưng có thêm phần này, ta

598
00:28:40,530 --> 00:28:43,010
có thể thu hẹp 
phạm vi tìm kiếm hơn nhiều.

599
00:28:43,010 --> 00:28:46,330
Và nếu ta có 
dữ liệu lung tung như kiểu

600
00:28:46,330 --> 00:28:52,100
meet @ Joe's (hẹn gặp ở nhà Joe),

601
00:28:52,100 --> 00:28:53,040
ta không muốn dữ liệu đó.

602
00:28:53,040 --> 00:28:54,040
Như thế không phù hợp.

603
00:28:54,040 --> 00:28:56,180
Ta muốn trường hợp
như vậy trả kết quả False.

604
00:28:56,180 --> 00:28:58,330
Cách viết này cho phép ta

605
00:28:58,330 --> 00:28:59,979
tìm kiếm và lấy dữ liệu thật chuẩn.

606
00:28:59,979 --> 00:29:01,270
Đây mới chỉ là bắt đầu.

607
00:29:01,270 --> 00:29:03,050
Công cụ này thực sự rất hữu hiệu.

608
00:29:03,050 --> 00:29:05,620
Chương trình cuối cùng

609
00:29:05,620 --> 00:29:08,830
tôi muốn chỉ cho các bạn

610
00:29:08,830 --> 00:29:11,860
tương tự với một chương trình
ta đã từng làm.

611
00:29:11,860 --> 00:29:14,550
Nhưng giờ ta sẽ dùng 
biểu thức chính quy để làm.

612
00:29:14,550 --> 00:29:16,110
Các bạn có nhớ ta đã từng

613
00:29:16,110 --> 00:29:17,985
làm chương trình tính khả năng email là spam.

614
00:29:17,985 --> 00:29:23,330
Ta tìm kiếm các dòng,
lấy ra những con số này

615
00:29:23,330 --> 00:29:26,390
rồi tính toán số trung bình,
lớn nhất, v.v.

616
00:29:26,390 --> 00:29:30,050
Ở đây ta import
thư viện biểu thức chính quy.

617
00:29:30,050 --> 00:29:31,289
Ta mở file ra.

618
00:29:31,289 --> 00:29:32,830
Ta sẽ làm bằng cách nối

619
00:29:32,830 --> 00:29:36,340
các số vào một list

620
00:29:36,340 --> 00:29:39,190
thay vì dùng
vòng lặp tính toán

621
00:29:39,190 --> 00:29:40,330
Lọc dữ liệu bằng strip.

622
00:29:40,330 --> 00:29:42,170
Bây giờ là điểm mấu chốt này.

623
00:29:42,170 --> 00:29:44,240
Ta dùng một biểu thức chính quy

624
00:29:44,240 --> 00:29:47,750
yêu cầu tìm 
ký tự đầu tiên

625
00:29:47,750 --> 00:29:50,900
là chữ X, theo sau là dấu gạch,
và cả đống này nữa.

626
00:29:50,900 --> 00:29:54,730
Tất cả phải khớp y hệt 
bao gồm dấu hai chấm phía sau.

627
00:29:54,730 --> 00:29:56,820
Sau đó là khoảng trắng.

628
00:29:56,820 --> 00:29:59,030
Rồi bắt đầu tách dữ liệu.

629
00:29:59,030 --> 00:30:03,510
Tìm kiếm những chữ số
từ 0 đến 9 hoặc dấu chấm,

630
00:30:03,510 --> 00:30:08,686
xuất hiện 1 hoặc nhiều lần.

631
00:30:08,686 --> 00:30:09,810
Rồi ta kết thúc việc tách.

632
00:30:09,810 --> 00:30:12,342
Dấu ngoặc cho biết cần lấy ra cái gì.

633
00:30:12,342 --> 00:30:13,800
Có nghĩa là

634
00:30:13,800 --> 00:30:16,860
ta chỉ lôi ra các chữ số

635
00:30:16,860 --> 00:30:19,610
và các dấu chấm, cho tới khi ta gặp

636
00:30:19,610 --> 00:30:22,440
ký tự không phải số
hoặc dấu chấm.

637
00:30:22,440 --> 00:30:26,130
Đến lúc đó là xong, OK?

638
00:30:26,130 --> 00:30:29,260
Ta sẽ nhận được một list

639
00:30:29,260 --> 00:30:29,904
gồm các con số đó.

640
00:30:29,904 --> 00:30:31,320
Một điều cần lưu ý là

641
00:30:31,320 --> 00:30:34,640
đôi khi biểu thức sẽ không khớp.

642
00:30:34,640 --> 00:30:37,120
Vì ta đang tìm trong
tất cả các dòng

643
00:30:37,120 --> 00:30:38,680
chứ không chỉ riêng
những dòng bắt đầu với chữ X.

644
00:30:38,680 --> 00:30:40,540
Chúng ta đang tìm trong
tất cả các dòng.

645
00:30:40,540 --> 00:30:44,270
Ta cần biết khi nào
thì không có kết quả trùng.

646
00:30:44,270 --> 00:30:47,950
Trong trường hợp đó, số phần tử

647
00:30:47,950 --> 00:30:51,280
trong list trả về sẽ là 0,

648
00:30:51,280 --> 00:30:52,570
lúc đó ta sẽ dùng continue.

649
00:30:52,570 --> 00:30:55,320
Đây giống như trò
mò kim

650
00:30:55,320 --> 00:30:57,010
đáy bể.

651
00:30:57,010 --> 00:31:00,690
Nhưng khi tìm được rồi,

652
00:31:00,690 --> 00:31:04,560
con số mà ta muốn

653
00:31:04,560 --> 00:31:08,340
sẽ nằm trong vị trí [0] của list.

654
00:31:08,340 --> 00:31:09,680
Ta chuyển nó thành dạng số thực.

655
00:31:09,680 --> 00:31:10,550
Thêm nó vào list.

656
00:31:10,550 --> 00:31:12,110
Khi vòng lặp kết thúc

657
00:31:12,110 --> 00:31:14,900
ta in ra con số lớn nhất.

658
00:31:14,900 --> 00:31:17,150
Vậy ở đây ta mã hóa khá nhiều thứ

