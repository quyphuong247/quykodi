1
00:00:08,629 --> 00:00:10,630
https://youtu.be/hItjOIGkHG8
So welcome to our chapter on objects.

2
00:00:10,630 --> 00:00:12,879
Now this chapter doesn't
actually exist in the book.

3
00:00:12,879 --> 00:00:15,546
At least not in the current
version of the book.

4
00:00:15,546 --> 00:00:18,798
But I thought it was a good
time as our skill level and

5
00:00:18,798 --> 00:00:23,415
the complexity of the programs that
we're writing starts to increase,

6
00:00:23,415 --> 00:00:26,461
to talk about object oriented programming.

7
00:00:26,461 --> 00:00:30,692
The key is we're not going to spend a lot
of time writing a bunch of objects, but

8
00:00:30,692 --> 00:00:32,890
we're going to use a bunch of objects.

9
00:00:32,890 --> 00:00:35,450
And frankly,
we've been using objects all along.

10
00:00:35,450 --> 00:00:37,950
This is not so
much about a new code technique.

11
00:00:37,950 --> 00:00:42,275
It's just to try to give you a little
explanation as to what has been going on

12
00:00:42,275 --> 00:00:43,796
all along for this class.

13
00:00:43,796 --> 00:00:47,674
When I say things like constructor, or
this is how you make an empty dictionary,

14
00:00:47,674 --> 00:00:50,580
I want you to have a better
understanding of that.

15
00:00:50,580 --> 00:00:54,298
So, suspend disbelief and I'm not really
trying to teach you at this moment a skill

16
00:00:54,298 --> 00:00:57,021
so you could become an object
oriented programming wizard.

17
00:00:57,021 --> 00:01:00,430
But I want you to get to the point
where I can use a series of terms

18
00:01:00,430 --> 00:01:03,210
in the remainder of this class and
not have you get confused.

19
00:01:04,620 --> 00:01:08,260
So we have been seeing object
oriented programming all along.

20
00:01:08,260 --> 00:01:11,160
So here is the Python documentation for

21
00:01:11,160 --> 00:01:15,016
lists and it's a data type,
and it talks about methods.

22
00:01:15,016 --> 00:01:16,910
We've been talking about
methods all along.

23
00:01:16,910 --> 00:01:18,870
I've been using the word methods.

24
00:01:18,870 --> 00:01:23,490
Methods are like functions
that are part of an object, okay?

25
00:01:23,820 --> 00:01:29,080
And so we've been using this all along and
I say we just construct an empty dictionary,

26
00:01:29,080 --> 00:01:33,030
the word "construct" is a loaded
term that has to do with

27
00:01:33,030 --> 00:01:35,900
create a new instance
of a particular object.

28
00:01:35,900 --> 00:01:36,820
So we've been using this.

29
00:01:36,820 --> 00:01:41,702
And as we move into databases we see
that as we read the documentation they

30
00:01:41,702 --> 00:01:43,712
start using the word object.

31
00:01:43,712 --> 00:01:45,212
They use the word method.

32
00:01:45,212 --> 00:01:48,528
And so all these things are terms
that I want you to be at

33
00:01:48,528 --> 00:01:53,420
least familiar with the terms, not
necessarily a wizard at writing objects.

34
00:01:53,420 --> 00:01:56,627
Because you don't always want to write objects,
just like with functions,

35
00:01:56,627 --> 00:01:59,740
you don't always want to write functions,
but we use them a lot.

36
00:01:59,740 --> 00:02:05,463
So, even functions and objects, we use
them far more than we actually build them.

37
00:02:05,463 --> 00:02:09,254
Okay, so let's take a look at programs
that we've talked about before.

38
00:02:09,254 --> 00:02:13,046
Here is my favorite elevator
floor number converter.

39
00:02:13,046 --> 00:02:16,877
And this program is sort of
my simple favorite program,

40
00:02:16,877 --> 00:02:20,879
because it has input processing,
computation, and output.

41
00:02:20,879 --> 00:02:25,019
And right now we think of this, and if you
think of all the programs that you've written

42
00:02:25,019 --> 00:02:27,250
so far, they're just variations on this.

43
00:02:27,250 --> 00:02:30,550
They start somewhere, and they do some
stuff, maybe have some loops in them,

44
00:02:30,550 --> 00:02:32,300
and then they finish, okay?

45
00:02:32,300 --> 00:02:35,030
That's a very sort of classic program.

46
00:02:35,030 --> 00:02:36,470
It's a monolithic program.

47
00:02:36,470 --> 00:02:40,420
We might write a function, but it's
only one way to think about a program.

48
00:02:41,840 --> 00:02:46,537
As we build more and more sophisticated
programs we start building more and

49
00:02:46,537 --> 00:02:49,004
more sophisticated data structures.

50
00:02:49,004 --> 00:02:52,759
And so in this little example
we are going to make a list and

51
00:02:52,759 --> 00:02:55,900
have that list be a list of dictionaries.

52
00:02:55,900 --> 00:03:00,920
And so, we say let's construct
a list that's object oriented-isms.

53
00:03:00,920 --> 00:03:03,190
Let's construct a dictionary.

54
00:03:03,190 --> 00:03:06,240
Let's store some keys in the dictionary,
and

55
00:03:06,240 --> 00:03:08,800
then let's append to the list of movies.

56
00:03:08,800 --> 00:03:12,370
So movies.append, and
the thing we're adding is a dictionary.

57
00:03:12,370 --> 00:03:15,830
So there's a list that has dictionaries.

58
00:03:15,830 --> 00:03:17,020
And then we're going to do this again.

59
00:03:17,020 --> 00:03:20,500
Make a new dictionary and
movies and add the second movie.

60
00:03:20,500 --> 00:03:23,410
And so we'll end up with two dictionaries,
so we're going to put the data structure.

61
00:03:23,410 --> 00:03:24,730
This is a data structure.

62
00:03:24,730 --> 00:03:29,235
And when we were doing sorting,
we would make a list of tuples, and

63
00:03:29,235 --> 00:03:31,253
a dictionary becomes tuple.

64
00:03:31,253 --> 00:03:38,046
So, coming up with shapes of data is
part of solving programming problems.

65
00:03:38,046 --> 00:03:39,400
And so we've been doing this.

66
00:03:39,400 --> 00:03:41,910
Now the thing about this,
if we start looking at this,

67
00:03:41,910 --> 00:03:45,170
we're going to realize that we
have decided that this data,

68
00:03:45,170 --> 00:03:48,130
each dictionary in this list is
going to be shaped the same way.

69
00:03:48,130 --> 00:03:51,020
It's going to have a key, a director,
title, release, running, rating.

70
00:03:52,040 --> 00:03:55,760
And frankly, if we misspelled this,
missing the i there,

71
00:03:55,760 --> 00:03:59,850
that would mean that this was
somehow kind of a broken one.

72
00:03:59,850 --> 00:04:04,310
Now, there's no way for us to say exactly
what these keys are supposed to be.

73
00:04:04,310 --> 00:04:08,020
But in a way,
this is like an object already,

74
00:04:08,020 --> 00:04:11,860
in that there is a two things,
thing one and thing two,

75
00:04:11,860 --> 00:04:15,460
and they're very similar in the terms
of the kind of data that they contain.

76
00:04:15,460 --> 00:04:17,800
And they sort of have a shape.

77
00:04:17,800 --> 00:04:20,920
There's a shape,
it's not enforced in any way, but

78
00:04:20,920 --> 00:04:24,510
by convention, we just do the same
five things in each one of these.

79
00:04:24,510 --> 00:04:26,550
There could be literally
hundreds of these.

80
00:04:26,550 --> 00:04:31,000
So we can write code that basically
takes advantage of the consistency

81
00:04:31,000 --> 00:04:34,040
of the shape of these little dictionaries.

82
00:04:34,040 --> 00:04:37,040
So basically, to recall,
we've got a list and

83
00:04:37,040 --> 00:04:40,020
then we have a dictionary with keys,
a dictionary with keys.

84
00:04:40,020 --> 00:04:41,110
So that's what we're dealing with.

85
00:04:41,110 --> 00:04:45,690
So we can, in effect, loop through
the list and go through them so

86
00:04:45,690 --> 00:04:49,840
item becomes this guy right here,
and we know there's certain keys and

87
00:04:49,840 --> 00:04:54,600
because we are shaping these dictionaries
the same and using the same keys,

88
00:04:54,600 --> 00:04:59,150
then what we can do is we can basically
loop through all the keys that we expect

89
00:04:59,150 --> 00:05:00,040
to be there.

90
00:05:00,040 --> 00:05:01,730
So, we're saying,
I'm expecting to be this.

91
00:05:01,730 --> 00:05:06,191
So, we're going to loop through each one of
these and we're going to go through each of

92
00:05:06,191 --> 00:05:09,980
the keys and then grab the values.
So print key and item sub key, okay?.

93
00:05:09,980 --> 00:05:10,510
Okay?

94
00:05:10,510 --> 00:05:15,630
And so this is just away for
us to iterate, we are keeping track

95
00:05:15,630 --> 00:05:20,580
of in effect the schema, the data model
as it were, of these little dictionaries.

96
00:05:20,580 --> 00:05:24,200
And so what we're going to do when we
start talking about object orientation,

97
00:05:24,200 --> 00:05:30,460
is we are going to find ways to create
structures that look like this.

98
00:05:30,460 --> 00:05:35,770
But we have a much better way of sort of
enforcing the naming conventions, and

99
00:05:35,770 --> 00:05:40,610
building a contract as to what kind of data
is inside of a movie, etc., etc., etc.

100
00:05:40,610 --> 00:05:45,770
So that's kind of bringing us into
object oriented programming from

101
00:05:45,770 --> 00:05:48,130
kind of how we would use it
if we didn't have objects.