1
00:00:08,552 --> 00:00:12,200
Thao reviewed
Chúng ta đã nói nhiều về thuật ngữ
cũng như khái niệm rồi.

2
00:00:12,200 --> 00:00:15,210
Bây giờ sẽ nói thêm một khái niệm nữa
là hết.

3
00:00:15,210 --> 00:00:16,980
Đó là khái niệm về kế thừa (inheritance).

4
00:00:16,980 --> 00:00:19,620
Đây là một khái niệm rất quan trọng
trong lập trình hướng đối tượng.

5
00:00:20,700 --> 00:00:24,600
Tôi muốn giải thích cho các bạn
bản chất của những gì ta làm.

6
00:00:25,620 --> 00:00:27,800
Cho tới giờ,

7
00:00:27,800 --> 00:00:31,080
ta mới chỉ đơn giản tạo ra một lớp mới.

8
00:00:32,280 --> 00:00:34,560
Nhưng với khái niệm kế thừa,

9
00:00:34,560 --> 00:00:35,990
chúng ta tạo ra một lớp

10
00:00:35,990 --> 00:00:39,140
bằng cách mượn một đống thứ từ một lớp khác.

11
00:00:39,140 --> 00:00:41,060
Ta có thể cho thêm vài thứ khác nữa.

12
00:00:41,060 --> 00:00:45,250
Nói theo cách khác là mở rộng một lớp có sẵn.

13
00:00:45,250 --> 00:00:48,350
Ta có một lớp a, rồi lớp b
lả bản mở rộng của lớp a.

14
00:00:48,350 --> 00:00:53,030
Đây là cách viết một lần để
dùng nhiều lần, có thể coi như

15
00:00:53,030 --> 00:00:55,610
tạo ra những phiên bản chuyên biệt hơn.

16
00:00:55,610 --> 00:00:56,870
OK?

17
00:00:56,870 --> 00:01:00,540
Lớp mới được coi như lớp con,
lớp cũ là lớp cha.

18
00:01:00,540 --> 00:01:05,460
Lớp mới có thể có các tính năng mới
hoặc thậm chí ghi đè lên tính năng lớp cũ

19
00:01:05,460 --> 00:01:06,340
và thêm một vài chức năng khác.

20
00:01:06,340 --> 00:01:08,280
Có thể thêm, ghi đè lên, thay đổi,

21
00:01:08,280 --> 00:01:11,670
nhưng hầu hết là để sao chép những gì
cần dùng từ lớp cha sang lớp con.

22
00:01:12,860 --> 00:01:13,435
Được chứ?

23
00:01:13,435 --> 00:01:15,200
Một cách gọi khác là lớp phụ (subclass).

24
00:01:15,200 --> 00:01:17,590
Lớp phụ nghĩa là lớp con,

25
00:01:17,590 --> 00:01:19,300
còn khi nói lớp tức là lớp cha.

26
00:01:19,300 --> 00:01:21,500
Giờ chúng ta sẽ tạo lớp PartyAnimal,

27
00:01:21,500 --> 00:01:24,770
chính là lớp PartyAnimal
mà chúng ta vẫn dùng.

28
00:01:24,770 --> 00:01:27,530
Ta tạo ra lớp đó, sao chép tên vào.

29
00:01:27,530 --> 00:01:31,980
Rồi sau đó, ta tạo thêm một lớp mới.

30
00:01:31,980 --> 00:01:35,380
Lớp mới ta tạo ra tên là FootballFan.

31
00:01:35,380 --> 00:01:37,260
Nó được mở rộng từ PartyAnimal,

32
00:01:37,260 --> 00:01:43,320
tức là nó kế thừa mọi thứ từ PartyAnimal
và thêm một số thứ khác.

33
00:01:43,320 --> 00:01:48,480
Điểm khác là FootballFan có thêm biến points.

34
00:01:48,480 --> 00:01:51,590
Vậy FootballFan có các biến x, name và points.

35
00:01:51,590 --> 00:01:56,360
Các biến trên này được tự động chuyển vào lớp mới.

36
00:01:56,360 --> 00:01:59,870
Vì nó kế thừa hết từ PartyAnimal.

37
00:01:59,870 --> 00:02:05,190
Hàm khởi tạo và các thứ khác
cũng được chuyển sang luôn.

38
00:02:05,190 --> 00:02:08,250
Tiếp theo ta thêm một
phương thức mới là touchdown,

39
00:02:08,250 --> 00:02:12,110
nó cộng thêm 7 vào points
rồi gọi phương thức party.

40
00:02:13,220 --> 00:02:18,900
Gọi phương thức self.party của lớp này,
đó là code được sao chép từ lớp cha

41
00:02:18,900 --> 00:02:22,650
nhưng không phải là lớp cha,
sau đó in ra points.

42
00:02:22,650 --> 00:02:26,680
Vậy đó là cách mở rộng lớp,
đây là một biến thực thể mới,

43
00:02:26,680 --> 00:02:31,130
đây là một phương thức mới trong
lớp FootballFan

44
00:02:31,130 --> 00:02:38,170
Ở đoạn code này,
ta tạo ra một PartyAnimal.

45
00:02:38,170 --> 00:02:43,010
Nó sẽ tạo một biến mới với
hàm khởi tạo __init__,

46
00:02:43,010 --> 00:02:46,280
đưa vào giá trị x và Sally trong biến name.

47
00:02:46,280 --> 00:02:49,050
Bây giờ ta gọi phương thức party,

48
00:02:49,050 --> 00:02:52,280
x sẽ thành 1 trong thực thể s này.

49
00:02:52,280 --> 00:02:55,850
Ở đoạn code sau ta viết j = FootballFan.

50
00:02:55,850 --> 00:03:00,360
Qua đó ta tạo một đối tượng khác,
đối tượng j chứa x

51
00:03:00,360 --> 00:03:05,870
và name lấy từ lớp trên,
ngoài ra nó còn có biến points.

52
00:03:05,870 --> 00:03:07,730
Nó cũng có các phương thức.

53
00:03:07,730 --> 00:03:11,330
Giờ nếu ta gọi j.party,

54
00:03:12,380 --> 00:03:17,170
chỗ code này sẽ chạy và
đổi x thành 1. Đúng không nào?

55
00:03:17,170 --> 00:03:19,510
name được gán là Jim.

56
00:03:19,510 --> 00:03:23,810
Nếu ta gọi j.touchdown
chỗ code này sẽ chạy.

57
00:03:23,810 --> 00:03:26,240
Nó sẽ cộng thêm 7 vào points.

58
00:03:26,240 --> 00:03:28,480
Sau đó nó sẽ gọi tiếp phương thức party,

59
00:03:28,480 --> 00:03:30,900
biến x thành 2

60
00:03:30,900 --> 00:03:33,850
rồi in các thứ ra màn hình là xong.

61
00:03:33,850 --> 00:03:39,550
Vậy đó là bản chất của mở rộng hay là kế thừa.

62
00:03:39,550 --> 00:03:44,710
Ta tạo ra lớp FootballFan thừa hưởng
mọi thứ từ lớp PartyAnimal.

63
00:03:44,710 --> 00:03:49,180
Rồi ta có thể tạo các thực thể của PartyAnimal
và các thực thể của FootballFan.

64
00:03:49,180 --> 00:03:53,710
Thực thể của FootballFan
có mọi thứ từ PartyAnimal.

65
00:03:53,710 --> 00:03:55,870
cộng thêm một ít mới nữa.

66
00:03:55,870 --> 00:03:57,240
Vậy là ta đã học khá nhiều thứ.

67
00:03:57,240 --> 00:03:59,290
Các bạn đã biết hết các từ này rồi đúng không?

68
00:03:59,290 --> 00:04:02,420
Lớp, phương thức, đối tượng,
thực thể, hàm khởi tạo

69
00:04:02,420 --> 00:04:06,710
và kế thừa là những khái niệm
bạn đã hiểu cơ bản rồi.

70
00:04:06,710 --> 00:04:08,580
Tôi không bắt các bạn lập trình với chúng đâu.

71
00:04:09,960 --> 00:04:12,780
Đó là tóm tắt cơ bản về lập trình hướng đối tượng.

72
00:04:12,780 --> 00:04:16,231
Mục tiêu không phải biến
bạn thành nhà khoa học máy tính,

73
00:04:16,231 --> 00:04:20,120
tôi thậm chí còn không cần các bạn
phải viết được đối tượng.

74
00:04:20,120 --> 00:04:24,262
Tôi chỉ muốn từ nay có thể sử dụng
các thuật ngữ như hàm khởi tạo, phương thức,

75
00:04:24,262 --> 00:04:28,466
thực thể, đối tượng mà các bạn vẫn hiểu được.

76
00:04:28,466 --> 00:04:32,608
Vì khi ta tiếp tục học những thứ phức tạp hơn,
tôi cần dùng các thuật ngữ

77
00:04:32,608 --> 00:04:36,087
để giải thích thay vì bỏ qua bản chất thực tế.