377
00:17:24,730 --> 00:17:27,220
hanudungnguyen Thao reviewed
ta có thể hình dung dấu này đẩy rộng mức tìm kiếm ra.


378
00:17:27,220 --> 00:17:31,230
Ta nhìn vào dòng này có "From: Using the : character",

379
00:17:31,230 --> 00:17:36,520
chương trình sẽ tìm cách mở rộng kết quả.

380
00:17:36,520 --> 00:17:41,569
Chắc chắn chương trình phải bắt đầu từ chữ F,
rồi đi tìm 1 dấu hai chấm

381
00:17:41,569 --> 00:17:42,610
với số ký tự bất kì ở giữa.

382
00:17:42,610 --> 00:17:44,235
Nhưng nó sẽ tìm chuỗi lớn nhất

383
00:17:44,235 --> 00:17:46,960
trùng khớp với yêu cầu.

384
00:17:46,960 --> 00:17:50,489
Nên nó bỏ dấu 2 chấm này và đi tiếp đến dấu 2 chấm kia.

385
00:17:50,489 --> 00:17:52,030
Ta có được kết quả ở đây

386
00:17:52,030 --> 00:17:55,620
Chương trình sẽ bỏ qua phần này vì nó muốn tìm chuỗi lớn nhất 

387
00:17:55,620 --> 00:17:57,220
có thể

388
00:17:57,220 --> 00:17:59,520
Đó là chức năng của dấu +

389
00:17:59,520 --> 00:18:02,625
Chấm cộng ".+" đẩy rộng mức tìm kiếm.

390
00:18:02,625 --> 00:18:06,720
Ở đây có dấu 2 chấm rồi, nhưng đi tiếp 
thì còn dấu 2 chấm khác không?

391
00:18:06,720 --> 00:18:08,130
Nó đẩy rộng ra.

392
00:18:08,130 --> 00:18:10,980
OK. Đó là kiểu tìm kiếm tham lam.

393
00:18:10,980 --> 00:18:15,510
Cũng như thông thường, 
khi tham ta có thể gặp một số vấn đề.

394
00:18:15,510 --> 00:18:18,890
Dấu sao và dấu cộng đều mang tính tham lam

395
00:18:18,890 --> 00:18:21,600
vì chúng biểu thị 0 ký tự hoặc nhiều hơn,
hay 1 hoặc nhiều hơn.

396
00:18:21,600 --> 00:18:23,920
Chúng có thể đẩy rộng mức tìm ra.

397
00:18:23,920 --> 00:18:28,044
Ta có thể bỏ tính năng ấy đi.

398
00:18:28,044 --> 00:18:29,210
Đây chỉ là ngôn ngữ lập trình thôi.

399
00:18:29,210 --> 00:18:31,790
Ta có thể thay đổi nó, đúng không?

400
00:18:31,790 --> 00:18:35,780
Ta thêm dấu hỏi chấm phía sau.

401
00:18:35,780 --> 00:18:38,460
Giờ ta có một chuỗi 3 ký tự.

402
00:18:38,460 --> 00:18:43,400
Nếu ta viết .+? chương trình sẽ hiểu là
số ký tự nhiều hơn hoặc

403
00:18:43,400 --> 00:18:47,010
 bằng một, nhưng thay vì

404
00:18:47,010 --> 00:18:50,130
tham lam đẩy ra xa nhất có thể,

405
00:18:50,130 --> 00:18:52,760
ta sẽ dừng lại tại kết quả đầu tiên.

406
00:18:52,760 --> 00:18:57,490
Dừng ở kết quả đầu tiên.

407
00:18:57,490 --> 00:18:59,540
Đó, ở kết quả đầu tiên.

408
00:18:59,540 --> 00:19:01,820
Viết cái này lúc nào cũng mất thời gian.

409
00:19:01,820 --> 00:19:04,010
Dừng lại ở cái đầu tiên, OK?

410
00:19:04,010 --> 00:19:04,620
Thế là xong.

411
00:19:04,620 --> 00:19:05,640
Đừng tham lam

412
00:19:05,640 --> 00:19:08,290
Đừng cố gắng trả về chuỗi dài nhất có thể.

413
00:19:08,290 --> 00:19:11,140
Hãy chọn kết quả trùng khớp mà nhỏ hơn.

414
00:19:11,140 --> 00:19:14,400
Ta vẫn phải tìm chữ F và một dấu hai chấm.

415
00:19:14,400 --> 00:19:16,620
Nhưng khi tìm thấy dấu hai chấm 
đầu tiên thì dừng ở đó.

416
00:19:16,620 --> 00:19:18,640
Với cái này, ta sẽ được

417
00:19:18,640 --> 00:19:20,890
kết quả là "From:"

418
00:19:20,890 --> 00:19:22,720
thay vì lấy hết cả chuỗi.

419
00:19:22,720 --> 00:19:25,950
Tìm kiếm tham lam trả kết quả dài nhất có thể.

420
00:19:25,950 --> 00:19:28,220
Còn tìm kiếm không tham lam chỉ lấy đến

421
00:19:28,220 --> 00:19:32,810
chuỗi đầu tiên thỏa mãn tiêu chí của ta.

422
00:19:32,810 --> 00:19:34,880
Vậy .+? là một chuỗi 3 ký tự lập trình 

423
00:19:34,880 --> 00:19:38,890
có nghĩa bất cứ ký tự nào 1 hoặc 
nhiều lần, không tham lam hơn.

424
00:19:38,890 --> 00:19:48,470

425
00:19:48,470 --> 00:19:51,130
Ví dụ, ta thử giải quyết bài toán lấy địa chỉ

426
00:19:51,130 --> 00:19:57,290
email ra khỏi một chuỗi

427
00:19:57,290 --> 00:20:00,860
Ta có thể dùng ký tự "không trắng" \S này.

428
00:20:00,860 --> 00:20:04,220
@ là một ký tự thường.

429
00:20:04,220 --> 00:20:07,200
Viết thế này tức là ta muốn ít nhất

430
00:20:07,200 --> 00:20:09,450
1 ký tự không phải khoảng trắng trước @ và ít nhất

431
00:20:09,450 --> 00:20:11,470
một ký tự không phải khoảng trắng ngay sau @

432
00:20:11,470 --> 00:20:14,070
Biểu thức chính quy sẽ

433
00:20:14,070 --> 00:20:19,434
tìm ký tự @ và mở rộng tìm kiếm 1 cách tham lam,

434
00:20:19,434 --> 00:20:21,100
miễn là các ký tự tìm thấy không phải khoảng trắng.

435
00:20:21,100 --> 00:20:24,130
Đẩy, đẩy, đẩy, ồ, dừng lại.

436
00:20:24,130 --> 00:20:26,590
Lại đẩy, đẩy, đẩy, dừng.

437
00:20:26,590 --> 00:20:31,100
Ta được một số ký tự không trắng, dấu @,

438
00:20:31,100 --> 00:20:33,100
rồi lại đến một số ký tự không trắng.

439
00:20:33,100 --> 00:20:37,020
Đây là một ví dụ sử dụng tìm kiếm tham lam.

440
00:20:37,020 --> 00:20:38,620
Đó là cách nó hoạt động.

441
00:20:38,620 --> 00:20:41,720
Ta lấy được thông tin về Stephen Marquard

442
00:20:41,720 --> 00:20:45,114
Nếu không tìm thấy thì ta sẽ được list rỗng.

443
00:20:45,114 --> 00:20:46,780
Ở đây kết quả là stephenmarquard@uct.ac.za

444
00:20:46,780 --> 00:20:53,080

445
00:20:53,080 --> 00:20:59,360
Ta cũng có thể tùy chỉnh đoạn thông tin được trích ra.

446
00:20:59,360 --> 00:21:02,570
Trong slide trước, ta đã trích ra

447
00:21:02,570 --> 00:21:06,090
bất cứ phần nào trùng khớp.

448
00:21:06,090 --> 00:21:09,330
Ta xét hết cả chuỗi và tìm ra

449
00:21:09,330 --> 00:21:09,940
bất cứ kết quả nào khớp.

450
00:21:09,940 --> 00:21:12,380
Chương trình tìm kiếm, đẩy chuỗi đó ra

451
00:21:12,380 --> 00:21:14,650
và trả về cho ta kết quả trùng khớp

452
00:21:14,650 --> 00:21:17,650
Nhưng ta cũng có thể chỉ trích ra

453
00:21:17,650 --> 00:21:20,460
một phần của kết quả tìm kiếm thôi.

454
00:21:20,460 --> 00:21:23,800
Ta sẽ thấy nó trong slide tiếp theo này.

455
00:21:23,800 --> 00:21:29,630
Cũng giống như trước, ta tìm ký tự @

456
00:21:29,630 --> 00:21:32,080
với 2 bên là các ký tự không trắng kéo dài

457
00:21:32,080 --> 00:21:33,910
hết mức có thể.

458
00:21:33,910 --> 00:21:38,910
Ở đây, ta thêm vào dấu mũ, From, dấu cách.

459
00:21:38,910 --> 00:21:42,940
Vậy ký tự đầu tiên là

460
00:21:42,940 --> 00:21:44,559
một dấu mũ.

461
00:21:44,559 --> 00:21:45,850
Cụm đó phải có từ "From"

462
00:21:45,850 --> 00:21:47,720
và một dấu cách.

463
00:21:47,720 --> 00:21:50,600
Ngay lập tức, chương trình sẽ đi tìm.

464
00:21:50,600 --> 00:21:53,110
Nó sẽ tìm chuỗi các kí tự không trắng, theo sau là @,

465
00:21:53,110 --> 00:21:55,590
rồi đến một chuỗi 1 hoặc nhiều ký tự

466
00:21:55,590 --> 00:21:57,120
không trắng khác.

467
00:21:57,120 --> 00:21:59,700
Tiếp theo, nếu ta không đặt

468
00:21:59,700 --> 00:22:02,230
các dấu ngoặc đơn này vào, nó sẽ trùng khớp

469
00:22:02,230 --> 00:22:03,910
và ta được kết quả là cả đoạn này.

470
00:22:03,910 --> 00:22:05,916
Đến tận đây.

