471
00:22:05,916 --> 00:22:08,290
Thao Tran
Nhưng dấu ngoặc đơn này,

472
00:22:08,290 --> 00:22:12,460
một phần của ngôn ngữ
biểu thức chính quy,

473
00:22:12,460 --> 00:22:14,640
có nghĩa là tìm các kết quả
khớp với cả chuỗi này.

474
00:22:14,640 --> 00:22:17,190
Các dấu ngoặc không được tính 
trong chuỗi cần tìm.

475
00:22:17,190 --> 00:22:18,950
Tôi muốn khớp cả chuỗi này nhưng

476
00:22:18,950 --> 00:22:21,800
tôi chỉ muốn trích ra phần trong ngoặc.

477
00:22:21,800 --> 00:22:24,950
Vậy nó sẽ tìm kết quả khớp với cả biểu thức này.

478
00:22:24,950 --> 00:22:28,640
Nhưng chỉ lấy ra cho ta phần trong ngoặc.

479
00:22:28,640 --> 00:22:31,360
Với biểu thức này chương trình sẽ chỉ

480
00:22:31,360 --> 00:22:33,375
tìm dấu @ trong các dòng

481
00:22:33,375 --> 00:22:35,130
bắt đầu bằng From và dấu cách.

482
00:22:35,130 --> 00:22:38,240
Liền sau đó sẽ phải là

483
00:22:38,240 --> 00:22:41,811
một số bất kì ký tự không trắng,

484
00:22:41,811 --> 00:22:44,310
tiếp theo là dấu @, rồi đến một số ký tự không trắng khác.

485
00:22:44,310 --> 00:22:45,850
Nó sẽ dừng lại tại đó.

486
00:22:45,850 --> 00:22:48,980
Chỉ trích ra từ đây đến đây.

487
00:22:48,980 --> 00:22:50,580
Ta nhận được tên mail Stephen Marquard.

488
00:22:50,580 --> 00:22:54,970
Nhưng giới hạn tìm kiếm của cái này khá hẹp

489
00:22:54,970 --> 00:22:56,870
vì 4 ký tự đầu tiên

490
00:22:56,870 --> 00:22:58,010
phải là "From" và dấu cách.

491
00:22:58,010 --> 00:23:01,070
Và đó là cách vừa thu hẹp được phạm vi

492
00:23:01,070 --> 00:23:04,030
tìm kiếm, vừa chỉ tách ra một phần dữ liệu.

493
00:23:04,030 --> 00:23:08,410
Bạn có thể thêm các ký tự
này khắp nơi, OK?

494
00:23:08,410 --> 00:23:14,070
Và ta có thể so sánh các cách trích xuất dữ liệu

495
00:23:14,070 --> 00:23:15,570
khác nhau.

496
00:23:15,570 --> 00:23:19,750
Hãy nhìn vào cách ta đã
trích xuất tên miền email.

497
00:23:19,750 --> 00:23:23,200
Cách đây vài chương ta đã làm ví dụ này.

498
00:23:23,200 --> 00:23:27,040
Ta dùng data.find để tìm dấu @ đầu tiên

499
00:23:27,040 --> 00:23:28,870
ở vị trí 21.

500
00:23:28,870 --> 00:23:30,710
Vậy ký tự đầu tiên ở vị trí 21.

501
00:23:30,710 --> 00:23:34,340
Rồi ta tìm một dấu cách phía sau.

502
00:23:34,340 --> 00:23:35,840
Vậy là từ dấu @

503
00:23:35,840 --> 00:23:37,489
đến vị trí 31.

504
00:23:37,489 --> 00:23:39,280
Rồi ta lấy ra đoạn dữ liệu

505
00:23:39,280 --> 00:23:45,080
từ dấu @ tính đến nhưng
không bao gồm dấu cách.

506
00:23:45,080 --> 00:23:47,580
Và ta in ra biến host này.

507
00:23:47,580 --> 00:23:50,180
Ta lấy ra đoạn thông tin này

508
00:23:50,180 --> 00:23:53,890
và được kết quả là tên miền, được đấy chứ?

509
00:23:53,890 --> 00:23:55,445
Ta cũng đã thấy một cách làm khác.

510
00:23:55,445 --> 00:23:58,690
Các cách làm này đều OK hết.

511
00:23:58,690 --> 00:24:00,310
Cách nào cũng dùng tốt.

512
00:24:00,310 --> 00:24:02,830
Một cách khác ta từng làm
khi học về hàm split và list

513
00:24:02,830 --> 00:24:05,150
tôi gọi là cú split kép.

514
00:24:05,150 --> 00:24:08,580
Đầu tiên ta dùng split tách dòng

515
00:24:08,580 --> 00:24:11,900
đó ra.

516
00:24:11,900 --> 00:24:14,000
Đầu tiên là tách dòng.

517
00:24:14,000 --> 00:24:20,540
Tách theo các khoảng trắng. Phần tử thứ 2,

518
00:24:20,540 --> 00:24:26,910
tức vị trí words[1] là toàn bộ địa chỉ email.

519
00:24:26,910 --> 00:24:28,740
Và đây là cú split kép.

520
00:24:28,740 --> 00:24:33,190
Ta tách địa chỉ email này tại dấu @.

521
00:24:33,190 --> 00:24:37,010
Và ta nhận được một list
các phần của địa chỉ email,

522
00:24:37,010 --> 00:24:39,260
gồm tên email và tên miền.

523
00:24:39,260 --> 00:24:43,960
Rồi ta lấy ra phần tử ở vị trí 1.

524
00:24:43,960 --> 00:24:47,210
Đó chính là tên miền.
Vậy đây là cách tách thông tin

525
00:24:47,210 --> 00:24:49,750
bằng cú split kép.

526
00:24:49,750 --> 00:24:53,840
Với cách này ta vẫn chưa
lấy từ "From".

527
00:24:53,840 --> 00:24:57,180
Nhưng nhìn chung đó là cách split kép.

528
00:24:57,180 --> 00:24:59,570
Để làm thao tác này

529
00:24:59,570 --> 00:25:05,320
bằng biểu thức chính quy,

530
00:25:05,320 --> 00:25:11,540
ta sẽ tìm kiếm trong chuỗi ký tự.

531
00:25:11,540 --> 00:25:13,540
Ở đây ta dùng re.findall

532
00:25:13,540 --> 00:25:15,200
Và biểu thức chính quy này nghĩa là

533
00:25:15,200 --> 00:25:17,692
hãy tìm trong chuỗi một dấu @.

534
00:25:17,692 --> 00:25:20,960
Tìm tìm tìm, @ đây rồi.

535
00:25:20,960 --> 00:25:25,620
Xong rồi tách ra ở đây và ở đây.

536
00:25:25,620 --> 00:25:28,560
Chỗ này biểu thị

537
00:25:28,560 --> 00:25:30,941
một ký tự.

538
00:25:30,941 --> 00:25:31,940
Nó là một ký tự đơn.

539
00:25:31,940 --> 00:25:37,400
Tìm bất cứ ký tự không trắng nào,
có thể nhắc lại 0 hoặc nhiều lần.

540
00:25:37,400 --> 00:25:41,760
Nhắc lại, nó tìm dấu @.

541
00:25:41,760 --> 00:25:45,790
Tách ra ở đây và đây.

542
00:25:45,790 --> 00:25:48,010
Đây là một ký tự cần khớp.

543
00:25:48,010 --> 00:25:50,940
Ngoặc vuông là tập hợp
các ký tự có thể trùng khớp.

544
00:25:50,940 --> 00:25:52,990
Đây là một ký tự nào đó.

545
00:25:52,990 --> 00:25:58,235
Cái này nghĩa là không phải khoảng trắng.

546
00:25:58,235 --> 00:25:59,360
Chỗ này là ký tự

547
00:25:59,360 --> 00:26:01,130
khoảng trắng này.

548
00:26:01,130 --> 00:26:03,940
Tìm ký tự không phải khoảng trắng
lặp bao nhiêu lần tùy ý.

549
00:26:03,940 --> 00:26:05,800
Có lẽ bạn nên đổi nó
thành dấu cộng

550
00:26:05,800 --> 00:26:07,911
để đảm bảo được ít nhất 1 ký tự.

551
00:26:07,911 --> 00:26:09,910
Dùng dấu cộng ở đây sẽ tốt hơn.

552
00:26:09,910 --> 00:26:13,343

553
00:26:13,343 --> 00:26:14,926
Dấu cộng sẽ hợp lý hơn

554
00:26:14,926 --> 00:26:18,190
để tìm ra kết quả có ít nhất 1 ký tự không trắng

555
00:26:18,190 --> 00:26:20,805
phía sau dấu @.

556
00:26:20,805 --> 00:26:26,250

557
00:26:26,250 --> 00:26:30,840
Các dấu ngoặc này nghĩa là
bỏ qua dấu @.

558
00:26:30,840 --> 00:26:34,100
Chỉ cần lấy các ký tự không trắng

559
00:26:34,100 --> 00:26:36,310
sau @ thôi.

560
00:26:36,310 --> 00:26:38,550
Đó là phần tôi muốn lấy.

561
00:26:38,550 --> 00:26:41,880
Vậy chương trình sẽ tìm dấu @.

562
00:26:41,880 --> 00:26:43,280
Tuyệt, thấy rồi.

563
00:26:43,280 --> 00:26:44,870
Bắt đầu trích xuất.

564
00:26:44,870 --> 00:26:47,960
Tìm các ký tự không trắng và trích xuất.

