1
00:00:09,022 --> 00:00:11,710
dungpham12002 14.07.2016 Thao reviewed
Bây giờ ta sẽ nói về một thứ gọi là
'vòng đời đối tượng'.

2
00:00:11,710 --> 00:00:13,554
Thực ra tôi đã nói về nó
rất nhiều rồi.

3
00:00:13,554 --> 00:00:18,352
Mỗi khi tôi sử dụng từ 'khởi tạo'
là tôi đang nói về vòng đời đối tượng.

4
00:00:18,352 --> 00:00:20,716
Chúng ta sẽ chỉ đi 
sâu hơn một chút vào vấn đề

5
00:00:20,716 --> 00:00:24,999
để hiểu chính xác điều gì xảy ra
khi các đối tượng được khởi tạo.

6
00:00:24,999 --> 00:00:29,231
Bởi vì nó chính là thứ giúp ta nêu lên 
ý kiến khi ta xây dựng một đối tượng,

7
00:00:29,231 --> 00:00:32,713
hay khi ta xây dựng một lớp, chẳng hạn như,
'Khi đối tượng này được khởi tạo,

8
00:00:32,713 --> 00:00:33,917
tôi muốn làm điều này.'

9
00:00:33,917 --> 00:00:37,590
Vậy ta có thể tạo ra, hủy bỏ
hoặc làm việc với chúng.

10
00:00:37,590 --> 00:00:41,755
Và ta sẽ có những đoạn code đặc biệt,
gọi là phương thức,

11
00:00:41,755 --> 00:00:45,378
mà sẽ được gọi khi
một đối tượng được khởi tạo

12
00:00:45,378 --> 00:00:46,590
và khi nó biến mất.

13
00:00:46,590 --> 00:00:47,966
Chúng được gọi là hàm khởi tạo
và hàm hủy.

14
00:00:47,966 --> 00:00:52,498
Ta dùng hàm khởi tạo rất nhiều,
nhưng hàm hủy

15
00:00:52,498 --> 00:00:53,696
rất ít khi được sử dụng.

16
00:00:53,696 --> 00:00:55,229
Nhưng đằng nào chúng ta cũng sẽ in chúng ra.

17
00:00:55,229 --> 00:00:59,980
Vậy mục đích chính của hàm khởi tạo
là yêu cầu bạn có một số biến thực thể

18
00:00:59,980 --> 00:01:04,959
chẳng hạn như x bằng gì đó,
và gán cho chúng các giá trị ban đầu

19
00:01:04,959 --> 00:01:10,041
nên thực thể của đối tượng có thể
khá khác biệt ở thời điểm nó được tạo ra.

20
00:01:10,041 --> 00:01:12,328
Ở đây ta có lớp này, đúng không?

21
00:01:12,328 --> 00:01:16,802
Còn phần code ta có từ phần trước ở đây.

22
00:01:16,802 --> 00:01:19,084
Giờ chúng ta có thêm hai phương thức nữa -

23
00:01:19,084 --> 00:01:23,054
ta có __init__,

24
00:01:23,054 --> 00:01:25,590
và __del__.

25
00:01:25,590 --> 00:01:27,114
Đa số các phương thức

26
00:01:27,114 --> 00:01:30,760
có hai dấu gạch dưới ở hai bên được dùng cho

27
00:01:30,760 --> 00:01:34,755
một số đoạn code cụ thể, được chạy khi
một số thứ nhất định xảy ra trong chương trình.

28
00:01:34,755 --> 00:01:38,087
Vậy, __init__cho ta biết rằng

29
00:01:38,087 --> 00:01:42,280
khi hàm khởi tạo được gọi,
phần code này sẽ chạy.

30
00:01:42,280 --> 00:01:43,859
Nhưng khi đó ta không hủy nó đi.

31
00:01:43,859 --> 00:01:47,399
Khi ta hủy nó với lệnh delete hay __del__ thì

32
00:01:47,399 --> 00:01:48,273
ta có thể thấy điều này,

33
00:01:48,273 --> 00:01:51,721
nhưng lần duy nhất nó bị hủy
sẽ là ở cuối chương trình.

34
00:01:51,721 --> 00:01:56,883
Và khi biến này mất đi,
ta có thể thấy nó bị hủy.

35
00:01:56,883 --> 00:02:00,915
Vậy khi đặt các phương thức này vào đây,
ta đang khai báo rằng ta muốn chạy code

36
00:02:00,915 --> 00:02:04,244
tại thời điểm khởi tạo
và thời điểm hủy.

37
00:02:04,244 --> 00:02:05,966
Ta đang định nghĩa đối tượng,

38
00:02:05,966 --> 00:02:09,348
định nghĩa lớp để nói: 'Tôi muốn
những thứ này xảy ra',

39
00:02:09,348 --> 00:02:10,346
hay 'Tôi muốn được chứng kiến điều này'.

40
00:02:10,346 --> 00:02:15,906
Thực thi chương trình này
khá đơn giản.

41
00:02:15,906 --> 00:02:18,023
Nó sẽ chỉ đọc phần này thôi.

42
00:02:18,023 --> 00:02:20,992
Sau đó, nó sẽ khởi tạo một PartyAnimal,

43
00:02:20,992 --> 00:02:26,179
tức là phần code này sẽ tự động chạy.

44
00:02:26,179 --> 00:02:29,678
Và self là thực thể mới, vì thế ta
có thể nhìn vào các biến thực thể,

45
00:02:29,678 --> 00:02:33,238
chưa cần làm gì vội. Ta sẽ chỉ in ra
'I am constructed' (tôi đã được khởi tạo).

46
00:02:33,238 --> 00:02:37,825
Vậy, dòng này ngay đây đã khiến
cho 'I am constructed' được in ra.

47
00:02:37,825 --> 00:02:40,390
Khi đó đối tượng đã tồn tại.

48
00:02:40,390 --> 00:02:44,812
Ta sẽ gọi phương thức party ba lần,
khiến 1, 2, 3 được in ra,

49
00:02:44,812 --> 00:02:49,248
như ta làm lúc trước, và rồi chương trình
kết thúc và biến này biến mất.

50
00:02:49,248 --> 00:02:50,400
Ta không phải in thêm gì ra,

51
00:02:50,400 --> 00:02:54,851
nhưng vì biến 'an' này - chứ không phải
là PartyAnimal - biến mất

52
00:02:54,851 --> 00:02:59,369
về cuối chương trình, nó nói rằng ta
yêu cầu nó phải chạy

53
00:02:59,369 --> 00:03:02,485
đoạn code này khi nào
biến cuối cùng của ta bị hủy.

54
00:03:02,485 --> 00:03:07,060
Vậy ta sẽ in phần đó ra, và
chúng ta sẽ được xem biến 'self'.

55
00:03:07,060 --> 00:03:10,338
Đó là biến thực thể x, 
được in ra là 3,

56
00:03:10,338 --> 00:03:12,111
tức là giá trị cuối cùng của nó.

57
00:03:12,111 --> 00:03:16,520
Vậy, có thể thấy thời điểm khởi tạo
và thời điểm hủy biến

58
00:03:16,520 --> 00:03:21,160
là những chỗ ta có thể 
bổ sung thêm code vào.

59
00:03:21,160 --> 00:03:23,565
Ta có thể thêm code vào thời điểm khởi tạo

60
00:03:23,565 --> 00:03:25,489
hay thêm vào thời điểm hủy biến.

61
00:03:25,489 --> 00:03:27,100
Bạn chưa cần quan tâm làm vậy để làm gì.

62
00:03:28,240 --> 00:03:32,790
Như tôi đã nói, hàm này rất hiếm gặp
còn hàm này lại rất phổ biến.

63
00:03:32,790 --> 00:03:36,260
Hàm khởi tạo rất phổ biến,
còn hàm hủy lại rất hiếm thấy.

64
00:03:36,260 --> 00:03:38,982
Thường thì bạn sẽ lập một số biến thực thể

65
00:03:38,982 --> 00:03:40,734
trong hàm khởi tạo cho đúng.

66
00:03:40,734 --> 00:03:42,110
Ta sẽ được xem một ví dụ về nó
trong chốc lát,

67
00:03:42,110 --> 00:03:47,381
nhưng sẽ chưa thấy được ngay
hàm hủy có ích gì.

68
00:03:47,381 --> 00:03:51,987
Vậy hàm khởi tạo là một khối lệnh
đặc biệt được gọi khi một đối tượng

69
00:03:51,987 --> 00:03:52,722
được khởi tạo.

70
00:03:52,722 --> 00:03:55,860
Hãy nhớ rằng chúng ta có các lớp

71
00:03:55,860 --> 00:03:59,991
và sử dụng chúng để
làm một số việc.

72
00:03:59,991 --> 00:04:04,133
Mỗi thực thể có một bản sao
của các biến thực thể.

73
00:04:04,133 --> 00:04:05,780
Đó chính là điều ta sẽ nói ngay bây giờ -

74
00:04:05,780 --> 00:04:07,545
'có bản sao của các biến thực thể.'

75
00:04:07,545 --> 00:04:09,426
Ta sẽ nói về điều này trước.

76
00:04:09,426 --> 00:04:12,213
Cho đến giờ ta mới chỉ
làm việc trong một thực thể.

77
00:04:12,213 --> 00:04:15,203
Mặc dù khi ta viết nhiều chuỗi kí tự,
chúng gồm rất nhiều thực thể;

78
00:04:15,203 --> 00:04:17,506
nhưng với lớp PartyAnimal,
chúng ta mới chỉ tạo ra một thực thể.

79
00:04:17,506 --> 00:04:22,823
Vậy bây giờ, điều mà chúng ta sẽ làm chính là

80
00:04:22,823 --> 00:04:27,283
tạo ra hai biến thực thể, 'x' và 'name',

81
00:04:27,283 --> 00:04:29,697
'name' ban đầu sẽ rỗng.

82
00:04:29,697 --> 00:04:31,926
Sau đó ta sẽ viết một hàm khởi tạo.

83
00:04:31,926 --> 00:04:32,855
Ở đây, ta sẽ không có hàm hủy.

84
00:04:32,855 --> 00:04:34,340
Trong trường hợp này, hàm hủy
không có ý nghĩa gì cả.

85
00:04:34,340 --> 00:04:37,794
Giờ ta muốn cho hàm khởi tạo này

86
00:04:37,794 --> 00:04:42,304
có một tham số, bởi 'self' là
do Python thêm vào lúc đó.

87
00:04:42,304 --> 00:04:46,501
Vậy nếu bạn muốn có một tham số
trong hàm khởi tạo, bạn sẽ cần hai tham số 

88
00:04:46,501 --> 00:04:50,966
ở phần __init__, và tham số đầu tiên sẽ
luôn luôn là self - là bí danh cho thực thể

89
00:04:50,966 --> 00:04:52,541
chương trình đang chạy qua.

90
00:04:52,541 --> 00:04:57,228
Còn bây giờ đương nhiên là phần code này
được chạy, và không có gì xảy ra cả - trừ việc

91
00:04:57,228 --> 00:05:00,020
chương trình sẽ ghi nhớ 
dạng của các Party Animal.

92
00:05:00,020 --> 00:05:01,739
Bây giờ, ta sẽ tạo một thực thể.

93
00:05:01,739 --> 00:05:03,759
Ta sẽ lắp 'Sally' vào đây.

94
00:05:03,759 --> 00:05:05,860
Vậy 'Sally' sẽ trở thành 'nam'.

95
00:05:05,860 --> 00:05:10,663
Đây là một điều được làm rất thường xuyên
trong các hàm khởi tạo hướng đối tượng.

96
00:05:10,663 --> 00:05:15,310
Bạn sao chép tham số này,
nó sẽ biến mất ngay sau đó.

97
00:05:15,310 --> 00:05:18,202
Nhưng bởi bây giờ ta có một đối tượng,

98
00:05:18,202 --> 00:05:23,906
ta có thể sao chép nó vào self.name,
tức là đặt 'Sally' vào đó.

99
00:05:23,906 --> 00:05:26,330
Sau đó, ta sẽ gọi phương thức
'party' một lần.

100
00:05:26,330 --> 00:05:29,758
Tiếp theo, ta sẽ tạo ra một
thực thể thứ hai trong biến j.

101
00:05:29,758 --> 00:05:34,210
Và ta lại gọi phương thức một lần nữa; nhưng
lần này là một thực thể khác mới được tạo.

102
00:05:35,480 --> 00:05:39,260
Bây giờ ta sẽ xem chương trình
được thực thi.

103
00:05:39,260 --> 00:05:42,160
Vậy ban đầu, nó sẽ chỉ
đọc hết phần này.

104
00:05:43,380 --> 00:05:48,176
Bây giờ, nó sẽ thực sự tạo ra thực thể
đầu tiên của lớp PartyAnimal.

105
00:05:48,176 --> 00:05:52,190
Điều đó, về cơ bản, sẽ đưa ta
đến điểm xuất phát ở đây.

106
00:05:53,800 --> 00:05:56,787
Rồi ta sẽ lấy tham số đó,

107
00:05:56,787 --> 00:06:02,239
bất kể tham số đầu tiên ấy là gì, và sao chép
nó vào biến 'name', ở ngay đây.

108
00:06:02,239 --> 00:06:03,539
Vậy ta đã sao chép nó.

109
00:06:03,539 --> 00:06:04,758
Ta thấy giờ đây nó là một đối tượng.

110
00:06:04,758 --> 00:06:11,170
Bí danh của nó là s, và 'self' là một bí danh khác 
có thể sử dụng trong đoạn này.

111
00:06:11,170 --> 00:06:14,313
Sau đó, ta có câu lệnh in ra màn hình,
nên câu lệnh in được xuất ra.

112
00:06:14,313 --> 00:06:15,600
Ở đây ta không hiện câu đó.

113
00:06:15,600 --> 00:06:19,255
Sau đó ta chuyển sang phần
gọi phương thức.

114
00:06:19,255 --> 00:06:23,850
Vậy s là một đối tượng,
và ta sẽ gọi phương thức 'party'.

115
00:06:23,850 --> 00:06:26,881
Nó sẽ khiến đoạn code ở ngay đây chạy.

116
00:06:26,881 --> 00:06:31,700
Trong trường hợp này, đương nhiên là
'self' chỉ biến s, đúng không?

117
00:06:31,700 --> 00:06:38,748
Vậy đoạn code sẽ được chạy và nó sẽ in 
self.name, tức là 'Sally', đúng không?

118
00:06:38,748 --> 00:06:41,720
Rồi nó sẽ cộng 1 vào giá trị này
để giá trị ấy trở thành 1.

119
00:06:41,720 --> 00:06:45,719
Rồi nó sẽ xuống đây và tiếp tục 
thực thi câu lệnh tiếp theo.

120
00:06:45,719 --> 00:06:51,880
Câu lệnh tiếp theo sẽ
lại gọi hàm khởi tạo.

121
00:06:51,880 --> 00:06:56,029
Vậy hàm khởi tạo sẽ lại được gọi
để tạo ra một PartyAnimal mới.

122
00:06:56,029 --> 00:06:58,828
Nhiều ngôn ngữ lập trình khác
sử dụng từ khóa 'new'.

123
00:06:58,828 --> 00:07:03,110
Và Jim sẽ là biến ta
thay vào làm tham số.

124
00:07:03,110 --> 00:07:03,690
Vậy chương trình chạy,

125
00:07:03,690 --> 00:07:10,079
tạo ra một đối tượng mới,
và ta sẽ khởi tạo tên cho nó là Jim.

126
00:07:10,079 --> 00:07:11,473
Vậy tên của đối tượng này sẽ là Jim.

127
00:07:11,473 --> 00:07:14,520
Vậy bây giờ ta có hai thực thể,
thực thể thứ nhất và thứ hai.

128
00:07:15,520 --> 00:07:20,332
Khi phần code này đang chạy,
self lại là một bí danh của j.

129
00:07:20,332 --> 00:07:26,710
'self' không còn là bí danh của s, bởi ta đang
chạy chương trình với thực thể mới này.

130
00:07:26,710 --> 00:07:29,807
Phần code này mới là phần đang chạy.

131
00:07:29,807 --> 00:07:34,420
Vậy ta sẽ in nó ra rồi
tiếp tục chuyển đến phần này.

132
00:07:34,420 --> 00:07:35,548
Giờ ta có hai thực thể.

133
00:07:35,548 --> 00:07:38,103
Chúng ta có biến s, và biến j,

134
00:07:38,103 --> 00:07:43,180
ta sẽ gọi j.party, làm cho 
đoạn code ở đây chạy.

135
00:07:43,180 --> 00:07:46,162
Và 'self', tại thời điểm này,
sẽ chỉ biến j bởi

136
00:07:46,162 --> 00:07:50,923
j là thực thể của đối tượng đang được dùng
để chạy phương thức 'party'.

137
00:07:50,923 --> 00:07:54,494
Cả hai đối tượng đều có phương thức party.
Ta chỉ cần xác định cái nào đang được sử dụng,

138
00:07:54,494 --> 00:07:57,620
và ta biết điều này nhờ có 'self'.

139
00:07:57,620 --> 00:08:03,169
Vậy, 'self' chỉ biến j, và code chạy.

140
00:08:03,169 --> 00:08:03,959
Code chạy,

141
00:08:03,959 --> 00:08:09,190
và nó cập nhật biến ở đây bởi
'self' đang chỉ biến đó.

142
00:08:09,190 --> 00:08:15,341
Nó sẽ in ra 'Jim 1',
và tiếp tục đến dòng tiếp theo.

143
00:08:15,341 --> 00:08:22,470
OK? Một lần nữa, điều xảy ra là đoạn code này,

144
00:08:22,470 --> 00:08:25,309
Hiệu ứng của tôi không chạy,
nhưng không sao, tôi có thể vẽ tay.

145
00:08:25,309 --> 00:08:28,576
Đoạn code này sẽ lại chạy, chỉ khác là
'self' giờ lại chỉ biến s,

146
00:08:28,576 --> 00:08:33,640
bởi s chính là biến ta đang dùng để
gọi phương thức.

147
00:08:33,640 --> 00:08:36,688
Vậy nên giá trị ở đây sẽ tăng lên, 
khiến nó trở thành 3.. không, thực ra là 2.

148
00:08:36,688 --> 00:08:39,220
Tôi xin lỗi, phải là trở thành 2 mới đúng.

149
00:08:39,220 --> 00:08:40,267
Vậy giá trị ấy sẽ trở thành 2.

150
00:08:40,267 --> 00:08:42,120
Sau đó chương trình tiếp tục
chạy, rồi in, rồi chạy,...

151
00:08:42,120 --> 00:08:46,327
Thực ra cái này khá là đơn giản.

152
00:08:46,327 --> 00:08:50,705
Đoạn code này chạy được
với cả hai biến.

153
00:08:50,705 --> 00:08:51,921
Chúng cùng chung đoạn code đó.

154
00:08:51,921 --> 00:08:57,470
Tuy nhiên, tùy vào biến ta sử dụng để gọi code,
'self' có thể là bí danh của biến s hoặc biến j.

155
00:08:57,470 --> 00:09:00,670
Và đó chính là mục đích
của 'self'.

156
00:09:00,670 --> 00:09:06,648
Vậy đó chính là ví dụ về 
nhiều thực thể riêng biệt.

157
00:09:06,648 --> 00:09:09,910
Bây giờ ta sẽ ôn lại về các khái niệm
thêm một lần nữa

158
00:09:09,910 --> 00:09:12,910
và tiếp theo ta sẽ
hoàn thành nốt phần này.