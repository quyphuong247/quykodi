0
00:00:00,000 --> 00:00:00,700
DANGTHANH 30/09
https://youtu.be/E3cYWUxzyVA

1
00:00:00,700 --> 00:00:03,700
DIỄN GIẢ: Như ta đã thấy trong bài giảng tuần trước,

2
00:00:03,700 --> 00:00:07,920
có một số khái niệm quan trọng về quản lý thông tin.

3
00:00:07,920 --> 00:00:11,370
Thứ nhất là mô hình thông tin, đó là một tập các khái niệm

4
00:00:11,370 --> 00:00:13,050
để miêu tả dữ liệu.

5
00:00:13,050 --> 00:00:14,500
và thứ hai là lược đồ,

6
00:00:14,500 --> 00:00:17,060
là một miêu tả về một tập hợp dữ liệu cụ thể

7
00:00:17,060 --> 00:00:20,310
sử dụng một mô hình dữ liệu cho trước.

8
00:00:20,310 --> 00:00:23,110
Hôm nay, ta sẽ nói về mô hình dữ liệu quan hệ,

9
00:00:23,110 --> 00:00:26,860
là mô hình thông tin được sử dụng rộng rãi nhất.

10
00:00:26,860 --> 00:00:30,010
Một mối quan hệ là một bảng với các hàng và cột.

11
00:00:30,010 --> 00:00:32,180
Mỗi quan hệ có một lược đồ

12
00:00:32,180 --> 00:00:35,140
định nghĩa các trường trong một cột.

13
00:00:35,140 --> 00:00:38,230
Trong bài giảng này, ta sẽ học về dữ liệu có cấu trúc.

14
00:00:38,230 --> 00:00:40,830
Ví dụ như các cơ sở dữ liệu dạng quan hệ

15
00:00:40,830 --> 00:00:43,940
và các thông điệp được định dạng

16
00:00:43,940 --> 00:00:46,805
Đối với cơ sở dữ liệu dạng quan hệ, ta cần một số định nghĩa.

17
00:00:46,805 --> 00:00:49,760
Cơ sở dữ liệu quan hệ là một tập các mối quan hệ.

18
00:00:49,760 --> 00:00:52,140
Có hai phần hợp thành một quan hệ.

19
00:00:52,140 --> 00:00:53,850
Phần đầu là một lược đồ

20
00:00:53,850 --> 00:00:56,050
chỉ ra tên của quan hệ

21
00:00:56,050 --> 00:00:58,770
cộng với tên các cột và kiểu.

22
00:00:58,770 --> 00:01:01,660
Ở đây ta có một ví dụ về mối quan hệ của một sinh viên.

23
00:01:01,660 --> 00:01:06,840
Có ba cột kiểu chuỗi được đặt tên là sid, name,

24
00:01:06,840 --> 00:01:07,980
và email.

25
00:01:07,980 --> 00:01:11,430
Và một cột kiểu số nguyên tên là age.

26
00:01:11,430 --> 00:01:15,830
Và một cột chứa giá trị thực tên là gpa.

27
00:01:15,830 --> 00:01:18,870
Phần thứ hai của mối quan hệ này là giá trị.

28
00:01:18,870 --> 00:01:22,120
Đây là thông tin thực sự tại một thời điểm.

29
00:01:22,120 --> 00:01:24,030
Nó bao gồm một số hàng

30
00:01:24,030 --> 00:01:26,830
đó là số phần tử của tập hợp, và số trường,

31
00:01:26,830 --> 00:01:30,050
nó được gọi là cấp độ.

32
00:01:30,050 --> 00:01:31,780
Vậy thế nào là một cơ sở dữ liệu?

33
00:01:31,780 --> 00:01:36,770
Một cơ sở dữ liệu là một tập hợp các thông tin có trật tự sắp xếp.

34
00:01:36,770 --> 00:01:40,170
Giao dich thường được sử dụng để sửa đổi thông tin.

35
00:01:40,170 --> 00:01:43,070
Giờ ta nói về cơ sở dữ liệu mô phỏng thế giới thực.

36
00:01:43,070 --> 00:01:44,970
Lấy ví dụ, một doanh nghiệp.

37
00:01:44,970 --> 00:01:48,970
Nó thường gồm các thực thể, những thứ như đội ngũ hoặc các kế hoạch,

38
00:01:48,970 --> 00:01:51,200
và các mối quan hệ, những thứ như là "A"

39
00:01:51,200 --> 00:01:55,970
đối đầu với "B" trong cúp vô địch thế giới.

40
00:01:55,970 --> 00:01:57,650
Cơ sở dữ liệu lớn là gì?

41
00:01:57,650 --> 00:02:01,420
Đây là một số ví dụ về cơ sở dữ liệu lớn,

42
00:02:01,420 --> 00:02:05,000
dao động từ khoảng 150 terabytes cho Lợi tức dịch vụ quốc nội Hoa Kỳ

43
00:02:05,000 --> 00:02:09,810
cho đến hơn 2 petabytes cho thông tin nhấn chuột của Yahoo.

44
00:02:09,810 --> 00:02:13,360
Cho mỗi một cơ sở dữ liệu như vậy, những nhân tố nào là quan trọng?

45
00:02:13,360 --> 00:02:14,790
Nó tùy thuộc vào nhiều thứ.

46
00:02:14,790 --> 00:02:17,520
Về Lợi tức dịch vụ quốc nội Hoa Kỳ,

47
00:02:17,520 --> 00:02:21,850
họ quan tâm về độ chính xác, tính nhất quán và độ bền,

48
00:02:21,850 --> 00:02:25,040
khả năng thực thi những câu lệnh truy vấn.

49
00:02:25,040 --> 00:02:27,580
Văn phòng thống kê Úc

50
00:02:27,580 --> 00:02:31,710
quan tâm về những câu truy vấn nhanh và tốt.

51
00:02:31,710 --> 00:02:37,050
AT&T quan tâm về độ chính xác, tính nhất quán và độ bền.

52
00:02:37,050 --> 00:02:40,000
eBay và Yahoo đều quan tâm về tính khả dụng

53
00:02:40,000 --> 00:02:40,625
và kịp thời.

54
00:02:40,625 --> 00:02:43,630

55
00:02:43,630 --> 00:02:46,500
Đây là một ví dụ về một trường hợp

56
00:02:46,500 --> 00:02:48,760
một mối quan hệ của sinh viên.

57
00:02:48,760 --> 00:02:52,420
Ta có năm cột, 

58
00:02:52,420 --> 00:02:55,840
ba cột là kiểu chuỗi -- sid, name và login.

59
00:02:55,840 --> 00:02:58,530
Một cột kiểu số nguyên -- age.

60
00:02:58,530 --> 00:03:03,110
Và cột cuối cùng kiểu số thực, gpa.

61
00:03:03,110 --> 00:03:04,770
ta có năm cột.

62
00:03:04,770 --> 00:03:06,535
Điều này cho ta cấp độ 5.

63
00:03:06,535 --> 00:03:07,970
Ta có ba dòng.

64
00:03:07,970 --> 00:03:10,290
Cho ta số phần tử 3.

65
00:03:10,290 --> 00:03:13,225
Cần phải chú ý rằng các dòng, trường dữ liệu là tách biệt.

66
00:03:13,225 --> 00:03:16,490

67
00:03:16,490 --> 00:03:18,960
Ta có một bảng, đó là Students.

68
00:03:18,960 --> 00:03:22,300
Ta có các thuộc tính, đó là tên của mỗi cột.

69
00:03:22,300 --> 00:03:25,650
Mỗi một dòng trong đó là một trường dữ liệu.

70
00:03:25,650 --> 00:03:28,280

71
00:03:28,280 --> 00:03:31,250
Ngôn ngữ cấu truy vấn cấu trúc là một ngôn ngữ

72
00:03:31,250 --> 00:03:34,320
ta sử dụng cho các cơ sở dữ liệu dạng quan hệ.

73
00:03:34,320 --> 00:03:36,980
Và nó được hỗ trợ bởi Spark DataFrames.

74
00:03:36,980 --> 00:03:39,160
Nó được gọi là SparksSQL.

75
00:03:39,160 --> 00:03:41,530
Một số chức năng mà SQL cung cấp

76
00:03:41,530 --> 00:03:46,420
bao gồm khả năng tạo, thay đổi và xóa các quan hệ

77
00:03:46,420 --> 00:03:49,610
để thêm vào, sửa hoặc xóa chuỗi thông tin.

78
00:03:49,610 --> 00:03:52,040
Bạn cũng có thể chỉ định câu truy vấn để tìm chuỗi thông tin

79
00:03:52,040 --> 00:03:55,510
tương ứng với những tiêu chuẩn đề ra.

80
00:03:55,510 --> 00:03:58,070
Đây là ví dụ của một câu truy vấn trong SQL.

81
00:03:58,070 --> 00:03:59,930
Nó tương tự như những gì 

82
00:03:59,930 --> 00:04:02,740
ta thấy trong bài học trước.

83
00:04:02,740 --> 00:04:06,300
Đối với câu truy vấn cho một bảng đơn, nó rất rõ ràng.

84
00:04:06,300 --> 00:04:08,780
Như tìm tất cả các sinh viên 18 tuổi.

85
00:04:08,780 --> 00:04:13,470
Để làm điều này, ta viết Select * FROM Student S,

86
00:04:13,470 --> 00:04:14,150
WHERE S.age=18.

87
00:04:14,150 --> 00:04:17,620

88
00:04:17,620 --> 00:04:22,890
Nó sẽ dùng cột tuổi và lọc tất cả

89
00:04:22,890 --> 00:04:27,780
những giá trị đúng bằng 18,

90
00:04:27,780 --> 00:04:33,150
và trả về tất cả các cột tương ứng với những dòng đó.

91
00:04:33,150 --> 00:04:35,980
Giờ chỉ tìm thông tin các cột name và login,

92
00:04:35,980 --> 00:04:43,025
Ta có thể dùng SELECT S.name and S.login from Students S,

93
00:04:43,025 --> 00:04:43,650
WHERE S.age=18.

94
00:04:43,650 --> 00:04:46,630

95
00:04:46,630 --> 00:04:52,950
Giờ nó sẽ chỉ trả về các dòng, WHERE age=18,

96
00:04:52,950 --> 00:04:54,940
nhưng chỉ trả về cột name và login.

97
00:04:54,940 --> 00:04:58,380

98
00:04:58,380 --> 00:05:01,780
Ta có thể thực hiện truy vấn với nhiều mối quan hệ.

99
00:05:01,780 --> 00:05:05,180
Ở đây ta có hai bảng.

100
00:05:05,180 --> 00:05:10,780
Ta có bảng Enrolled chứa ba cột --

101
00:05:10,780 --> 00:05:15,180
sid, class id và grade.

102
00:05:15,180 --> 00:05:20,780
Ta có bảng Students chứa năm cột -- sid,

103
00:05:20,780 --> 00:05:25,420
name, login, age và gpa.

104
00:05:25,420 --> 00:05:30,130
Giờ ta cần tìm tất cả sinh viên

105
00:05:30,130 --> 00:05:35,160
có trường sid giống hệt như trong bảng Students và 

106
00:05:35,160 --> 00:05:36,180
bảng Enrolled.

107
00:05:36,180 --> 00:05:38,280
Để làm điều đó, ta sẽ sử dụng hàm kết nối.

108
00:05:38,280 --> 00:05:43,700
Ở đây, ta sẽ dùng SELECT S.name and E.cid

109
00:05:43,700 --> 00:05:47,160
bởi vì ta chỉ quan tâm đến các cột name và classid.

110
00:05:47,160 --> 00:05:51,300
Ta sẽ thực hiện hàm nối này từ hai bảng, Students, S, 

111
00:05:51,300 --> 00:05:59,230
và Enrolled, E, hai bảng này có các sid giống nhau.

112
00:05:59,230 --> 00:06:02,480
Để làm điều này, đầu tiên ta phải kết hợp hai bảng một cách hợp lý,

113
00:06:02,480 --> 00:06:08,100
S và E. Như vậy ta tạo ra Cartesian product hay tích Descartes

114
00:06:08,100 --> 00:06:09,970
của hai bảng.

115
00:06:09,970 --> 00:06:12,230
Đây là một ví dụ của khái niệm này.

116
00:06:12,230 --> 00:06:16,700
Trong bảng này có tất cả các cột từ cả hai bảng E và S

117
00:06:16,700 --> 00:06:20,610
và các dòng được ta tạo ra thông qua 

118
00:06:20,610 --> 00:06:23,780
tích Descartes.

119
00:06:23,780 --> 00:06:28,270
Giờ ta chỉ cần chọn những dòng phù hợp

120
00:06:28,270 --> 00:06:30,180
bằng việc sử dụng mệnh đề WHERE.

121
00:06:30,180 --> 00:06:35,680
Ở đây S.sid tương tự như E.sid.

122
00:06:35,680 --> 00:06:38,810

123
00:06:38,810 --> 00:06:41,660
Sau đó, ta có thể lọc những cột từ những dòng phù hợp

124
00:06:41,660 --> 00:06:46,780
sử dụng mệnh đề SELECT với S.name và E.cid.

125
00:06:46,780 --> 00:06:49,450

126
00:06:49,450 --> 00:06:51,770
Và ta có thể trả về kết quả.

127
00:06:51,770 --> 00:06:55,950
Trong trường hợp này, kết quả là một bảng chứa

128
00:06:55,950 --> 00:06:58,610
hai dòng và hai cột.

129
00:06:58,610 --> 00:07:02,270
Các cột là S.name và E.cid.

130
00:07:02,270 --> 00:07:05,270
Các dòng là Jones và History 105

131
00:07:05,270 --> 00:07:10,230
và Smith và Physics 203.

132
00:07:10,230 --> 00:07:13,060
Đây là hai dạng khác nhau của kết nối.

133
00:07:13,060 --> 00:07:16,490
Có những kết nối ngoại, và trong trường hợp này

134
00:07:16,490 --> 00:07:18,730
ta có thể nói rõ ràng rằng ta muốn thực thi

135
00:07:18,730 --> 00:07:22,810
một kết nối giữa hai bảng, S và E.

136
00:07:22,810 --> 00:07:25,810
Do đó ở đây ta dùng SELECT cột name

137
00:07:25,810 --> 00:07:31,180
từ S và cột classid từ E.

138
00:07:31,180 --> 00:07:36,200
Và ta lấy giá trị với FROM Students S INNER JOIN with Enrolled

139
00:07:36,200 --> 00:07:42,540
E ON S.sid equal to E.sid.

140
00:07:42,540 --> 00:07:45,600
Ta sẽ có kết quả tương tự những gì ta đã thực hiện lần trước.

141
00:07:45,600 --> 00:07:48,880
Bạn có thể thấy rằng giờ ta có hai cột trong kết quả, name

142
00:07:48,880 --> 00:07:50,160
và classid.

143
00:07:50,160 --> 00:07:54,376
Và hàng chứa những sinh viên có mã sid in S

144
00:07:54,376 --> 00:08:01,990
cũng xuất hiện trong E. Đây là những ký hiệu tương đương.

145
00:08:01,990 --> 00:08:05,010
Nhưng ta nên dùng hàm kết nối.

146
00:08:05,010 --> 00:08:09,030
Do đó ta nên dùng INNER JOIN hoặc dùng thẳng JOIN

147
00:08:09,030 --> 00:08:11,680
thay vì chỉ đơn giản dùng mệnh đề WHERE khi

148
00:08:11,680 --> 00:08:13,940
các hàm JOIN được hiểu ngầm.

149
00:08:13,940 --> 00:08:15,840
Loại ký hiệu đó thực sự không còn được sử dụng nữa.

150
00:08:15,840 --> 00:08:19,590

151
00:08:19,590 --> 00:08:22,380
Có những loại kết nối khác.

152
00:08:22,380 --> 00:08:27,050
và tùy loại kết nối có cách xử lý các giá trị không khớp.

153
00:08:27,050 --> 00:08:31,580
Ở đây ta có hai bảng, như trước đó, S và E.

154
00:08:31,580 --> 00:08:39,090
Ta thực thi một INNER JOIN với S.sid bằng E.sid.

155
00:08:39,090 --> 00:08:46,960
Cần lưu ý rằng trong bảng S với Brown ta có sid, 33333,

156
00:08:46,960 --> 00:08:54,490
và trong bảng E với English 10, 44444,

157
00:08:54,490 --> 00:08:57,690
không xuất hiện trong bảng S.

158
00:08:57,690 --> 00:08:59,902
Chúng không phải là những giá trị không khớp.

159
00:08:59,902 --> 00:09:03,100
Khi ta có những khóa không khớp với một KẾT NỐI NỘI,

160
00:09:03,100 --> 00:09:05,890
ta đơn giản bỏ những dòng này.

161
00:09:05,890 --> 00:09:07,920
Ta có thể thấy trong kết quả

162
00:09:07,920 --> 00:09:10,730
ta chỉ có những hàng với giá trị

163
00:09:10,730 --> 00:09:13,805
sid xuất hiện trong cả hai bảng.

164
00:09:13,805 --> 00:09:16,590

165
00:09:16,590 --> 00:09:20,720
Với một LEFT OUTER JOIN, ta lấy các giá trị

166
00:09:20,720 --> 00:09:24,800
không khớp với bảng bên trái.

167
00:09:24,800 --> 00:09:27,690
Ở đây là bảng Students S LEFT OUTER JOIN

168
00:09:27,690 --> 00:09:32,840
với bảng Enrolled E cho dòng không khớp đó, Brown,

169
00:09:32,840 --> 00:09:37,090
ta lấy dòng đó, và dòng đó xuất hiện trong kết quả.

170
00:09:37,090 --> 00:09:42,930
Bởi vì không có gì nối với E.sid, nên giá trị của ô đó

171
00:09:42,930 --> 00:09:47,950
sẽ bằng 0 cho E.classid.

172
00:09:47,950 --> 00:09:51,960

173
00:09:51,960 --> 00:09:56,580
Với một RIGHT OUTER JOIN, trong trường hợp này

174
00:09:56,580 --> 00:10:02,830
cho các dòng với English 10, không có gì khớp với S.name,

175
00:10:02,830 --> 00:10:06,390
bởi thế các ô đó sẽ là NULL.

