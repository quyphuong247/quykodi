Để hoàn thành các bài tập thực hành trong khóa học, bạn sẽ sử dụng phiên bản miễn phí của nền tảng Databricks - Databricks Community Edition. Bằng cách sử dụng nền tảng này, bạn sẽ không cần tải bất kì phần mềm của Spark nào về máy. Bạn có thể dùng bằng mọi máy tính có kết nối Internet với trình duyệt Google Chrome (nên dùng) hoặc Mozilla Firefox. Lưu ý rằng Internet Explorer, Egde và Safari không được hỗ trợ. Databricks Community Edition cung cấp một môi trường Spark mạnh và đầy đủ, bao gồm một cụm máy tính nhỏ với 6GB bộ nhớ chạy trên Amazon AWS, và môi trường notebook tương tác với các minh họa trực quan và bảng điều khiển, cũng như môi trường chung để bạn chia sẻ thành quả công việc của mình. 

Đây là một danh sách lớn trên GitHub về các Bộ dữ liệu hay và được công khai: [https://github.com/caesar0301/awesome-public-datasets]; chúng hầu hết là miễn phí. Sau khi học khóa học này, bạn có thể tải về một trong các bộ dữ liệu, nhập nó vào tài khoản Databricks Community Edition, và khám phá nó sử dụng Apache Spark.

(Bài đọc thêm) Tài liệu "Dữ liệu về Đô thị mở có cấu trúc: Hiểu về Cảnh quan" [http://www.ncbi.nlm.nih.gov/pmc/articles/PMC4174913/pdf/big.2014.0020.pdf] nghiên cứu trên 9000 bộ dữ liệu mở từ 20 thành phố ở Bắc Mỹ, và trình bày các số liệu chung về nội dung, kích cỡ, bản chất và độ phổ biến của các bộ dữ liệu, cũng như nghiên cứu các vấn đề về chất lượng dữ liệu và những khía cạnh về thời gian của nhiều bộ dữ liệu.

Thành phố San Francisco có một bộ sưu tập các hồ sơ trực tuyến lớn [https://data.sfgov.org]. Dữ liệu trong đó bao gồm dữ liệu về an sinh xã hội, sức khỏe, giao thông, nhà ở và nhiều chủ đề khác. Dữ liệu, cùng với các phương tiện truyền thông xã hội sẽ cung cấp một cái nhìn chưa từng có vào các hoạt động của Thành phố. Ai cũng có thể tự do truy cập và khám phá những dữ liệu này. Nhiều thành phố khác cũng đang đưa các hồ sơ của họ lên mạng. Ta sẽ xem xét một số loại câu hỏi có thể được nêu ra khi sử dụng những dữ liệu này, nhưng còn rất nhiều loại khác:

1. Trong mục Sức khỏe của sf.data.gov, có một bộ sưu tập các hồ sơ rất lớn về các đợt thanh tra nhà hàng. San Francisco có tỉ lệ số nhà hàng trên số dân cao nhất trong các thành phố lớn của Mỹ. Việc theo dõi và duy trì chất lượng của các nhà hàng này luôn là một thách thức với các thanh tra. Một câu hỏi thú vị được đặt ra là: liệu ta có thể tạo ra một "hệ thống cảnh báo sớm" dựa trên các mạng xã hội? (vd: liệu ta có thể dự đoán những nhà hàng nào cần được thanh tra dựa vào bài đánh giá trên Yelp?). Câu hỏi này có thể được giải đáp một phần bằng cách xây dựng một hệ thống học máy có chức năng phân loại, sử dụng các bài đánh giá có sẵn trên mạng (vd: từ trang Yelp hoặc TripAdvisor) và hồ sơ của các đợt thanh tra.

2. Thành phố nhận được nhiều báo cáo 3-1-1 (báo cáo của người dân về những sự việc không khẩn cấp). Tuy nhiên một số báo cáo này dự đoán những sự việc nghiêm trọng có thể được cảnh sát lưu lại trong các báo cáo trong tương lai. Hãy nghĩ về thách thức đặt ra khi khai thác các báo cáo CABLE và tìm các thông tin quan trọng tiên đoán các báo cáo trong tương lai của cảnh sát. Trước thách thức này, ta cần nối hai bộ dữ liệu dưới dạng bảng vào nhau - một quy trình bị phức tạp hóa bởi khối lượng dữ liệu lớn. Chúng ta nên gắn hai bộ dữ liệu với nhau dựa vào tên của những người trong cuộc hay nơi xảy ra sự việc? Đây là một vấn đề liên quan đến phân giải thực thể, bởi tên người liên quan có thể được ghi khác nhau trong hai bộ dữ liệu (vd: Anthony Joseph và A. Joseph); điều tương tự xảy ra với thông tin về địa chỉ ở hai bộ dữ liệu (vd: SF City Hall và 1 Dr Carlton B Goodlett Pl, San Francisco, CA 94102). Bạn sẽ khám phá vấn đề phân giải thực thể ở Bài thực hành #3. Sau khi kết hợp hai bộ dữ liệu, bước tiếp theo là tìm các từ khóa để phân loại sự việc trong các báo cáo của cảnh sát, và thử tiên đoán các sự việc từ báo cáo CABLE đầy đủ.

Đây chỉ là hai thách thức, nhưng có thể còn rất nhiều thách thức nữa khi sử dụng bộ dữ liệu này.

Hàm do người dùng định nghĩa (UDF): Lưu ý rằng các UDF trong Python chạy chậm, nên bất kì khi nào có thể, hãy sử dụng các hàm có sẵn. Ví dụ, thay vì tạo ra một hàm lambda và sử dụng một UDF để trừ đi một từ các giá trị của một cột, bạn nên dùng transformation 'select' để thực hiện phép trừ.