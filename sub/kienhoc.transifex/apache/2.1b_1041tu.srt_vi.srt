0
00:00:00,000 --> 00:00:00,720
anlynguyenphuoc_gtc_Y2VjYm 02/09/2016

1
00:00:00,720 --> 00:00:03,470
Cái gì giúp Apache Spark có khả năng mở rộng?

2
00:00:03,470 --> 00:00:07,280
Để trả lời câu hỏi trên, ta cần ôn lại một chút về

3
00:00:07,280 --> 00:00:10,920
xử lý dữ liệu lớn.

4
00:00:10,920 --> 00:00:15,200
Xử lý dữ liệu lớn khởi nguồn từ nhiều ổ cứng

5
00:00:15,200 --> 00:00:18,760
và nhiều CPU, tất cả trong một cái hộp lớn.

6
00:00:18,760 --> 00:00:21,180
Đây là giải pháp của những năm 90 của thế kỷ 20.

7
00:00:21,180 --> 00:00:24,890
Tất cả vi xử lý đều dùng chung lượng bộ nhớ.

8
00:00:24,890 --> 00:00:28,650
Không may là giải pháp này quá đắt đỏ

9
00:00:28,650 --> 00:00:31,530
vì nó được sản xuất với số lượng ít

10
00:00:31,530 --> 00:00:35,260
cùng với phần cứng hảo hạng, ổ cứng máy chủ mắc tiền.

11
00:00:35,260 --> 00:00:38,585
Nó vẫn chưa đủ lớn để thực hiện xử lý dữ liệu lớn.

12
00:00:38,585 --> 00:00:41,950

13
00:00:41,950 --> 00:00:44,510
Sự thay đổi lớn diễn ra khi ta chuyển sang sử dụng

14
00:00:44,510 --> 00:00:45,960
phần cứng dòng phổ thông.

15
00:00:45,960 --> 00:00:48,970
Đây không phải là phần cứng máy chủ mạ vàng.

16
00:00:48,970 --> 00:00:52,300
Nó là các máy chủ dạng để bàn (desktop)

17
00:00:52,300 --> 00:00:56,690
được xếp chồng lên kệ rồi ghép kệ thành một cụm.

18
00:00:56,690 --> 00:00:59,050
Như vậy sẽ dễ tăng sức chứa

19
00:00:59,050 --> 00:01:01,760
vì mỗi máy chủ desktop

20
00:01:01,760 --> 00:01:06,850
có chi phí cho vi xử lý và đĩa thấp hơn.

21
00:01:06,850 --> 00:01:12,920
Tuy nhiên, nó yêu cầu phần mềm phức tạp hơn nhiều.

22
00:01:12,920 --> 00:01:16,950
Đây là hình ảnh

23
00:01:16,950 --> 00:01:19,540
kệ máy tính của Google.

24
00:01:19,540 --> 00:01:23,430
Bao gồm một bộ bo mạch máy chủ desktop

25
00:01:23,430 --> 00:01:30,300
được đặt trên kệ và kết nối với nhau.

26
00:01:30,300 --> 00:01:33,340
Có nhiều vấn đề với phần cứng rẻ tiền.

27
00:01:33,340 --> 00:01:36,810
Ở Google, hằng năm có 1% đến 5%

28
00:01:36,810 --> 00:01:42,130
số ổ cứng bị hư hỏng, và 0.2%

29
00:01:42,130 --> 00:01:45,490
là số chip bộ nhớ bị hư.

30
00:01:45,490 --> 00:01:50,400
Mạng cũng sẽ chậm hơn so với lượng bộ nhớ được chia sẻ

31
00:01:50,400 --> 00:01:52,970
khi mà có quá nhiều vi xử lý và đĩa

32
00:01:52,970 --> 00:01:55,520
ở trong một cái hộp lớn.

33
00:01:55,520 --> 00:01:57,080
Độ trễ tăng lên, truy xuất chậm hơn,

34
00:01:57,080 --> 00:02:00,150
và băng thông cũng giảm.

35
00:02:00,150 --> 00:02:02,880
Lưu dữ liệu trong mạng lưới cũng sẽ chậm hơn nhiều

36
00:02:02,880 --> 00:02:06,510
so với lưu dữ liệu nội bộ.

37
00:02:06,510 --> 00:02:10,615
Hiệu suất làm việc của các máy cũng sẽ chênh lệch nếu

38
00:02:10,615 --> 00:02:13,090
một máy sắp hư hỏng,

39
00:02:13,090 --> 00:02:18,270
và nó sẽ hoạt động chậm hơn các máy khác.

40
00:02:18,270 --> 00:02:21,130
Đó là hai vấn đề ta mắc phải

41
00:02:21,130 --> 00:02:23,140
khi dùng điện toán cụm.

42
00:02:23,140 --> 00:02:25,330
Nhưng cũng có những vấn đề khác

43
00:02:25,330 --> 00:02:26,860
mà ta phải giải quyết.

44
00:02:26,860 --> 00:02:29,900
Làm sao để phân chia việc giữa các máy?

45
00:02:29,900 --> 00:02:34,450
Hãy xem xét một việc đơn giản, đếm số từ.

46
00:02:34,450 --> 00:02:36,440
Bạn làm thế nào để đếm số lần xuất hiện

47
00:02:36,440 --> 00:02:38,810
của từng từ trong một văn bản?

48
00:02:38,810 --> 00:02:43,380
Ta có một văn bản, I am Sam, I am Sam, Sam I am,

49
00:02:43,380 --> 00:02:46,390
Do you like Green eggs and ham?

50
00:02:46,390 --> 00:02:51,770
Ta thấy từ " I " xuất hiện ba lần

51
00:02:51,770 --> 00:02:59,600
từ "Sam" xuất hiện ba lần, từ "do" một lần, v.v.

52
00:02:59,600 --> 00:03:02,390
Một cách làm là dùng bảng băm.

53
00:03:02,390 --> 00:03:05,010

54
00:03:05,010 --> 00:03:07,420
Mỗi lần ta thấy một từ,

55
00:03:07,420 --> 00:03:10,060
ta so với bảng băm, và nếu nó 

56
00:03:10,060 --> 00:03:13,580
không có trong bảng thì ta bổ sung vào.

57
00:03:13,580 --> 00:03:17,390
Còn nếu có, ta tăng thêm 1.

58
00:03:17,390 --> 00:03:17,890
OK.

59
00:03:17,890 --> 00:03:19,130
Bắt đầu nhé.

60
00:03:19,130 --> 00:03:22,310
Bắt đầu với I, I chưa xuất hiện lần nào

61
00:03:22,310 --> 00:03:25,300
ta thêm vào bảng băm với giá trị 1

62
00:03:25,300 --> 00:03:28,790
vì giờ ta đã thấy nó một lần.

63
00:03:28,790 --> 00:03:32,890
Làm tương tự với am và Sam.

64
00:03:32,890 --> 00:03:36,630
Lần thứ hai ta thấy từ I,

65
00:03:36,630 --> 00:03:39,410
nó đã có sẵn trong bảng băm nên ta thêm một

66
00:03:39,410 --> 00:03:41,500
vào số lần xuất hiện.

67
00:03:41,500 --> 00:03:43,992
Ta đã thấy nó hai lần.

68
00:03:43,992 --> 00:03:46,890
Tiếp tục làm như vậy.

69
00:03:46,890 --> 00:03:50,200
Nhưng nếu văn bản quá lớn thì sao?

70
00:03:50,200 --> 00:03:52,540
Lúc này ta phải chia nó ra

71
00:03:52,540 --> 00:03:56,860
để mỗi máy chỉ có một phần của văn bản

72
00:03:56,860 --> 00:04:00,960
rồi cho chạy phương pháp bảng băm như trên

73
00:04:00,960 --> 00:04:03,420
cho từng phần trên từng máy.

74
00:04:03,420 --> 00:04:09,200
Sau đó tổng hợp bảng băm ở một máy.

75
00:04:09,200 --> 00:04:12,000
Ta dùng máy một đến bốn

76
00:04:12,000 --> 00:04:15,240
để chạy bốn phần, hay là bốn mảnh

77
00:04:15,240 --> 00:04:18,260
của dữ liệu rồi tổng hợp kết quả 

78
00:04:18,260 --> 00:04:21,890
của bảng băm ở máy năm.

79
00:04:21,890 --> 00:04:24,174
Có vấn đề gì với cách làm này?

80
00:04:24,174 --> 00:04:25,465
Quan sát nó một chút nhé.

81
00:04:25,465 --> 00:04:28,030

82
00:04:28,030 --> 00:04:31,580
Vấn đề là tất cả kết quả

83
00:04:31,580 --> 00:04:36,030
phải vừa đủ cho một máy, máy năm.

84
00:04:36,030 --> 00:04:40,250
Nếu văn bản của ta rất, rất lớn thì sao?

85
00:04:40,250 --> 00:04:42,330
Các kết quả sẽ không nằm hết trong máy

86
00:04:42,330 --> 00:04:43,860
và cách xử lý của ta thất bại.

87
00:04:43,860 --> 00:04:46,480

88
00:04:46,480 --> 00:04:49,760
Ta có thể cải thiện cách tổng hợp,

89
00:04:49,760 --> 00:04:54,240
cho nhiều lớp khác nhau thực hiện tổng hợp,
nhưng sau cùng

90
00:04:54,240 --> 00:04:55,800
tất cả kết quả vẫn phải được chứa

91
00:04:55,800 --> 00:04:57,820
trong một máy duy nhất.

92
00:04:57,820 --> 00:05:00,330

93
00:05:00,330 --> 00:05:04,620
Phương pháp khác là "chia để trị".

94
00:05:04,620 --> 00:05:09,370
Khi mà các máy đã làm xong bảng băm của nó,

95
00:05:09,370 --> 00:05:13,340
tất cả các máy sẽ gửi kết quả của từ I

96
00:05:13,340 --> 00:05:17,790
đến máy một và từ do

97
00:05:17,790 --> 00:05:21,350
đến máy một và tiếp tục như vậy.

98
00:05:21,350 --> 00:05:24,670
Ta phân chia các kết quả theo từ.

99
00:05:24,670 --> 00:05:27,250

100
00:05:27,250 --> 00:05:34,120
Phương pháp này có giai đoạn đầu,
gọi là bản đồ (map),

101
00:05:34,120 --> 00:05:37,390
và giai đoạn hai, ta gọi là

102
00:05:37,390 --> 00:05:39,540
rút gọn (reduce).

103
00:05:39,540 --> 00:05:42,130
Mô hình lập trình này

104
00:05:42,130 --> 00:05:44,620
được Google công bố

105
00:05:44,620 --> 00:05:47,730
trong một bài nghiên cứu rất quan trọng vào năm 2004.

106
00:05:47,730 --> 00:05:52,210
Điều này dẫn đến dự án Apache Hadoop.

107
00:05:52,210 --> 00:05:55,970
Ta có thể dùng MapReduce cho những công việc như phân loại.

108
00:05:55,970 --> 00:06:00,110
Nếu ta muốn biết từ nào được dùng nhiều nhất

109
00:06:00,110 --> 00:06:04,150
thì với giai đoạn rút gọn, thay vì chỉ chia theo từ

110
00:06:04,150 --> 00:06:08,020
ta chia theo số lần xuất hiện.

111
00:06:08,020 --> 00:06:10,930
Mọi số lần xuất hiện nhỏ hơn hay bằng 2

112
00:06:10,930 --> 00:06:13,570
sẽ đưa đến máy một, lớn hơn 2

113
00:06:13,570 --> 00:06:17,120
và nhỏ hơn hay bằng 4 đến máy hai

114
00:06:17,120 --> 00:06:20,080
và cứ thế.

115
00:06:20,080 --> 00:06:21,790
Khó khăn của điện toán cụm là gì?

116
00:06:21,790 --> 00:06:24,490
Ta thấy có hai vấn đề phải đối mặt,

117
00:06:24,490 --> 00:06:27,840
Ta phải giải quyết việc chia phần công việc giữa các máy.

118
00:06:27,840 --> 00:06:30,430
Tức là phải xét đến mạng lưới

119
00:06:30,430 --> 00:06:34,520
và dữ liệu được bố trí ở đâu, vì mạng lưới có thể chậm

120
00:06:34,520 --> 00:06:37,410
và có băng thông hạn chế.

121
00:06:37,410 --> 00:06:39,890
Nếu dữ liệu không nằm cục bộ, việc di chuyển nó

122
00:06:39,890 --> 00:06:42,559
có thể rất tốn kém.

123
00:06:42,559 --> 00:06:44,850
Điều khó khăn thứ hai của điện toán cụm

124
00:06:44,850 --> 00:06:46,940
là giải quyết sự cố.

125
00:06:46,940 --> 00:06:50,250
Nếu cứ 3 năm một máy chủ bị hư

126
00:06:50,250 --> 00:06:52,245
trong một cụm có 10000 nút,

127
00:06:52,245 --> 00:06:55,980
ta sẽ có 10 sự cố mỗi ngày.

128
00:06:55,980 --> 00:06:59,200
Tệ hơn nữa là các máy chưa hư

129
00:06:59,200 --> 00:07:03,420
nhưng chạy rất chậm, kéo theo cả hệ thống chậm theo.

130
00:07:03,420 --> 00:07:06,730
Khi ta cho chạy phép toán gồm nhiều giai đoạn,

131
00:07:06,730 --> 00:07:09,435
các máy chậm chạp đó sẽ kéo dài từng giai đoạn.

132
00:07:09,435 --> 00:07:12,430

133
00:07:12,430 --> 00:07:14,642
Vậy làm sao để giải quyết sự cố?

134
00:07:14,642 --> 00:07:18,500
Nếu một máy không thể hoạt động với MapReduce

135
00:07:18,500 --> 00:07:22,140
ta chỉ việc cho chạy công việc khác.

136
00:07:22,140 --> 00:07:24,850
Đối với công việc bị chậm thì sao?

137
00:07:24,850 --> 00:07:26,630
Ta cũng làm tương tự,

138
00:07:26,630 --> 00:07:29,020
cho chạy công việc khác

139
00:07:29,020 --> 00:07:31,545
để chấm dứt công việc chậm đó.

140
00:07:31,545 --> 00:07:32,045

