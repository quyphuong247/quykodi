0
00:00:00,000 --> 00:00:00,001
Tung Dinh
http://youtu.be/lJu8XWjqffE

1
00:00:00,000 --> 00:00:00,499

2
00:00:00,499 --> 00:00:03,230
Ta đã biết về máy trạng thái hữu hạn

3
00:00:03,230 --> 00:00:07,710
Giờ ta tìm hiểu cách chuyển
máy trạng thái hữu hạn

4
00:00:07,710 --> 00:00:14,210
từ thí thuyết là đồ thị chuyển trạng thái

5
00:00:14,210 --> 00:00:17,800
đến code, là software

6
00:00:17,800 --> 00:00:20,510

7
00:00:20,510 --> 00:00:26,970
Để làm được, ta phải tạo vài định nghĩa

8
00:00:26,970 --> 00:00:28,170
on some concept.

9
00:00:28,170 --> 00:00:33,800
gọi là Struct 

10
00:00:33,800 --> 00:00:38,800
1 Struct là

11
00:00:38,800 --> 00:00:48,590
cơ chế lưu trữ thông tin tổng tợp

12
00:00:48,590 --> 00:00:50,390
It's a composite store.

13
00:00:50,390 --> 00:01:00,080
Bởi nó cho phép lưu thông tin tổng hợp

14
00:01:00,080 --> 00:01:08,430
người dùng có thể dịnh dạng loại được

15
00:01:08,430 --> 00:01:11,910
Ta cũng đã biết về bộ lưu tổng hợp

16
00:01:11,910 --> 00:01:14,390
ví dụ như là 1 array

17
00:01:14,390 --> 00:01:26,480
Array cho phép lưu 1 chuỗi thông tin liên tiếp

18
00:01:26,480 --> 00:01:30,740
Và quan trọng là mọi phần tử trong array

19
00:01:30,740 --> 00:01:35,310
phải thuộc cùng kiểu dữ liệu

20
00:01:35,310 --> 00:01:38,340

21
00:01:38,340 --> 00:01:41,980
1 Struct, nói cách khác, là bộ lưu tổng hợp

22
00:01:41,980 --> 00:01:45,970
mà các phần tử có thể thuộc nhiều 
kiểu dữ liệu khác nhau

23
00:01:45,970 --> 00:01:48,080
Chúng không cần giống kiểu dữ liệu

24
00:01:48,080 --> 00:01:50,800
Nó rất quan trọng trong máy trạng thái hữu hạn

25
00:01:50,800 --> 00:01:55,120
bởi ta muốn nắm tất cả thông tin về 

26
00:01:55,120 --> 00:01:55,630
máy trạng thái hữu hạn

27
00:01:55,630 --> 00:01:57,060
Ta cần nắm các trạng thái

28
00:01:57,060 --> 00:01:58,660
inputs

29
00:01:58,660 --> 00:02:00,440
outputs

30
00:02:00,440 --> 00:02:02,950
Và chúng có thể không cùng kiểu dữ liệu

31
00:02:02,950 --> 00:02:04,740
Một số có thể 2 bits

32
00:02:04,740 --> 00:02:07,280
số khác có thể là 1 chuỗi

33
00:02:07,280 --> 00:02:08,820
cũng có thể là kiểu khác

34
00:02:08,820 --> 00:02:12,510
Và trạng thái là chỉ số, vân vân

35
00:02:12,510 --> 00:02:15,880
Cái ta cần là 1 định nghĩa mới

36
00:02:15,880 --> 00:02:17,980
Và nó là 1 struct

37
00:02:17,980 --> 00:02:25,710
Để hiểu rõ hơn thì ta có 1 ví dụ thực tế

38
00:02:25,710 --> 00:02:29,760
Giả sử ta đang làm game

39
00:02:29,760 --> 00:02:31,330
đây, 1 game

40
00:02:31,330 --> 00:02:34,940
Trong game này, đây là màn hình game

41
00:02:34,940 --> 00:02:38,730
ta có 1 player

42
00:02:38,730 --> 00:02:41,570
Đây, 1 player trong game

43
00:02:41,570 --> 00:02:44,240
Và player này có vài thuộc tính nhất định

44
00:02:44,240 --> 00:02:50,380
ví dụ, player này trong không gian 2D

45
00:02:50,380 --> 00:02:54,290
player này hiện tại đang ở điểm này

46
00:02:54,290 --> 00:02:57,710
Ta muốn lưu mọi thông tin 
về player này

47
00:02:57,710 --> 00:03:05,230
So what I do is I say,
OK, I have a player,

48
00:03:05,230 --> 00:03:08,160
and I want to store
information about this player.

49
00:03:08,160 --> 00:03:10,150
Thông tin gì ta cần lưu

50
00:03:10,150 --> 00:03:12,680
Ta có 1 player

51
00:03:12,680 --> 00:03:18,400
và nó là 1 kiểu mới, nó không phải là 1 integer

52
00:03:18,400 --> 00:03:19,590
cũng chẳng phải 1 long

53
00:03:19,590 --> 00:03:20,526
không phải 1 short

54
00:03:20,526 --> 00:03:21,400
không là 1 character

55
00:03:21,400 --> 00:03:22,940
không là 1 string

56
00:03:22,940 --> 00:03:23,980
cũng không là 1 array

57
00:03:23,980 --> 00:03:26,050
mà là 1 dạng mới

58
00:03:26,050 --> 00:03:27,480
gọi là struct

59
00:03:27,480 --> 00:03:31,600
Và ta sẽ liệt kệ các thuộc tính nó có

60
00:03:31,600 --> 00:03:33,670
Để đơn giản 

61
00:03:33,670 --> 00:03:36,430
ta cho player này có 3 thuộc tính

62
00:03:36,430 --> 00:03:46,573
nó có toạ độ, giả sử là unsigned char

63
00:03:46,573 --> 00:03:54,860
biểu diễn trên trục x và trục y

64
00:03:54,860 --> 00:03:58,980
Đây là trục x, còn đây là y

65
00:03:58,980 --> 00:04:04,755
Ta gọi đây là toạ độ x, 
còn đây là y

66
00:04:04,755 --> 00:04:14,640

67
00:04:14,640 --> 00:04:18,550
đây có thể là gốc toạ độ

68
00:04:18,550 --> 00:04:19,980
và đây là x và y

69
00:04:19,980 --> 00:04:23,480
Hoặc đây có thể là toạ độ, thì x và y 
sẽ là khác

70
00:04:23,480 --> 00:04:25,090
Nhưng nó không quan trọng

71
00:04:25,090 --> 00:04:30,880
Cái ta cũng cần lưu về player này là điểm số 


72
00:04:30,880 --> 00:04:40,340
Ta đã có unsigned, unsigned nữa, có thể là 1 short

73
00:04:40,340 --> 00:04:46,300
cho ta biết điểm số player là bao nhiêu

74
00:04:46,300 --> 00:04:48,946
Nó có điểm tại thời điểm nào đó

75
00:04:48,946 --> 00:04:50,570
Đó là 3 thuộc tính 

76
00:04:50,570 --> 00:04:52,010
ta xác định

77
00:04:52,010 --> 00:04:56,720
Và kết thúc bằng chấm phẩy ";"

78
00:04:56,720 --> 00:05:00,580
Đây là kiểu dữ liệu mới, gọi là player

79
00:05:00,580 --> 00:05:07,440
Bây giờ, nếu ta muốn, có thể làm thế này, 
gõ typedef

80
00:05:07,440 --> 00:05:10,150

81
00:05:10,150 --> 00:05:21,170
Ta định nghĩa 1 kiểu dữ liệu mới gọi là player

82
00:05:21,170 --> 00:05:24,390

83
00:05:24,390 --> 00:05:33,520
Cái struct player mà tôi vừa mô tả trên kia

84
00:05:33,520 --> 00:05:36,620
sẽ chuyển từ trên kia xuống, ta gọi nó là PType

85
00:05:36,620 --> 00:05:42,620

86
00:05:42,620 --> 00:05:48,730
Và nó dễ dàng hơn để định nghĩa

87
00:05:48,730 --> 00:05:55,410
ví dụ, PType P1, player 1, là dạng PType

88
00:05:55,410 --> 00:06:05,610

89
00:06:05,610 --> 00:06:11,070
Khi định nghĩa thế này, trong memory
sẽ có 1 khoảng trống

90
00:06:11,070 --> 00:06:11,580
được cấp 

91
00:06:11,580 --> 00:06:17,820
Sẽ có 1 character về toạ độ x

92
00:06:17,820 --> 00:06:20,770
Đây là P1

93
00:06:20,770 --> 00:06:26,780
Và P1 có thuộc tính đầu tiên, là toạ độ x, 
cái thứ hai 

94
00:06:26,780 --> 00:06:31,170
là toạ độ y, cả 2 đều à character, 
dài 8 bits

95
00:06:31,170 --> 00:06:36,840
Và rồi ta có điểm số, dài 2 bytes

96
00:06:36,840 --> 00:06:41,950
Vậy là 2 bytes, 1 byte, 1 byte

97
00:06:41,950 --> 00:06:45,280
Bởi điểm số dài 2 bytes

98
00:06:45,280 --> 00:06:51,470
Giờ, ta có thể khai báo 1 người dùng, 
là 1 player như vậy

99
00:06:51,470 --> 00:06:56,310
Nếu ta muốn tạo toạ độ cho player

100
00:06:56,310 --> 00:06:58,580
Đây là phần khai báo, còn phần khác trong code

101
00:06:58,580 --> 00:07:03,500
giả sử ta muốn tạo toạ độ cho player

102
00:07:03,500 --> 00:07:04,810
Ta có thể làm được

103
00:07:04,810 --> 00:07:08,750
Để thay đổi thuộc tính player

104
00:07:08,750 --> 00:07:13,205
ta dùng phép toán dot

105
00:07:13,205 --> 00:07:20,580

106
00:07:20,580 --> 00:07:26,710
để truy xuất những thuộc tính trong 1 struct

107
00:07:26,710 --> 00:07:33,800
Ta viết P1.xpos

108
00:07:33,800 --> 00:07:42,270
toạ độ x bằng, giả sử là 45

109
00:07:42,270 --> 00:07:47,750
Bởi nó là 1 char, ta biết giá trị nó có thể chạy

110
00:07:47,750 --> 00:07:53,230
bất kể từ 0 đến 255, vì char có 8 bits

111
00:07:53,230 --> 00:07:55,280
Nên có lẽ đây là toạ độ x

112
00:07:55,280 --> 00:07:58,370
và ta tạo toạ đọ y cho player luôn

113
00:07:58,370 --> 00:08:03,230
giả sử toạ độ y bằng 50

114
00:08:03,230 --> 00:08:09,675
Đó là cách ta truy xuất và điều chỉnh
thuộc tính của struct

115
00:08:09,675 --> 00:08:11,910
Và ta cũng có thể làm, P1.points

116
00:08:11,910 --> 00:08:15,100

117
00:08:15,100 --> 00:08:21,130
để bắt đầu code, thì giả sử là 0

118
00:08:21,130 --> 00:08:25,120
Đó là cách khởi tạo chuỗi giá trị

119
00:08:25,120 --> 00:08:31,600
Ta có thể khởi tạo từng player như vậy

120
00:08:31,600 --> 00:08:34,020
cũng có thể khởi tạo 1 array players

121
00:08:34,020 --> 00:08:44,660
có thể là 1 phần trong game, ta có thể
có một loạt tàu

122
00:08:44,660 --> 00:08:48,330
giả sử là tàu địch

123
00:08:48,330 --> 00:08:52,330
và ta có 1 array ships

124
00:08:52,330 --> 00:08:55,040
gồm 5 tàu

125
00:08:55,040 --> 00:08:59,380
Ta có thể định nghĩa chúng thế này

126
00:08:59,380 --> 00:09:04,360
ví dụ: PType, chúng cũng thuộc kiểu player

127
00:09:04,360 --> 00:09:08,340
nhưng là dạng khác, là kẻ thù

128
00:09:08,340 --> 00:09:11,250
Ta gọi chúng là ships

129
00:09:11,250 --> 00:09:15,420
Và ta khai báo có 5 ships

130
00:09:15,420 --> 00:09:22,190
Nếu làm như vậy, trong memory, 
sẽ có vài khoảng trống

131
00:09:22,190 --> 00:09:29,630
ta không khai báo 1 player, nhưng nhiều players

132
00:09:29,630 --> 00:09:34,790
So this is multiple players.

133
00:09:34,790 --> 00:09:37,830
Và ta gọi khoảng trống này là ships

134
00:09:37,830 --> 00:09:42,300
đây là ships[0]

135
00:09:42,300 --> 00:09:47,170
và ships[0] có 3 thuộc tính

136
00:09:47,170 --> 00:09:56,470
rồi tới ships[1], cũng có thuộc tính vậy

137
00:09:56,470 --> 00:10:00,010
Và ta vẽ đường này để dễ phân biệt

138
00:10:00,010 --> 00:10:07,930
Và mặc dù ta có 2 ships rồi, nhưng

139
00:10:07,930 --> 00:10:10,440
số thứ tự chạy từ 0 đến 4

140
00:10:10,440 --> 00:10:13,040
Cái cuối này cũng có 3 thuộc tính

141
00:10:13,040 --> 00:10:17,350

142
00:10:17,350 --> 00:10:19,940
và liên tiếp được phân bổ

143
00:10:19,940 --> 00:10:27,030
Giờ thì xem cách để dùng strutures

144
00:10:27,030 --> 00:10:30,630
và điều khiển vị trí của tàu

145
00:10:30,630 --> 00:10:34,460
Nếu bạn nhớ, ta đã nói, 

146
00:10:34,460 --> 00:10:39,500
ta có 1 mằn hình, ta có tàu

147
00:10:39,500 --> 00:10:41,595
5 chiếc

148
00:10:41,595 --> 00:10:44,330

149
00:10:44,330 --> 00:10:47,660
đây, 5 chiếc trên màn hình

150
00:10:47,660 --> 00:10:52,840
Và giờ, ta viết 1 routine mà mang 1 con tàu 

151
00:10:52,840 --> 00:10:58,590
chuyển về giữa màn hình

152
00:10:58,590 --> 00:11:02,020
Để làm được, ta có 1 subroutine sẽ viết

153
00:11:02,020 --> 00:11:04,185
gọi là MoveCenter

154
00:11:04,185 --> 00:11:09,030

155
00:11:09,030 --> 00:11:14,710
Và ta sẽ cho vào giá trị con tàu

156
00:11:14,710 --> 00:11:16,080
mà ta muốn di chuyển

157
00:11:16,080 --> 00:11:22,110
Ta sẽ đưa vào, long i

158
00:11:22,110 --> 00:11:26,720
nghĩa là ta đưa thông số tàu thứ i vào để di chuyển

159
00:11:26,720 --> 00:11:31,420
Bởi subroutine không trả ra giá trị gì, 
nó chỉ làm thôi

160
00:11:31,420 --> 00:11:33,590
nên ta viết void

161
00:11:33,590 --> 00:11:41,980
Cái subroutine này, đầu tiên, lấy array ships

162
00:11:41,980 --> 00:11:46,550
và đưa ra ships[i] từ array

163
00:11:46,550 --> 00:11:49,450
là structure

164
00:11:49,450 --> 00:11:54,240
nên là dùng phép toàn dot để truy xuất
giá trị trong structure

165
00:11:54,240 --> 00:12:08,070
Ta thiết lập .xpos = 128 để di chuyển
toạ độ x của tàu

166
00:12:08,070 --> 00:12:17,770
về 128 và .ypos = 128

167
00:12:17,770 --> 00:12:19,400
Đó là toạ độ mới

168
00:12:19,400 --> 00:12:32,320
Vậy ta đã thiết lập toạ độ x và y

169
00:12:32,320 --> 00:12:38,370
Và ta thống nhất rằng mỗi khi nó đi tới vị trí giữa

170
00:12:38,370 --> 00:12:45,030
ta có thêm điểm

171
00:12:45,030 --> 00:12:50,240
Ta sẽ lấy ships[i]

172
00:12:50,240 --> 00:12:53,550
check xem điểm hiện tại

173
00:12:53,550 --> 00:12:58,260
và so sánh với điểm tối đa

174
00:12:58,260 --> 00:13:06,120
Vậy nếu nó thấp hơn 65535, bởi vì định dạng của points

175
00:13:06,120 --> 00:13:11,450
là unsigned short, và nó là giá tri lớn nhất

176
00:13:11,450 --> 00:13:13,680
65535 

177
00:13:13,680 --> 00:13:19,930
Vậy giá trị tối đa ta đạt được là 65535 cho 1 short

178
00:13:19,930 --> 00:13:22,500
Rồi ta check với các giới hạn rào

179
00:13:22,500 --> 00:13:32,210
Nếu nó đúng, ta sẽ cộng 1 vào points

180
00:13:32,210 --> 00:13:39,110
,points++

181
00:13:39,110 --> 00:13:40,620
rồi chấm phẩy ";"

182
00:13:40,620 --> 00:13:41,540
cuối cùng là đóng ngoặc lại

183
00:13:41,540 --> 00:13:45,140

184
00:13:45,140 --> 00:13:47,930
Khi được gọi, cái subroutine này

185
00:13:47,930 --> 00:13:57,800
sẽ thay đổi vị trí của tàu thứ i trong game.

186
00:13:57,800 --> 00:13:58,866
