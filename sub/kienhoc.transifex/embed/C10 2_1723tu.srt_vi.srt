0
00:00:00,000 --> 00:00:00,001
http://youtu.be/l3kU-OjP5cY
Tung Dinh _ VGU

1
00:00:00,000 --> 00:00:00,500

2
00:00:00,500 --> 00:00:06,665
Trong video này, ta sẽ học về máy trạng 
thái hữu hạn

3
00:00:06,665 --> 00:00:09,770

4
00:00:09,770 --> 00:00:17,280
1 máy trạng thái hữu hạn là định nghĩa

5
00:00:17,280 --> 00:00:23,960
ta dùng để mô tả bất kì hệ thống nào 

6
00:00:23,960 --> 00:00:32,130
được biểu diễn bằng sơ đồ này

7
00:00:32,130 --> 00:00:38,240
nó có nhiều inputs

8
00:00:38,240 --> 00:00:40,810
và nó tạo ra nhiều outputs

9
00:00:40,810 --> 00:00:44,140

10
00:00:44,140 --> 00:00:48,050
Và nó cũng biểu diễn logic

11
00:00:48,050 --> 00:00:55,810
thể hiện ở nhiều trạng thái khác nhau
của hệ thống

12
00:00:55,810 --> 00:01:02,410
Nó tương tác với inputs, thay đổi trạng thái, 
và đưa ra outputs

13
00:01:02,410 --> 00:01:04,730
Bất kì hệ thống nào được mô tả như vậy

14
00:01:04,730 --> 00:01:08,110
đều có thể biểu diễn bằng máy trạng thái
hữu hạn

15
00:01:08,110 --> 00:01:14,110
Vậy để biểu diễn 1 máy trạng thái hữu hạn, 
ta cần 5 thứ

16
00:01:14,110 --> 00:01:18,920
gọi là 5 nhóm

17
00:01:18,920 --> 00:01:21,285
đó là

18
00:01:21,285 --> 00:01:32,040
tập hợp inputs

19
00:01:32,040 --> 00:01:35,785
thứ hai là tập hợp outputs tạo ra

20
00:01:35,785 --> 00:01:40,790

21
00:01:40,790 --> 00:01:46,180
thứ ba là tập hợp các trạng thái hệ thống chạy

22
00:01:46,180 --> 00:01:49,230

23
00:01:49,230 --> 00:01:54,470
thứ tư là mô tả cách chuyển từ trạng thái này
sang trạng thái khác

24
00:01:54,470 --> 00:01:58,130
bằng việc tương tác với inputs

25
00:01:58,130 --> 00:02:03,960
gọi là thay đổi trạng thái

26
00:02:03,960 --> 00:02:09,229
Thay đổi trạng thái, như tôi nói, nó là việc
chuyển từ trạng thái này

27
00:02:09,229 --> 00:02:10,090
sang trạng thái khác

28
00:02:10,090 --> 00:02:12,400
Ta dùng 2 cách để mô tả

29
00:02:12,400 --> 00:02:18,960
Đầu tiên là đồ thị thay đổi trạng thái, hoặc ma trận

30
00:02:18,960 --> 00:02:22,020
Cách này dùng thường xuyên

31
00:02:22,020 --> 00:02:26,050
Trong module này

32
00:02:26,050 --> 00:02:31,360
ta sẽ chủ yếu dùng 1 đồ thị trạng thái

33
00:02:31,360 --> 00:02:35,920
gọi là STG 

34
00:02:35,920 --> 00:02:43,673
Và nhóm cuối là xác định outputs

35
00:02:43,673 --> 00:02:53,410

36
00:02:53,410 --> 00:02:58,880
Nó là việc gì quyết định outputs

37
00:02:58,880 --> 00:03:00,640
Cách nào để tạo ra output

38
00:03:00,640 --> 00:03:05,570
Điều kiện nào cần thoả để có output

39
00:03:05,570 --> 00:03:11,640
Bây giờ, loại máy ta học sẽ là Moore

40
00:03:11,640 --> 00:03:17,160

41
00:03:17,160 --> 00:03:23,420
Khi ta tạo 1 trạng thái, thì cái tiếp theo sẽ phụ thuộc

42
00:03:23,420 --> 00:03:33,845
và 1 function của  trạng thái hiện tại
và input

43
00:03:33,845 --> 00:03:37,410

44
00:03:37,410 --> 00:03:44,880
Cũng vậy, output là 1 function, ta gọi là g()

45
00:03:44,880 --> 00:03:53,240
là function của trạng thái hiện tại

46
00:03:53,240 --> 00:04:00,650
Nói cách khác, trong máy Moore

47
00:04:00,650 --> 00:04:06,480
có sự tương ứng trực tiếp giữ outputs và trạng thái

48
00:04:06,480 --> 00:04:12,330
Đó là, đối với mỗi trạng thái, có 1 output
nhất định 

49
00:04:12,330 --> 00:04:16,080
Khoá học này, ta sẽ không học về

50
00:04:16,080 --> 00:04:22,380
1 loại máy khác

51
00:04:22,380 --> 00:04:27,590
gọi là Mealy

52
00:04:27,590 --> 00:04:34,720
Máy Mealy có vẻ giống nhau, trừ việc

53
00:04:34,720 --> 00:04:38,540
là trạng thái tiếp theo phụ thuộc
vào trạng thái hiện tại và input

54
00:04:38,540 --> 00:04:50,750
Nhưng output của máy Mealy là 1 function 
không chỉ của trạng thái hiện tại

55
00:04:50,750 --> 00:04:56,580
mà còn của input

56
00:04:56,580 --> 00:05:01,810
Ta không học về máy Mealy bởi nó hơi phức tạp

57
00:05:01,810 --> 00:05:07,450
Nhưng ta có thể nói, mọi việc máy Mealy 
có thể làm

58
00:05:07,450 --> 00:05:09,380
thì Moore cũng làm được

59
00:05:09,380 --> 00:05:11,790
Vậy, chúng mạnh ngang nhau

60
00:05:11,790 --> 00:05:15,200
Và bởi vậy, ta chọn cái đơn giản hơn, đó là máy Moore

61
00:05:15,200 --> 00:05:16,090
trong khoá học này

62
00:05:16,090 --> 00:05:19,170

63
00:05:19,170 --> 00:05:22,760
Ok chưa, nhưng nó hoạt động thế nào?

64
00:05:22,760 --> 00:05:25,840
Lấy 1 ví dụ nhỏ để áp dụng

65
00:05:25,840 --> 00:05:29,710
Vấn đề ta sẽ làm là

66
00:05:29,710 --> 00:05:33,130
nêu vấn đề

67
00:05:33,130 --> 00:05:35,265
xoá bảng đi

68
00:05:35,265 --> 00:05:36,530
Bắt đầu nêu vấn đề

69
00:05:36,530 --> 00:05:41,770
Ta sẽ áp dụng nó, hoặc 1 hệ thống

70
00:05:41,770 --> 00:05:49,630
như một máy nhận dạng

71
00:05:49,630 --> 00:06:02,620
nhận dạng có chuỗi

72
00:06:02,620 --> 00:06:29,230
bits đang đọc có lẻ số các số 1

73
00:06:29,230 --> 00:06:32,720
Nói cách khác, đây là hệ thống 

74
00:06:32,720 --> 00:06:37,560
ta sẽ đọc mỗi bit một, qua vài ports

75
00:06:37,560 --> 00:06:39,530
Đừng lo lắng về port quá

76
00:06:39,530 --> 00:06:41,040
Ta sẽ đọc 1 bit

77
00:06:41,040 --> 00:06:46,370
Giả sử chuỗi bit thế này

78
00:06:46,370 --> 00:06:47,335
đây là input

79
00:06:47,335 --> 00:06:50,160

80
00:06:50,160 --> 00:06:52,270
và đây từng bit ta đọc

81
00:06:52,270 --> 00:06:55,400
Ví dụ 1

82
00:06:55,400 --> 00:07:09,000
0 0 1 0 0 1 1 0 và vân vân

83
00:07:09,000 --> 00:07:11,460
Đó là chuỗi input

84
00:07:11,460 --> 00:07:16,070
Giờ khi đọc 1 bit, cái ta muốn là

85
00:07:16,070 --> 00:07:19,970
có phải số các số 1 là lẻ hay không

86
00:07:19,970 --> 00:07:23,110
Đây là bit đầu tiên ta đọc, ta sẽ cho ra 1 output

87
00:07:23,110 --> 00:07:24,225
Đây là output đầu tiên

88
00:07:24,225 --> 00:07:28,040

89
00:07:28,040 --> 00:07:32,280
Và khi ta đọc bit đầu, tới giờ thì nó vẫn là 1 bit 1

90
00:07:32,280 --> 00:07:36,050
vậy output phải là 1

91
00:07:36,050 --> 00:07:37,850
Tiếp theo, ta dọc bit thứ 2 là 0

92
00:07:37,850 --> 00:07:44,759
và 0 làm cho chuỗi các số 1 vẫn là lẻ

93
00:07:44,759 --> 00:07:45,800
bởi chỉ có 1 số 1

94
00:07:45,800 --> 00:07:47,960
vậy tiếp tục output là 1

95
00:07:47,960 --> 00:07:49,190
ta đọc 1 số 0 nữa

96
00:07:49,190 --> 00:07:50,850
và tiếp tục là 1

97
00:07:50,850 --> 00:07:51,720
ta đọc 1 số 1

98
00:07:51,720 --> 00:07:56,240
và output là 0, đúng rồi, bởi vì có 2 số 1

99
00:07:56,240 --> 00:07:59,910
Tới đây, có 2 số 1, ta viết 0

100
00:07:59,910 --> 00:08:02,200
Ta đọc tiếp 1 số 0 nữa

101
00:08:02,200 --> 00:08:03,720
chẳng thay đổi gì

102
00:08:03,720 --> 00:08:05,400
cũng không

103
00:08:05,400 --> 00:08:10,280
Và khi ta đọc bit 1 này, ta cho ra 1, bởi ta có 3 số 1

104
00:08:10,280 --> 00:08:16,930
Và bây giờ, t đọc 1 số 1 nữa, cho ra 0, và 0, 
và vân vân

105
00:08:16,930 --> 00:08:19,540
Nói cách khác, nó giữ 1 điểm rồi chạy

106
00:08:19,540 --> 00:08:21,390
xem đọc được bao nhiêu số 1 rồi

107
00:08:21,390 --> 00:08:25,810
Đó là hệ thống mà tôi muốn mô tả

108
00:08:25,810 --> 00:08:30,120
Đầu tiên là xác định các thành phần

109
00:08:30,120 --> 00:08:33,470
viết ra hết 

110
00:08:33,470 --> 00:08:39,480
Cái đầu tiền là input của máy

111
00:08:39,480 --> 00:08:41,990
Giả sử là từng bit

112
00:08:41,990 --> 00:08:48,070
input là 1 bit, có thể là 0 hoặc 1

113
00:08:48,070 --> 00:08:51,920
output, cũng là từng bit

114
00:08:51,920 --> 00:08:59,130
cũng là 0 hoặc 1, để diễn tả số các số 1

115
00:08:59,130 --> 00:09:01,270
chẵn hoặc lẻ

116
00:09:01,270 --> 00:09:05,620
Chỉ số ở đây là 1, nghĩa là lẻ

117
00:09:05,620 --> 00:09:08,200
0 nghĩa là chẵn

118
00:09:08,200 --> 00:09:12,020
Cái thứ ba là trạng thái

119
00:09:12,020 --> 00:09:19,090
là logic để xác định,

120
00:09:19,090 --> 00:09:24,130
nếu ta muốn coi biết bao nhiêu số 1
đã được đọc

121
00:09:24,130 --> 00:09:27,860
và chẵn hay lẻ, ta sẽ cần 2 trạng thái

122
00:09:27,860 --> 00:09:32,800
Và ta sẽ mô tả 2 trạng thái bằng 
các vòng tròn

123
00:09:32,800 --> 00:09:36,940
Ta có 2 trạng thái

124
00:09:36,940 --> 00:09:48,330
ta có 1 cái lẻ và 1 cái chẵn

125
00:09:48,330 --> 00:09:55,580
Ta gọi chúng là trạng thái chẵn và lẻ

126
00:09:55,580 --> 00:09:59,220
Ta có hệ thống bắt đầu tại trạng thái lẻ

127
00:09:59,220 --> 00:10:00,910
bởi ta chưa đọc con số gì hết

128
00:10:00,910 --> 00:10:04,430
Và 0 số 1 là chẵn

129
00:10:04,430 --> 00:10:10,310
Ta thiết kế trạng thái khởi đầu bằng việc vẽ
mũi tên về nó

130
00:10:10,310 --> 00:10:13,490
Và giờ thì ta làm tới chuyển trạng thái

131
00:10:13,490 --> 00:10:15,055
Đây là 1 đồ thị

132
00:10:15,055 --> 00:10:19,670
Bước thứ 4 là đồ thị chuyển trạng thái

133
00:10:19,670 --> 00:10:25,120
Đồ thị chuyển trạng thái có nodes, 
đó là các vòng tròng và mũi tên

134
00:10:25,120 --> 00:10:30,110
Đối với mũi tên, ta biết được cách
để chuyển từ trạng thái này

135
00:10:30,110 --> 00:10:31,200
tới trạng thái khác

136
00:10:31,200 --> 00:10:35,460
Giờ ta đang ở trạng thái chẵn, và ta đọc 1

137
00:10:35,460 --> 00:10:38,200
nghĩa là số các số 1 trở thành lẻ

138
00:10:38,200 --> 00:10:40,220
Vậy ta vẽ đường thế này

139
00:10:40,220 --> 00:10:45,900
Nghĩa là nếu ta đọc 1 số 1, ta tới đây

140
00:10:45,900 --> 00:10:52,590
Nói cách khác, nếu ta đọc 1 số 0, 
ta vẫn ở trạng thái này

141
00:10:52,590 --> 00:10:56,640
Vậy, mũi tên từ trạng thái này tới cái khác

142
00:10:56,640 --> 00:11:01,040
diễn tả có input, ta viết input ở đây

143
00:11:01,040 --> 00:11:04,150
và nếu input là 0, nó vẫn là chẵn

144
00:11:04,150 --> 00:11:09,910
Nếu input là 1 thì trạng thái hiện tại chẵn, 
sẽ chuyển thành lẻ

145
00:11:09,910 --> 00:11:12,870
Giờ ta tính tất cả trường hợp xảy ra 
với trạng thái

146
00:11:12,870 --> 00:11:15,800
bởi vì chỉ có 2 inputs, 0 hoặc 1

147
00:11:15,800 --> 00:11:18,180
Ở đây lẻ

148
00:11:18,180 --> 00:11:18,820
giả sử ta đọc 

149
00:11:18,820 --> 00:11:22,260
0, nó vẫn là lẻ

150
00:11:22,260 --> 00:11:28,430
nếu ta đọc 1 ở trạng thái này, 
thì ta chuyển sang trạng thái chẵn

151
00:11:28,430 --> 00:11:31,035
bởi ta có 2 số 1

152
00:11:31,035 --> 00:11:33,110
thế là xong

153
00:11:33,110 --> 00:11:35,690
Đó là đồ thị trạng thái

154
00:11:35,690 --> 00:11:41,030
Yếu tố thứ 5, là xác định output

155
00:11:41,030 --> 00:11:46,480
Phải nhớ, tôi nó có sự liên hệ 
tương ứng trong máy Moore

156
00:11:46,480 --> 00:11:46,980
FSM.

157
00:11:46,980 --> 00:11:49,510

158
00:11:49,510 --> 00:11:52,800
giữa 1 trạng thái và output

159
00:11:52,800 --> 00:11:56,570
Vậy ta viết output cho trạng thái

160
00:11:56,570 --> 00:12:03,290
Giả sử ta có chẵn, vậy ta phải cho ra 0

161
00:12:03,290 --> 00:12:07,710
và nếu ta đang lẻ, ta phải cho ra 1

162
00:12:07,710 --> 00:12:15,230
Vậy, đó là các phần tử của 1 máy trạng thái 
hữu hạn

163
00:12:15,230 --> 00:12:18,620
trong đó, đồ thị chuyển trạng thái 
mô tả tất cả

164
00:12:18,620 --> 00:12:21,100
thứ mà ta muốn trong hệ thống

165
00:12:21,100 --> 00:12:26,250
Và ta phải chắc chắn rằng, mọi inputs
phải tương ứng với mọi trạng thái

166
00:12:26,250 --> 00:12:31,120
và ta cũng phải biết outputs là gì

167
00:12:31,120 --> 00:12:39,330
Bây giờ, nếu ta muốn test máy trạng thái 
hữu hạn này với input có sẵn

168
00:12:39,330 --> 00:12:41,530
ta sẽ làm thế này

169
00:12:41,530 --> 00:12:44,220

170
00:12:44,220 --> 00:12:47,500
Số 1 đầu tiên ta đọc được, ta chuyển từ
trạng thái này

171
00:12:47,500 --> 00:12:52,710
nhớ rằng, đây là trạng thái đầu tiên, 
do đó ta đi từ đây sang đây

172
00:12:52,710 --> 00:12:55,510
Ta làm bước chuyển này bởi vì ta đọc 1 số 1

173
00:12:55,510 --> 00:12:59,320
 Và khi ta đọc 1 số 0, ta vẫn ở
trạng thái này

174
00:12:59,320 --> 00:13:01,960

175
00:13:01,960 --> 00:13:06,370
Bước chuyển ở đây cho ra 1

176
00:13:06,370 --> 00:13:09,350
đó là số 1 đầu tiên cho ra

177
00:13:09,350 --> 00:13:11,490
Ta tới đây

178
00:13:11,490 --> 00:13:17,260
Giờ ta đọc 1 số 0, và ta ở đây, cho ra thêm 1 số 1 nữa

179
00:13:17,260 --> 00:13:22,710
1 số 0 nữa, cho ra số 1 thứ 3

180
00:13:22,710 --> 00:13:25,500
Đó là tất cả số nãy cho ra nãy giờ

181
00:13:25,500 --> 00:13:29,630
Và rồi ta đọc số 1, ta phải quay lại trạng thái trước

182
00:13:29,630 --> 00:13:32,200
Và ta ở đây, 

183
00:13:32,200 --> 00:13:36,290
cho ra 0, nó đây này

184
00:13:36,290 --> 00:13:40,340
Và rồi ta đọc 1 số 0 nữa, ta vẫn ở đây

185
00:13:40,340 --> 00:13:47,160
cho ra số 0 thứ 2, nó đây

186
00:13:47,160 --> 00:13:51,130
1 số 0 nữa, ta cho ra đây

187
00:13:51,130 --> 00:13:52,400
Và 1 số 1

188
00:13:52,400 --> 00:13:58,560
Làm ta chuyển sang trạng thái này lần nữa,
và rồi ta trở lại trạng thái này

189
00:13:58,560 --> 00:14:03,070
cho ra 1, tiếp tục, vân vân

190
00:14:03,070 --> 00:14:08,142
Đó là test thử máy trạng thái hữu hạn 
với input có sẵn

191
00:14:08,142 --> 00:14:08,642
