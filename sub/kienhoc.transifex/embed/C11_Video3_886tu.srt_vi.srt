0
00:00:00,000 --> 00:00:00,001
http://youtu.be/gGtm9PN44Uo
Tung Dinh _ VGU

1
00:00:00,000 --> 00:00:00,520

2
00:00:00,520 --> 00:00:04,600
Giờ ta quan sát software để khởi tạo UART

3
00:00:04,600 --> 00:00:07,870
Ta sẽ chạy nó mỗi lần bật lên

4
00:00:07,870 --> 00:00:10,470
Có 3 thứ ta cần làm

5
00:00:10,470 --> 00:00:13,570
Đầu tiên, ta phải chọn sử dụng UART nào

6
00:00:13,570 --> 00:00:16,780
Có 8 UART, ta chọn UART1

7
00:00:16,780 --> 00:00:19,540
Vậy, ta bật clock cho UART1

8
00:00:19,540 --> 00:00:24,570
Chú ý, ta sẽ chỉnh register cho UART1

9
00:00:24,570 --> 00:00:28,650
Thứ hai, ta phải chọn pins 

10
00:00:28,650 --> 00:00:34,380
ta chọn 2 pins này ở portC 

11
00:00:34,380 --> 00:00:37,680
Ta sẽ bật clock cho portC

12
00:00:37,680 --> 00:00:45,670
rồi set register cho bits PC5 và PC4

13
00:00:45,670 --> 00:00:48,150
Chúng sẽ trở thành UART bits

14
00:00:48,150 --> 00:00:52,830
Ta sẽ kích hoạt những pins này thành 
digital outputs hoặc inputs

15
00:00:52,830 --> 00:00:55,240
trên PC5 và PC4

16
00:00:55,240 --> 00:01:02,320
Cuối cùng là 2 bits trong register PCTL

17
00:01:02,320 --> 00:01:06,670
được chọn làm chức năng thay thế. là UART

18
00:01:06,670 --> 00:01:10,720
ta set 22 trong 2 bits của PCTL

19
00:01:10,720 --> 00:01:15,080
sẽ set PC5 và PC4 thành UARTs

20
00:01:15,080 --> 00:01:18,886
và chúng không phải analog, ta tắt analog đi

21
00:01:18,886 --> 00:01:20,760
Jon, ta có cần làm gì

22
00:01:20,760 --> 00:01:23,665
với register hướng cho PortC không?

23
00:01:23,665 --> 00:01:24,540
Không cần

24
00:01:24,540 --> 00:01:32,040
Bởi UART thì cố định, PC5 sẽ là output,
và PC4 là input

25
00:01:32,040 --> 00:01:36,590
Cái đó tự động set khi chúng là UART

26
00:01:36,590 --> 00:01:37,770
Ok

27
00:01:37,770 --> 00:01:40,860
Điều thứ 3 ta phải làm là set tốc độ truyền tải

28
00:01:40,860 --> 00:01:43,780
Nó được set trong 2 registers này

29
00:01:43,780 --> 00:01:46,000
Giờ ta quan sát phần tính toán

30
00:01:46,000 --> 00:01:47,950
ở đây

31
00:01:47,950 --> 00:01:52,130
Ta bắt đầu với bus clock, 

32
00:01:52,130 --> 00:01:54,250
ở đây là 80 Mhz

33
00:01:54,250 --> 00:01:59,210
16 là hằng số, luôn luôn là 16

34
00:01:59,210 --> 00:02:01,550
và đây là input

35
00:02:01,550 --> 00:02:07,312
ta set tốc độ là 115200 bits/s

36
00:02:07,312 --> 00:02:09,270
Đây là tốc độ chuẩn

37
00:02:09,270 --> 00:02:11,530
sử dụng trong thông tin liên lạc

38
00:02:11,530 --> 00:02:13,590
Và nó cũng nhanh nữa

39
00:02:13,590 --> 00:02:18,710
Khi tính toán, ta có 43.40278

40
00:02:18,710 --> 00:02:22,360
ta lấy 43 và để ở đây

41
00:02:22,360 --> 00:02:25,120
lấy phần dư

42
00:02:25,120 --> 00:02:28,720
và tạo 1 phân số nhị phân bằng việc nhân với 64

43
00:02:28,720 --> 00:02:31,380
nó luôn luôn là 64

44
00:02:31,380 --> 00:02:34,530
Trong trường hợp này, ta có 26

45
00:02:34,530 --> 00:02:36,400
để ở đây

46
00:02:36,400 --> 00:02:39,590
Vậy ta có phần nguyên và phần dư

47
00:02:39,590 --> 00:02:45,310
của phép tính khi ta set tốc độ ta cần

48
00:02:45,310 --> 00:02:46,630
Chính xác

49
00:02:46,630 --> 00:02:49,820
Tóm lại, có 3 thứ ta cần làm

50
00:02:49,820 --> 00:02:54,330
Đầu tiên là bật clock cho UART1

51
00:02:54,330 --> 00:03:00,620
Hai là chọn pins sử dụng, ở đây là PC5 và PC4

52
00:03:00,620 --> 00:03:03,050
Và ba, ta sẽ set tốc độ truyền tải

53
00:03:03,050 --> 00:03:05,410
bằng việc set 2 giá trị vào trong 2 registers

54
00:03:05,410 --> 00:03:08,290

55
00:03:08,290 --> 00:03:09,650
O

56
00:03:09,650 --> 00:03:14,920
Khi ta đã khởi tạo UART cho truyền và nhận

57
00:03:14,920 --> 00:03:20,400
trên 1 port nhất định, ta phải viết driver cho thiết bị

58
00:03:20,400 --> 00:03:23,310
dùng cho input và output

59
00:03:23,310 --> 00:03:25,880
Cái đầu tiên quan tâm là InChar

60
00:03:25,880 --> 00:03:33,376
code nhận, chỗ ta đọc input

61
00:03:33,376 --> 00:03:37,370

62
00:03:37,370 --> 00:03:39,860
Dùng để đọc input character

63
00:03:39,860 --> 00:03:42,850
là 8 bits

64
00:03:42,850 --> 00:03:47,640
Nếu ta muốn đọc nó, theo logic

65
00:03:47,640 --> 00:03:54,210
ta phải check cờ RXFE

66
00:03:54,210 --> 00:04:00,240
Nếu cờ là 1, FIFO trống

67
00:04:00,240 --> 00:04:03,020
nghĩa là ta không còn gì để làm nữa

68
00:04:03,020 --> 00:04:06,400
Vậy ta quay lại và check lại

69
00:04:06,400 --> 00:04:11,300
Và cứ tiếp tục đến khi chờ bằng 0

70
00:04:11,300 --> 00:04:14,350
Vậy ta đang làm ở đây

71
00:04:14,350 --> 00:04:20,620
Trong khi cờ khác 0, nghĩa là nó bằng 1

72
00:04:20,620 --> 00:04:22,280
Ta vẫn lập lại loop này

73
00:04:22,280 --> 00:04:25,720
Và while loop này không có body

74
00:04:25,720 --> 00:04:29,060
nghĩa là nó cứ liên tục check

75
00:04:29,060 --> 00:04:30,960
It is a 1.

76
00:04:30,960 --> 00:04:37,770
Khi nó bằng 0, nghĩa là nó trống

77
00:04:37,770 --> 00:04:41,050
nghĩa là ta có thứ để làm

78
00:04:41,050 --> 00:04:42,205
vậy, ta cứ tiếp tục đọc data

79
00:04:42,205 --> 00:04:46,760

80
00:04:46,760 --> 00:04:50,670
bằng cách nhìn tại

81
00:04:50,670 --> 00:04:52,580
data register (UART1_DR_R)

82
00:04:52,580 --> 00:04:55,210
data register sẽ cho ta data

83
00:04:55,210 --> 00:04:59,340
và bởi nó là register 32-bit, vừa đánh dấu

84
00:04:59,340 --> 00:05:02,850
và ta chỉ lấy 8 bits dưới 

85
00:05:02,850 --> 00:05:07,110
và ta sẽ return nó cho caller

86
00:05:07,110 --> 00:05:10,594
Đây là chỗ return

87
00:05:10,594 --> 00:05:11,760
Đúng rồi

88
00:05:11,760 --> 00:05:13,260
Tới phần output

89
00:05:13,260 --> 00:05:18,780
Function output là kiểu bận-chờ

90
00:05:18,780 --> 00:05:24,410
và nó sẽ output 1 charater ra serial port

91
00:05:24,410 --> 00:05:27,160
Nó cũng phụ thuộc vào 1 cờ

92
00:05:27,160 --> 00:05:32,800
Đó là cờ TXFF

93
00:05:32,800 --> 00:05:35,830
Cờ này có 2 trạng thái

94
00:05:35,830 --> 00:05:40,630
Nếu FIFO = 1

95
00:05:40,630 --> 00:05:43,940
nghĩa là FIFO đầy

96
00:05:43,940 --> 00:05:47,550
không còn chỗ để output

97
00:05:47,550 --> 00:05:49,570
Vậy ta phải chờ

98
00:05:49,570 --> 00:05:55,900
Vậy nếu nó bận output characters trước

99
00:05:55,900 --> 00:06:01,040
ta phải đợi bằng cách quay lại 

100
00:06:01,040 --> 00:06:05,900
Nếu cờ = 0, nghĩa là FIFO không đầy

101
00:06:05,900 --> 00:06:09,870
và thiết bị sẵn sàng nhận charater khác

102
00:06:09,870 --> 00:06:12,500
Và nếu như vậy, 

103
00:06:12,500 --> 00:06:15,170
ta sẽ output phần data tiếp theo

104
00:06:15,170 --> 00:06:25,610
Ta sẽ viết phần data đó ra thiết bị, rồi return

105
00:06:25,610 --> 00:06:29,885
