0
00:00:00,000 --> 00:00:00,001
http://youtu.be/cnlLBQc32Y0

1
00:00:00,000 --> 00:00:00,500

2
00:00:00,500 --> 00:00:12,350
RAMESH YERRABALLI: So we looked
at how the PLL can change

3
00:00:12,350 --> 00:00:18,370
and the system clock.

4
00:00:18,370 --> 00:00:23,470
Specifically, we said that we
can make the system operate

5
00:00:23,470 --> 00:00:27,710
at a higher speed or a lower
speed by appropriately choosing

6
00:00:27,710 --> 00:00:32,259
the values in the device
registers associated with the PLL.

7
00:00:32,259 --> 00:00:37,520
Now, let's do some calculations.

8
00:00:37,520 --> 00:00:41,350
Let's say we did set it at 80 MHz.

9
00:00:41,350 --> 00:00:45,390
If I set it at 80
MHz, then we know

10
00:00:45,390 --> 00:00:48,730
that a single clock--
so 80 MHz tells me

11
00:00:48,730 --> 00:00:57,260
that a clock ticks-- so this is the
clock-- then a single clock tick is

12
00:00:57,260 --> 00:01:14,890
going to tick 1 over 80 times 10 to the
six seconds, which is 12.5 nanoseconds,

13
00:01:14,890 --> 00:01:23,370
So which means that if I use the SysTick
counter, then-- the SysTick counter,

14
00:01:23,370 --> 00:01:30,310
we know, is a 24-bit value-- it's
going to be decremented by 1.

15
00:01:30,310 --> 00:01:32,710
Remember, it's a count down value.

16
00:01:32,710 --> 00:01:40,080
So it decrements by 1
every 12.5 nanoseconds.

17
00:01:40,080 --> 00:01:45,850
So let's say I want to write a delay
routine Remember, the delay routine

18
00:01:45,850 --> 00:01:51,280
we wrote in our previous
code so far involved

19
00:01:51,280 --> 00:01:53,220
doing some arbitrary operations.

20
00:01:53,220 --> 00:01:56,090
Now, we're gonna write
a SysTick, which is

21
00:01:56,090 --> 00:02:00,500
a SysTick_Wait, which I've written here.

22
00:02:00,500 --> 00:02:01,900
But I'm going to go with it.

23
00:02:01,900 --> 00:02:03,990
But we want to do a
SysTick_Wait so that we

24
00:02:03,990 --> 00:02:07,810
can wait for precisely the
amount of time we need.

25
00:02:07,810 --> 00:02:09,880
So let's take a simple example.

26
00:02:09,880 --> 00:02:12,160
Let's say I want to wait
for-- so if I wanted

27
00:02:12,160 --> 00:02:16,770
SysTick to wait for 10 milliseconds.

28
00:02:16,770 --> 00:02:18,850
So in other words, I
call a subroutine called

29
00:02:18,850 --> 00:02:21,030
SysTick_Wait and I pass it something.

30
00:02:21,030 --> 00:02:23,700
And it has to wait for
10 milliseconds, which

31
00:02:23,700 --> 00:02:28,060
means what I'm going to do is I'm
going to start off the SysTick counter.

32
00:02:28,060 --> 00:02:30,200
And I put some initial value.

33
00:02:30,200 --> 00:02:33,480
So my reload value will be some value.

34
00:02:33,480 --> 00:02:36,900
This is my current.

35
00:02:36,900 --> 00:02:40,470
And this is my reload.

36
00:02:40,470 --> 00:02:43,850

37
00:02:43,850 --> 00:02:48,770
And I set the reload value to a certain
number so that what number I set here

38
00:02:48,770 --> 00:02:53,550
is gonna tell me how long it's gonna
to take for this to count down to 0.

39
00:02:53,550 --> 00:02:56,380
So what should I set so
that it's 10 milliseconds.

40
00:02:56,380 --> 00:03:07,220
In other words, my count times--
because each tick is 12.5 nanoseconds--

41
00:03:07,220 --> 00:03:11,090
should be equal to 10 milliseconds.

42
00:03:11,090 --> 00:03:28,270
So count, now, is going to be equal
to the 10 divided by 12.5 times--

43
00:03:28,270 --> 00:03:34,480
this is a 10 to the minus
3 times 10 to the-- this

44
00:03:34,480 --> 00:03:37,660
comes out there-- 10
to the minus plus 9.

45
00:03:37,660 --> 00:03:50,790
So this has to be a value which
turns out to be around 800,000.

46
00:03:50,790 --> 00:03:58,650
So this tells me that if I
set this value to 800,000

47
00:03:58,650 --> 00:04:03,870
and I start letting the counter
go-- so remember that this starts

48
00:04:03,870 --> 00:04:09,220
at 0 to start with--
then it does a minus 1.

49
00:04:09,220 --> 00:04:13,430
From 0, it goes to 800,000,
because that's a reload value,

50
00:04:13,430 --> 00:04:16,640
counts 800,000 minus
1, minus 2, minus 3,

51
00:04:16,640 --> 00:04:23,690
and keeps doing it until it hits
the value, which is my 0 again.

52
00:04:23,690 --> 00:04:28,120
And when it goes from
the 1 to 0 transition--

53
00:04:28,120 --> 00:04:31,780
so it's going to go
whatever values it did.

54
00:04:31,780 --> 00:04:38,720
And when it does that 1 to 0
transition, it's going to set bit 16

55
00:04:38,720 --> 00:04:43,590
of my control register
to be equal to 1 to say

56
00:04:43,590 --> 00:04:47,610
that there was an overflow, if you will.

57
00:04:47,610 --> 00:04:52,500
So my code will be
based on this behavior.

58
00:04:52,500 --> 00:04:57,420
So what I'm going to do is let's say I
write a subroutine called SysTick_Wait.

59
00:04:57,420 --> 00:04:59,989
And let's say I pass
this value of 800,000.

60
00:04:59,989 --> 00:05:01,405
So I'm going to call SysTick_Wait.

61
00:05:01,405 --> 00:05:07,770

62
00:05:07,770 --> 00:05:14,590
And I pass the value
800,000 to it, which

63
00:05:14,590 --> 00:05:19,320
means that when I call the sub
routine, the delay value is 800,000.

64
00:05:19,320 --> 00:05:23,770
I initially set my reload
value to be delay minus 1.

65
00:05:23,770 --> 00:05:27,950
That's because a 0 also
has a meaning here.

66
00:05:27,950 --> 00:05:32,120
It's not just 800,000 to 1, but
it counts from 800,000 to 0.

67
00:05:32,120 --> 00:05:38,500
I set that initial reload
value to be 800,000 minus 1.

68
00:05:38,500 --> 00:05:43,470
It's going to set the
initial value to 0.

69
00:05:43,470 --> 00:05:46,600
This will set this value to 0.

70
00:05:46,600 --> 00:05:49,230
And the counter starts ticking.

71
00:05:49,230 --> 00:05:52,240
And when it's ticking, I'm
going to continuously check.

72
00:05:52,240 --> 00:05:55,770
So this is my continuous
check for bit 16.

73
00:05:55,770 --> 00:06:05,880
So I will keep checking bit
16 to see if it's 1 yet.

74
00:06:05,880 --> 00:06:09,760
So this is saying as long as it's equal
to 0, do nothing and keep checking.

75
00:06:09,760 --> 00:06:12,590
So this while loop has no
body in it because it's

76
00:06:12,590 --> 00:06:16,830
continuously looping and doing nothing,
waiting for that bit to become 1.

77
00:06:16,830 --> 00:06:19,460
When the bit becomes
1, it comes out, which

78
00:06:19,460 --> 00:06:24,140
means that the time that it takes for
this loop, this sub routine, to execute

79
00:06:24,140 --> 00:06:29,580
will be exactly my 10 milliseconds.

80
00:06:29,580 --> 00:06:36,460
But what if I wanted to get my clock,
to the subroutine, to do something

81
00:06:36,460 --> 00:06:39,180
that we've looked at,
which is 0.1 seconds?

82
00:06:39,180 --> 00:06:42,270
So maybe what I really
wanted to do is not

83
00:06:42,270 --> 00:06:52,990
10 milliseconds, but 100 milliseconds,
which, by the way, is 0.1 second.

84
00:06:52,990 --> 00:06:54,420
So what should I change?

85
00:06:54,420 --> 00:06:58,580
Well, all I'm going to do is I'm going
to call the subroutine with an extra 0

86
00:06:58,580 --> 00:07:00,040
here.

87
00:07:00,040 --> 00:07:07,660
Rather than 800,000, I put an
extra 0, so it's 8 million.

88
00:07:07,660 --> 00:07:15,510
And this will make my
subroutine, wait for 0.1 second.
