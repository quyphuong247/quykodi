0
00:00:00,000 --> 00:00:00,001
http://youtu.be/VB8iLtfy3Cc phungdo_vgu

1
00:00:00,000 --> 00:00:01,490

2
00:00:01,490 --> 00:00:07,530
DR.  YERRABALLI: những gì chúng tôi đã nói
trong phần trình bày trước là Jon

3
00:00:07,530 --> 00:00:10,960
đang chỉ ra các thành phần 
của một hệ thống nhúng.

4
00:00:10,960 --> 00:00:17,820
Những gì ông ấy thu hút sự chú ý là nhằm
nhấn mạnh lõi của một hệ thống nhúng

5
00:00:17,820 --> 00:00:20,525
là bộ não, đó chính là vi xử lý.

6
00:00:20,525 --> 00:00:28,470
Khi nói về một thiết kế vi xử lý
, ta thường nhìn vào

7
00:00:28,470 --> 00:00:33,570
nó hỗ trợ loại câu lệnh gì
và bạn lập trình nó như thế nào.

8
00:00:33,570 --> 00:00:38,260
Thông thường thì, ta nói về bộ vi xử lý
là về

9
00:00:38,260 --> 00:00:41,190
Kiến trúc tập lệnh (ISA).

10
00:00:41,190 --> 00:00:47,640
Vậy thì Kiến Trúc Tập Lệnh 
là một tiêu chuẩn .

11
00:00:47,640 --> 00:00:52,900
Ví dụ nhé, Kiến Trúc 
Tập Lệnh có thể đưa

12
00:00:52,900 --> 00:00:55,800
một analogy tới ôtô.

13
00:00:55,800 --> 00:01:00,890
Khi ta ngồi vào ôtô. ta biết rằng
chiếc xe phải có một vô lăng.

14
00:01:00,890 --> 00:01:05,690
Ta biết cũng cần biết phanh và
chân ga phải luôn luôn

15
00:01:05,690 --> 00:01:07,135
ở cùng một nơi.

16
00:01:07,135 --> 00:01:13,030
Hệ thống đèn báo ở một phía
của cần số và hơn thế nữa.

17
00:01:13,030 --> 00:01:16,500
Đó là tiêu chuẩn của chiếc ô tô.

18
00:01:16,500 --> 00:01:20,890
Cũng như đại loại Kiến Trúc
Tập Lệnh là thế. Nó phải

19
00:01:20,890 --> 00:01:22,370
giải quyết những thứ sau đây.

20
00:01:22,370 --> 00:01:25,750
Điều đầu tiên Kiến Trúc Tập 
Lệnh phải giải quyết là 

21
00:01:25,750 --> 00:01:28,640
tập hợp các phép toán
được hỗ trợ

22
00:01:28,640 --> 00:01:31,370
bằng các tập lệnh.

23
00:01:31,370 --> 00:01:32,950
Đó là tập các phép toán.

24
00:01:32,950 --> 00:01:41,130
Ví dụ: ta sẽ thấy hầu hết 
may tính mà ta quan sát, chúng 

25
00:01:41,130 --> 00:01:48,565
là tập hợp phép tính như cộng,
nhân, và di chuyên các thứ từ bộ nhớ

26
00:01:48,565 --> 00:01:50,820
đến vi xử lý và tiếp tục...

27
00:01:50,820 --> 00:01:56,490
Điều thứ 2: bất kì KTTL - ISA phải 
thông báo là các loại dữ liệu.

28
00:01:56,490 --> 00:02:04,350
Đó là, dữ liệu mà ta làm việc có thể
là một kiễu dữ liệu kí tự đơn giản hoặc

29
00:02:04,350 --> 00:02:09,631
một kiểu sổ nguyên hay 
một kiểu dữ liệu chấm động.

30
00:02:09,631 --> 00:02:17,020

31
00:02:17,020 --> 00:02:21,430
Điều thứ 3: Kiến Trúc Tập Lệnh 
sẽ đề cập là

32
00:02:21,430 --> 00:02:24,230
các thanh ghi.

33
00:02:24,230 --> 00:02:29,280
Đó là, nơi lưu trữ dành cho dữ liệu
ta đang làm việc.

34
00:02:29,280 --> 00:02:34,490
Khi ta nói về các thanh ghi, we say
có bao nhiêu thanh ghi, kích thước

35
00:02:34,490 --> 00:02:37,940
của từng thanh ghi là bao nhiêu
mục đích chúng phục vụ ?

36
00:02:37,940 --> 00:02:45,220
Có các thanh ghi dành cho mục đích chung,
và cũng có

37
00:02:45,220 --> 00:02:46,470
các thanh ghi dặc biệt.

38
00:02:46,470 --> 00:02:51,170

39
00:02:51,170 --> 00:02:54,870
Nếu bạn đang lập trình một hợp ngữ, một 
thứ khác mà bạn thực sự muốn

40
00:02:54,870 --> 00:02:57,580
tập trung vào là addressing modes.

41
00:02:57,580 --> 00:03:02,070

42
00:03:02,070 --> 00:03:09,810
Addressing mode đề cập đến các
các cách khác nhau ta có thể tìm nạp lên.

43
00:03:09,810 --> 00:03:14,290
Toán hạng từ bộ nhớ hay từ các thanh ghi
hoặc từ các tập lệnh.

44
00:03:14,290 --> 00:03:25,230
Câu trả lời của câu hỏi 
cách dữ liệu được hình thành.

45
00:03:25,230 --> 00:03:35,060
Thứ cuối cùng là khi nói về KTTL - ISA 
là truy cập bộ nhớ.

46
00:03:35,060 --> 00:03:42,110
Nó dẫn đến kích thước của một
thực thể mà tìm nạp từ bộ nhớ.

47
00:03:42,110 --> 00:03:51,490
là các mảnh bộ nhớ có kích thước khác nhau
mà bạn có thể có, và nếu có một

48
00:03:51,490 --> 00:03:54,510
sự khác nhau giữa việc truy xuất nó từ
RAM hoặc ROM.

49
00:03:54,510 --> 00:03:57,660

50
00:03:57,660 --> 00:04:03,720
Để cho bạn một ý niệm, Jon đã nói 
về vài ví dụ KTruc TLenh - ISA.

51
00:04:03,720 --> 00:04:05,540
Đây là một số KTruc TLenh phổ biến.

52
00:04:05,540 --> 00:04:13,800

53
00:04:13,800 --> 00:04:20,216
Với nhiều người, KTruc TLenh phổ biến 
nhất khi nghĩ đến là x86.

54
00:04:20,216 --> 00:04:24,630
x86 là một KTruc TLenh được
sử dụng rộng rãi trong

55
00:04:24,630 --> 00:04:26,805
desktop và laptop.

56
00:04:26,805 --> 00:04:29,580

57
00:04:29,580 --> 00:04:35,300
Dù desktop thì phổ biển hơn nhiều
, cái ta thấy là vi xử lý ARM

58
00:04:35,300 --> 00:04:41,480
ARM ISA, là một KTTL ngày càng
phổ biến hơn những ngày này đơn giản vì

59
00:04:41,480 --> 00:04:47,120
số lượng cực kì nhiều các thiết bị
động, ví dụ như điện thoại.

60
00:04:47,120 --> 00:04:56,380
Có một dạng KTruc TLenh khác cũng 
phổ biến, đó là PowerPC ISA.

61
00:04:56,380 --> 00:05:00,370
được sử dụng rộng rãi trong
nền công nghiệp ôtô.

62
00:05:00,370 --> 00:05:04,350

63
00:05:04,350 --> 00:05:14,340
Bây giờ có vài loại KTTL mà cũng có
một số ứng dụng ngoài kia, và chúng

64
00:05:14,340 --> 00:05:15,700
có sử dụng cụ thể.

65
00:05:15,700 --> 00:05:22,620
Ví dụ, SPARC ISA được dùng trong 
những thiết bị Sun Microsystem.

66
00:05:22,620 --> 00:05:30,940
Thường thì đó là trên
các máy server.

67
00:05:30,940 --> 00:05:36,230
Giờ ta đã hiểu một KTTL liên quan tới gì 
rồi, trước hết đi tìm hiểu

68
00:05:36,230 --> 00:05:40,860
một số thành phần quan trọng.

69
00:05:40,860 --> 00:05:43,090
Để bắt đầu, ta tìm
hiểu các thanh ghi.

70
00:05:43,090 --> 00:05:48,900

71
00:05:48,900 --> 00:05:51,410
Để bắt đầu, ta tìm
hiểu các thanh ghi.

72
00:05:51,410 --> 00:05:55,970
Sẽ tập trung vào ARM ISA.

73
00:05:55,970 --> 00:06:04,020
Những gì ta nhận ra trên ARM ISA là
các thanh ghi mà chúng là

74
00:06:04,020 --> 00:06:07,750
các thanh ghi mục đích chung.

75
00:06:07,750 --> 00:06:10,370
Tôi muốn gọi chúng là GP-

76
00:06:10,370 --> 00:06:12,370
thanh ghi Mục Đích Chung.

77
00:06:12,370 --> 00:06:25,970
Chúng là R0, R1, tất cả
cho đến R12.

78
00:06:25,970 --> 00:06:30,560
13 thanh ghi đó được dùng như những scratch
pad nơi mà ta lưu thông tin

79
00:06:30,560 --> 00:06:35,340
tạm thời, và điều khiển thông tin này
thông qua việc thực hiện 

80
00:06:35,340 --> 00:06:40,480
phép số học, phép toán di chuyển, phép
toán logic, phép manipulation 

81
00:06:40,480 --> 00:06:41,810
dữ liệu.

82
00:06:41,810 --> 00:06:47,070
Mọi thanh ghi này đều
có đội dài 32 bits.

83
00:06:47,070 --> 00:06:51,930
Chúng có thể giữ 32 bits
thông tin.

84
00:06:51,930 --> 00:06:59,270
Lớp thứ hai của thanh ghi là 
các thanh ghi đặc biệt

85
00:06:59,270 --> 00:07:02,190

86
00:07:02,190 --> 00:07:07,740
Có 3 loại thanh ghi đặc biệt trên ARM,
loại đầu tiên là thanh ghi R13

87
00:07:07,740 --> 00:07:15,805
Đó là con trỏ ngăn xếp - stack pointer.

88
00:07:15,805 --> 00:07:20,230

89
00:07:20,230 --> 00:07:35,460
Nói cách khác, nó chứa địa chỉ
trên cùng của ngăn xếp - stack.

90
00:07:35,460 --> 00:07:38,960
Ta sẽ xem xét chức năng của
stack sau.

91
00:07:38,960 --> 00:07:43,210
Nhưng đủ để nói, ngăn xếp là một vùng
bộ nhớ đặc biệt

92
00:07:43,210 --> 00:07:48,210
quan trọng.  Ta dành một thanh ghi 
để trỏ đến đến

93
00:07:48,210 --> 00:07:51,590
vùng đặc biệt của bộ nhớ.

94
00:07:51,590 --> 00:08:06,870
Thanh ghi đặc biệt R14, là một thanh 
ghi liên kết, nó chứa địa chỉ

95
00:08:06,870 --> 00:08:16,610
trả về cho chương trình con.

96
00:08:16,610 --> 00:08:21,690

97
00:08:21,690 --> 00:08:25,960
Again, Một trong những thứ mà ta sẽ học
trong lớp này là viết code

98
00:08:25,960 --> 00:08:30,360
dạng mô đun, và mô đun code bao 
hàm việc viết chương trình con.

99
00:08:30,360 --> 00:08:37,700
Ta dành một thanh ghi để chứa địa
chỉ trả về của chương trình con.

100
00:08:37,700 --> 00:08:42,130
Thanh ghi dặc biệt thứ 3 là R15.

101
00:08:42,130 --> 00:08:46,260
Cho tới nay, đây là thanh ghi
quan trọng nhất:

102
00:08:46,260 --> 00:08:49,600
là Bộ đếm chương trình.

103
00:08:49,600 --> 00:08:51,710
Tôi nói nó là thanh ghi quan 
trọng nhất.

104
00:08:51,710 --> 00:08:59,750
Vì nó luôn là chỉ điểm của
nơi bạn đang viết code.

105
00:08:59,750 --> 00:09:19,350
Nó chứa địa chỉ của câu lệnh 
tiếp theo để thực thi.

106
00:09:19,350 --> 00:09:20,600
để chạy.

107
00:09:20,600 --> 00:09:25,310

108
00:09:25,310 --> 00:09:30,140
Ngoài các thanh ghi mục đích chung
và thanh ghi đặc biệt, còn có

109
00:09:30,140 --> 00:09:36,520
một thanh ghi gọi là Thanh Ghi
Trạng Thái Vi Xử Lý - PSR.

110
00:09:36,520 --> 00:09:42,088
Không cần lo lắng về nội dung của thanh
ghi này trừ 4 bits mà

111
00:09:42,088 --> 00:09:49,600
có ý nghĩa đáng kể với ta. Chúng là
N,  Z,  V và  C bits.

112
00:09:49,600 --> 00:09:55,770
4 bits này cùng nhau thông báo
trạng thái của hệ thống.

113
00:09:55,770 --> 00:09:59,700
Ý tôi là trạng thái của hệ thống là 
các bộ chỉ báo thông báo 

114
00:09:59,700 --> 00:10:07,420
với ta kết quả của phép toán
được thực hiện gần nhất.

115
00:10:07,420 --> 00:10:19,260
Nó là kết quả của phép toán
được thực hiện gần nhất.

116
00:10:19,260 --> 00:10:22,870

117
00:10:22,870 --> 00:10:27,550
Bằng cách bật hoặc tắt, chúng cho biết
liệu phép toán gần nhất được

118
00:10:27,550 --> 00:10:33,490
thực hiện có dẫn đến 
một kết quả tiêu cực--

119
00:10:33,490 --> 00:10:37,540
kết quả là tiêu cực--

120
00:10:37,540 --> 00:10:41,110
hoặc kết quả bằng 0--

121
00:10:41,110 --> 00:10:43,550
Đại loại như tôi vừa thực hiện một phép
tính và kết quả của

122
00:10:43,550 --> 00:10:45,630
nó bằng 0--

123
00:10:45,630 --> 00:10:49,425
hoặc gây ra tràn bộ nhớ.

124
00:10:49,425 --> 00:10:51,950

125
00:10:51,950 --> 00:10:58,320
Thật sự thì cả V và C biểu thị tràn bộ nhớ,
ngoại trừ V cho biết

126
00:10:58,320 --> 00:11:03,960
có tràn bộ nhớ khi ta đang làm việc
với signed numbers, C chỉ ra 

127
00:11:03,960 --> 00:11:06,250
tràn bộ nhớ với unsigned numbers.

128
00:11:06,250 --> 00:11:11,195
