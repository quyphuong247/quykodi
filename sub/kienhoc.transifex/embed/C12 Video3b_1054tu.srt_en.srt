0
00:00:00,000 --> 00:00:00,001
http://youtu.be/sTxtG1UX1_0

1
00:00:00,000 --> 00:00:00,432

2
00:00:00,432 --> 00:00:02,140
JONATHAN VALVANO:
Let's look at the steps

3
00:00:02,140 --> 00:00:05,267
involved in configuring an
edge triggered interrupt.

4
00:00:05,267 --> 00:00:08,610

5
00:00:08,610 --> 00:00:17,030
The hardware step is to
connect PF4 to the switch.

6
00:00:17,030 --> 00:00:19,770
That's the one on our LaunchPad.

7
00:00:19,770 --> 00:00:29,000
The software steps are to make it an
input, to not do alternative function,

8
00:00:29,000 --> 00:00:37,090
not do analog, to not do PCTL,
so all these bits will be zero.

9
00:00:37,090 --> 00:00:40,480
The interesting step is the
set up for the edge trigger.

10
00:00:40,480 --> 00:00:47,590
We have the direction bit, the input
sense bit, we have this IBE bit,

11
00:00:47,590 --> 00:00:55,230
we have this IEV bit,
and we have this IME bit.

12
00:00:55,230 --> 00:01:02,350
And these are the bits that we will set
to specify the mode for edge trigger.

13
00:01:02,350 --> 00:01:08,500
In all of the modes, we're going to
set the direction register to a zero.

14
00:01:08,500 --> 00:01:12,140
And in our case, we're
interested in edges

15
00:01:12,140 --> 00:01:18,220
so we were going to set the IS bit
equal to zero and that means edge.

16
00:01:18,220 --> 00:01:25,120
The next is we're going to clear the
both bit because we don't want both

17
00:01:25,120 --> 00:01:30,590
but we do want the rising
edge or the falling edge.

18
00:01:30,590 --> 00:01:38,840
So the IEV bit zero means it's
a falling edge, edge triggered.

19
00:01:38,840 --> 00:01:43,360
The IEV bit equal 1
would be a rising edge.

20
00:01:43,360 --> 00:01:51,160

21
00:01:51,160 --> 00:01:58,350
And the last mode we could look at, or
use potentially, is the both mode equal

22
00:01:58,350 --> 00:01:59,750
to a one.

23
00:01:59,750 --> 00:02:02,530
Doesn't matter what this
one is, and in that mode

24
00:02:02,530 --> 00:02:09,789
we're going to get both interrupts,
both edges will cause an interrupt.

25
00:02:09,789 --> 00:02:13,050
RAMESH YERRABALLI: So if I was
pressing a switch then Jon,

26
00:02:13,050 --> 00:02:17,169
it would interrupt on the
touch and the release?

27
00:02:17,169 --> 00:02:19,210
JONATHAN VALVANO: That's
what this mode would do.

28
00:02:19,210 --> 00:02:22,610
But the mode we're going
to use is this mode here,

29
00:02:22,610 --> 00:02:28,440
because we want just a
touch to cause an interrupt.

30
00:02:28,440 --> 00:02:32,510
This last bit will be
a one and that says,

31
00:02:32,510 --> 00:02:36,800
once you see the interrupt-- once you
see the trigger-- cause an interrupt.

32
00:02:36,800 --> 00:02:43,315
So the idea of an arm, is the
trigger will cause an interrupt.

33
00:02:43,315 --> 00:02:46,530

34
00:02:46,530 --> 00:02:51,670
So the mode we're going to
use, is this mode right here.

35
00:02:51,670 --> 00:02:54,860
Next, let's look at some
other things we have to do.

36
00:02:54,860 --> 00:02:56,850
Interrupts use vectors.

37
00:02:56,850 --> 00:03:00,450
Vectors are addresses
which tell the system

38
00:03:00,450 --> 00:03:05,450
where to get the software to execute.

39
00:03:05,450 --> 00:03:08,630
And so there are lots of
vectors in the system.

40
00:03:08,630 --> 00:03:11,600
The particular vector that
we're going to be using

41
00:03:11,600 --> 00:03:20,700
is the one here located
at address 0x000000B8

42
00:03:20,700 --> 00:03:26,470
and this is going to be the port
F interrupt service routine.

43
00:03:26,470 --> 00:03:35,120
This vector table are 32-bit addresses,
and they begin at location zero.

44
00:03:35,120 --> 00:03:38,020
So at location zero is
the initial stack pointer,

45
00:03:38,020 --> 00:03:44,950
at location four is the initial program
counter, somewhere in the middle

46
00:03:44,950 --> 00:03:50,380
will be our SysTick vector, and
the one that we're interested in

47
00:03:50,380 --> 00:03:55,690
is the port F, the port
F interrupt service

48
00:03:55,690 --> 00:04:01,000
routine which is located
down here in ROM location B8.

49
00:04:01,000 --> 00:04:06,360
RAMESH YERRABALLI: So for each interrupt
that is available on the LaunchPad,

50
00:04:06,360 --> 00:04:10,550
there's a corresponding
entry in the interrupt vector

51
00:04:10,550 --> 00:04:14,480
table that tells the system
what interrupt service

52
00:04:14,480 --> 00:04:18,767
routine to run when that
particular interrupt occurs.

53
00:04:18,767 --> 00:04:19,850
JONATHAN VALVANO: Exactly.

54
00:04:19,850 --> 00:04:21,720
And there are hundreds of them.

55
00:04:21,720 --> 00:04:24,670
The one we're interested
is this one right here,

56
00:04:24,670 --> 00:04:28,740
the port F interrupt service routine.

57
00:04:28,740 --> 00:04:31,220
Next let's talk about priority.

58
00:04:31,220 --> 00:04:33,960
Priority is like you'd imagine.

59
00:04:33,960 --> 00:04:38,760
Priority means if two things happen at
the same time, which one goes first?

60
00:04:38,760 --> 00:04:40,760
Which is most important?

61
00:04:40,760 --> 00:04:46,720
And there's a register on the
system called priority seven.

62
00:04:46,720 --> 00:04:56,740
And it turns out that bits 23,
22, and 21 of this register

63
00:04:56,740 --> 00:05:00,330
will specify a number
between zero to seven

64
00:05:00,330 --> 00:05:04,800
and set the priority for
the port F interrupt.

65
00:05:04,800 --> 00:05:09,110
Each interrupt that's
possible has a three bit

66
00:05:09,110 --> 00:05:14,400
location in one of these priority
registers to specify it's priority.

67
00:05:14,400 --> 00:05:16,350
RAMESH YERRABALLI: So
priority does not just

68
00:05:16,350 --> 00:05:19,270
pertain to two things
happening at the same time.

69
00:05:19,270 --> 00:05:25,090
But if one priority-- one interrupt
service routine is currently running,

70
00:05:25,090 --> 00:05:28,840
and if another interrupt
were to occur, the question

71
00:05:28,840 --> 00:05:35,380
of whether this interrupt
continues or is suspended

72
00:05:35,380 --> 00:05:39,880
and this new interrupt that
occurs, gets processed.

73
00:05:39,880 --> 00:05:42,180
The priority answers that question.

74
00:05:42,180 --> 00:05:45,000
If a higher priority
interrupt were to occur,

75
00:05:45,000 --> 00:05:49,360
then the current interrupt
service routine is suspended.

76
00:05:49,360 --> 00:05:52,920
The new interrupt service
routine runs, and then

77
00:05:52,920 --> 00:05:58,737
control returns to the interrupt
service routine that was suspended.

78
00:05:58,737 --> 00:05:59,820
JONATHAN VALVANO: Exactly.

79
00:05:59,820 --> 00:06:02,580
So a high priority
interrupt service routine--

80
00:06:02,580 --> 00:06:06,870
let's say this one is a priority
one, and this one is a priority

81
00:06:06,870 --> 00:06:13,230
two-- a high priority interrupt can
preempt a low priority interrupt

82
00:06:13,230 --> 00:06:15,090
service routine.

83
00:06:15,090 --> 00:06:20,950
In this example, we're going to set
the priority for this interrupt to two.

84
00:06:20,950 --> 00:06:26,550
Which means a zero or one could preempt,
but a two through seven would not.

85
00:06:26,550 --> 00:06:32,000
So we saw the vector and the priority.

86
00:06:32,000 --> 00:06:37,610
Next we're going to have to look
at an enable for this interrupt.

87
00:06:37,610 --> 00:06:39,670
There are two enables.

88
00:06:39,670 --> 00:06:46,820
There's one specific enable in the
nested vectored interrupt controller,

89
00:06:46,820 --> 00:06:49,750
enable register zero.

90
00:06:49,750 --> 00:06:54,470
And it turns out that bit 30
will have to be set at one

91
00:06:54,470 --> 00:07:01,150
to enable the port F interrupts.

92
00:07:01,150 --> 00:07:12,180
And the second, is a global
interrupt enable for all interrupts.

93
00:07:12,180 --> 00:07:16,820
And that exists in the PRIMASK
register, which exists in the processor.

94
00:07:16,820 --> 00:07:20,050

95
00:07:20,050 --> 00:07:21,560
And that's the I bit.

96
00:07:21,560 --> 00:07:25,729
And the I bit has to be zero to enable.

97
00:07:25,729 --> 00:07:28,020
And if it happened to be a
one that would mean disable.

98
00:07:28,020 --> 00:07:32,060

99
00:07:32,060 --> 00:07:36,170
All right, next let's
look inside at the port F.

100
00:07:36,170 --> 00:07:41,770
There are three registers in
the port F edge triggered mode.

101
00:07:41,770 --> 00:07:44,830

102
00:07:44,830 --> 00:07:49,300
Each of the bits in port
F could be edge triggered.

103
00:07:49,300 --> 00:07:54,100
And the one we're interested
in, is port F, bit four.

104
00:07:54,100 --> 00:07:58,270
So we're interested in bit
four of these registers.

105
00:07:58,270 --> 00:08:07,740
And the IM is the arm bit which we will
set one, once in the initialization

106
00:08:07,740 --> 00:08:13,350
such that we want port F to have
an edge triggered interrupt.

107
00:08:13,350 --> 00:08:16,410
The actual trigger bit is right here.

108
00:08:16,410 --> 00:08:17,630
There's the trigger bit.

109
00:08:17,630 --> 00:08:19,880
And we can look at if you want to.

110
00:08:19,880 --> 00:08:24,020
The trigger bit here is in the RIS--
raw interrupt status register--

111
00:08:24,020 --> 00:08:26,230
and there's the trigger bit.

112
00:08:26,230 --> 00:08:32,500
And we have one more bit, bit four
of the interrupt clear register.

113
00:08:32,500 --> 00:08:44,190
If we write a one to this bit that
will acknowledge or clear the trigger.

114
00:08:44,190 --> 00:08:53,480
In summary, the hardware-- which
is the falling edge of PF4--

115
00:08:53,480 --> 00:08:59,160
will set the trigger, and the
software will acknowledge the trigger

116
00:08:59,160 --> 00:09:04,160
by writing a one to the
interrupt clear register.
