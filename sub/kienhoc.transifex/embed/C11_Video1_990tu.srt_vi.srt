0
00:00:00,000 --> 00:00:00,001
http://youtu.be/pBrghZ5XMr8
Tung Dinh - VGU

1
00:00:00,000 --> 00:00:00,490

2
00:00:00,490 --> 00:00:02,906
Giờ ta sang phần giao tiếp của thiết bị

3
00:00:02,906 --> 00:00:05,060

4
00:00:05,060 --> 00:00:09,680
Giả sử ta có 2 thiết bị, A và B muốn giao tiếp

5
00:00:09,680 --> 00:00:14,450

6
00:00:14,450 --> 00:00:17,561
Một điều phải giải quyết trong giao tiếp này

7
00:00:17,561 --> 00:00:18,352
là đồng bộ hoá

8
00:00:18,352 --> 00:00:27,930

9
00:00:27,930 --> 00:00:33,890
Đồng bộ hoá là quá trình

10
00:00:33,890 --> 00:00:49,010
mà ta nối các thiết bị không cùng tốc độ

11
00:00:49,010 --> 00:00:52,270
Vậy, nếu A nhanh hơn B, hoặc ngược lại

12
00:00:52,270 --> 00:00:55,600
hoặc chúng cùng tốc độ, thì vẫn hoạt động chứ?

13
00:00:55,600 --> 00:00:57,070
Vâng

14
00:00:57,070 --> 00:00:59,610
Vậy, ta giả sử vài trường hợp

15
00:00:59,610 --> 00:01:05,850
Khi ta nói về A và B, nó có thể là là máy tính

16
00:01:05,850 --> 00:01:10,520
ví dụ như mạch đang dùng, máy vi tính, mạch điện tử

17
00:01:10,520 --> 00:01:15,580
Nó cũng có thể là thiết bị, ví dụ LCD

18
00:01:15,580 --> 00:01:20,790
mà ta đang dùng, hoặc bất kì thiết bị ngoại vi nào 

19
00:01:20,790 --> 00:01:22,800
mà nó kết nối

20
00:01:22,800 --> 00:01:27,980
Hoặc ta có thể liên tưởng như phép so sánh

21
00:01:27,980 --> 00:01:31,680
mà ta coi A và B như người

22
00:01:31,680 --> 00:01:36,320
Vậy điều gì xảy ra nếu A nói nhnah hơn B 
có thể nghe

23
00:01:36,320 --> 00:01:40,130
Hiển nhiên là rối loạn giao tiếp rồi

24
00:01:40,130 --> 00:01:43,800
Vậy điều ta cần là đồng bộ hoá 

25
00:01:43,800 --> 00:01:50,952
vậy thì 2 phía đều có thể hiểu được

26
00:01:50,952 --> 00:01:52,910
Tôi nghĩ đến 1 vấn đề

27
00:01:52,910 --> 00:01:54,990
Anh nói nhanh đấy, giáo sư Yerraballi

28
00:01:54,990 --> 00:01:57,869
Nếu anh nói chậm lại, tôi có thể hiểu tốt hơn

29
00:01:57,869 --> 00:01:59,910
Vâng, ý anh là, 

30
00:01:59,910 --> 00:02:05,980
nếu tôi nói nhanh quá, thì tôi nên nói chậm lại

31
00:02:05,980 --> 00:02:11,150
Vậy bằng cách nào ta biết, có 1 khoảng 
thời gian định trước

32
00:02:11,150 --> 00:02:16,420
mà anh muốn tôi chời trước khi nói từ tiếp theo

33
00:02:16,420 --> 00:02:20,580
Vậy, ta có dạng đầu tiên của đồng bộ 
hoá thiết bị

34
00:02:20,580 --> 00:02:27,260
gọi là blind cycle synchronization

35
00:02:27,260 --> 00:02:33,570
chỗ mà thiết bị A gửi tín hiệu cho B

36
00:02:33,570 --> 00:02:41,170
và đợi 1 khoảng thời gian định trước delta t

37
00:02:41,170 --> 00:02:43,920
rồi mới gửi tín hiệu thứ 2

38
00:02:43,920 --> 00:02:49,600
và sau đó đợi delta t, rồi mới gửi cái thứ 3

39
00:02:49,600 --> 00:02:54,799
Nó gọi là blind, vì thời gian đợi cố định

40
00:02:54,799 --> 00:02:56,590
Và delta t

41
00:02:56,590 --> 00:03:08,140
thì thông thường phụ thuộc vào tốc độ của B

42
00:03:08,140 --> 00:03:14,880
nghĩa là A phải biết tốc độ của B

43
00:03:14,880 --> 00:03:20,470
và phải chờ thời gian đó

44
00:03:20,470 --> 00:03:25,110
Vậy, vấn đề với blind là tốc độ của B có thể thay đổi

45
00:03:25,110 --> 00:03:30,140
và để blind hoạt động, A sẽ phải chờ
khoảng thời gian nhất, tương đương trường 
hợp tệ nhất

46
00:03:30,140 --> 00:03:33,360
Vậy, nó là 1 giao thức rất chậm

47
00:03:33,360 --> 00:03:36,070
Đúng, nhưng nó hữu ích

48
00:03:36,070 --> 00:03:41,140
bởi có nhiều thiết bị đơn giản

49
00:03:41,140 --> 00:03:43,760
thì cách này luôn hoạt động tốt

50
00:03:43,760 --> 00:03:51,420
Nếu anh biết từ datasheet của B

51
00:03:51,420 --> 00:03:53,230
các thông số kĩ thuật

52
00:03:53,230 --> 00:03:56,360
Tới phương pháp tiếp theo

53
00:03:56,360 --> 00:04:00,360
Cái này tôi biết rõ hơn

54
00:04:00,360 --> 00:04:14,410
gọi là busy-wait 

55
00:04:14,410 --> 00:04:22,180
Nếu thiết bị B có thể xuất cờ, 

56
00:04:22,180 --> 00:04:30,120
để báo cái giao tiếp cuối

57
00:04:30,120 --> 00:04:34,410
A gửi, giả sử, A gửi tin nhắn và B

58
00:04:34,410 --> 00:04:37,320
xuất cờ báo xử lý tin nhắn

59
00:04:37,320 --> 00:04:41,950
Chờ tới khi B xử lý xong

60
00:04:41,950 --> 00:04:50,490
Để A có thể biết khi nào cờ tắt

61
00:04:50,490 --> 00:04:54,860
để gửi tin nhắn tiếp theo

62
00:04:54,860 --> 00:04:57,375
lúc đó nó sẽ gửi tin tiếp theo

63
00:04:57,375 --> 00:05:00,660

64
00:05:00,660 --> 00:05:02,730
Vậy, nó liên tục check cờ

65
00:05:02,730 --> 00:05:07,110
Nói cách khác, logic của A thế này

66
00:05:07,110 --> 00:05:16,480
gửi, check cờ, và lập lại

67
00:05:16,480 --> 00:05:25,750
Nếu cờ lên, quay sang check lại

68
00:05:25,750 --> 00:05:32,180
nếu không có, quay sang gửi tin nhắn tiếp theo

69
00:05:32,180 --> 00:05:34,605
Đây là 1 bước tiến

70
00:05:34,605 --> 00:05:39,036
Nhưng bây giờ, ta muốn thiết bị B phức tạp hơn tí

71
00:05:39,036 --> 00:05:43,340
mà nó có thể báo cho người gửi

72
00:05:43,340 --> 00:05:46,147
để check cờ

73
00:05:46,147 --> 00:05:47,980
Nhưng tôi lại thích interrupts

74
00:05:47,980 --> 00:05:50,240
Vậy ta nói về interrupts

75
00:05:50,240 --> 00:05:53,020
Interrupts thì còn phức tạp hơn

76
00:05:53,020 --> 00:05:59,530
Ta sẽ lấy cờ này, thể hiện trạng thái của thiết bị B

77
00:05:59,530 --> 00:06:03,310
và ta sẽ làm vài thứ với nó

78
00:06:03,310 --> 00:06:12,050
Cờ này sẽ báo ngược lại cho A, như
1 event của hardware

79
00:06:12,050 --> 00:06:15,680
mà sẽ bật tắt 1 software đặc biệt nào đó

80
00:06:15,680 --> 00:06:20,780
Vậy với interrupts, thì cờ trạng thái của B

81
00:06:20,780 --> 00:06:32,005
có 2 trường hợp, bận với cờ lên, và 
hoàn tất với cờ xuống

82
00:06:32,005 --> 00:06:39,240

83
00:06:39,240 --> 00:06:45,910
Quá trình chuyển từ bận sang hoàn tất ở B sẽ 
bật tắt 1 software event ở A

84
00:06:45,910 --> 00:06:50,760
mà ta gọi là interrupt service routine

85
00:06:50,760 --> 00:06:53,020
để xử lý

86
00:06:53,020 --> 00:06:56,200
Nó sẽ thực hiện 1 hành động

87
00:06:56,200 --> 00:06:59,002
trong trường hợp này là gửi 1 tin nhắn khác

88
00:06:59,002 --> 00:07:01,170
Như ta biết, interrupts

89
00:07:01,170 --> 00:07:03,780
thì rất tiện dụng

90
00:07:03,780 --> 00:07:10,060
Nhưng nó là yêu cầu những hỗ trợ đặc biệt 
từ hệ thống

91
00:07:10,060 --> 00:07:13,210
Chúng là khả năng

92
00:07:13,210 --> 00:07:17,010
làm gián đoạn vi xử lý

93
00:07:17,010 --> 00:07:22,100
Và vi xử lý cũng hoãn lại 

94
00:07:22,100 --> 00:07:26,650
và xử lý interrupt, rồi quay về chỗ cũ

95
00:07:26,650 --> 00:07:31,060
Bởi vì nó khá phức tạp

96
00:07:31,060 --> 00:07:33,920
nên không phải mọi thiết bị đều hỗ trợ

97
00:07:33,920 --> 00:07:37,300
Không phải thích là chọn

98
00:07:37,300 --> 00:07:40,280
mà là thiết bị có hỗ trợ

99
00:07:40,280 --> 00:07:43,832
trong 1 hệ thống giao tiếp nào đó không

100
00:07:43,832 --> 00:07:45,540
Trong chương này

101
00:07:45,540 --> 00:07:49,310
ta sẽ dùng đồng bộ hoá kiểu busy-wait,
bởi nó đơn giản

102
00:07:49,310 --> 00:07:51,927
Nhưng ở chương sau, ta sẽ dùng interrupts

103
00:07:51,927 --> 00:07:53,760
Bằng cách này,

104
00:07:53,760 --> 00:08:01,460
có 2 ý tưởng giao tiếp được dùng ở hệ thống cao cấp

105
00:08:01,460 --> 00:08:08,120
Gọi là truy cập bộ nhớ trực tiếp, hoặc là DMA

106
00:08:08,120 --> 00:08:10,590
mà ta sẽ không đề cập đến trong khoá này

107
00:08:10,590 --> 00:08:13,530
nhưng bạn sẽ gặp khi làm việc

108
00:08:13,530 --> 00:08:15,941
với hệ thống nhúng trong tương lai

109
00:08:15,941 --> 00:08:16,441
