0
00:00:00,000 --> 00:00:00,001
http://youtu.be/pBrghZ5XMr8

1
00:00:00,000 --> 00:00:00,490

2
00:00:00,490 --> 00:00:02,906
DR. RAMESH YERRABALLI: Let's
look at device communication.

3
00:00:02,906 --> 00:00:05,060

4
00:00:05,060 --> 00:00:09,680
Let's say we have two devices, A
and B, that want to communicate.

5
00:00:09,680 --> 00:00:14,450

6
00:00:14,450 --> 00:00:17,561
One of the things that we have
to address in this communication

7
00:00:17,561 --> 00:00:18,352
is synchronization.

8
00:00:18,352 --> 00:00:27,930

9
00:00:27,930 --> 00:00:33,890
Synchronization is
simply a process by which

10
00:00:33,890 --> 00:00:49,010
we bridge the speed mismatch
between communicating devices.

11
00:00:49,010 --> 00:00:52,270
DR. JONATHAN VALVANO: So if A is
faster than B, or B is faster than A,

12
00:00:52,270 --> 00:00:55,600
or they're the same
speed it still works.

13
00:00:55,600 --> 00:00:57,070
DR. RAMESH YERRABALLI: Yes.

14
00:00:57,070 --> 00:00:59,610
So let's take a few scenarios.

15
00:00:59,610 --> 00:01:05,850
When I talk about A and B, these could
be, these devices could be computers,

16
00:01:05,850 --> 00:01:10,520
for example a launch pad, a micro
computer, a microcontroller.

17
00:01:10,520 --> 00:01:15,580
It could be devices,
like for example, the LCD

18
00:01:15,580 --> 00:01:20,790
device that we might be working with,
or any other external device that's

19
00:01:20,790 --> 00:01:22,800
connected.

20
00:01:22,800 --> 00:01:27,980
Or we can even think
of this as an analogy

21
00:01:27,980 --> 00:01:31,680
where we consider A and B to be people.

22
00:01:31,680 --> 00:01:36,320
DR. JONATHAN VALVANO: So what happens
if A talks a lot faster than B listens?

23
00:01:36,320 --> 00:01:40,130
DR. RAMESH YERRABALLI: So obviously
there's going to be a miscommunication.

24
00:01:40,130 --> 00:01:43,800
So what we need is a way
for them to synchronize

25
00:01:43,800 --> 00:01:50,952
so that the communication is perfectly
comprehensible to both parties.

26
00:01:50,952 --> 00:01:52,910
DR. JONATHAN VALVANO: I
can think of a problem.

27
00:01:52,910 --> 00:01:54,990
You talk too fast, professor Yerraballi.

28
00:01:54,990 --> 00:01:57,869
If you slowed down I could
understand you better.

29
00:01:57,869 --> 00:01:59,910
DR. RAMESH YERRABALLI:
Yes, so what you're saying

30
00:01:59,910 --> 00:02:05,980
is if I am talking too fast
then I should slow down.

31
00:02:05,980 --> 00:02:11,150
So that I have to in some way know
what-- there's a preset amount of time

32
00:02:11,150 --> 00:02:16,420
that you want me to wait for before I
say the next word or the next sentence.

33
00:02:16,420 --> 00:02:20,580
So we have our first form
of device synchronization.

34
00:02:20,580 --> 00:02:27,260
We call this the blind
cycle synchronization

35
00:02:27,260 --> 00:02:33,570
where the device A will
send a message to B

36
00:02:33,570 --> 00:02:41,170
and wait for a certain amount of time,
some delta, predetermined delta t,

37
00:02:41,170 --> 00:02:43,920
and then send the second message.

38
00:02:43,920 --> 00:02:49,600
And then waits again a delta t amount
of time and sends the third message.

39
00:02:49,600 --> 00:02:54,799
DR. JONATHAN VALVANO: It's called blind
because the time you wait is fixed.

40
00:02:54,799 --> 00:02:56,590
DR. RAMESH YERRABALLI:
And the time delta t

41
00:02:56,590 --> 00:03:08,140
is usually determined
by the device B's speed.

42
00:03:08,140 --> 00:03:14,880
Which means that A has to be aware
of what B's configured speed is

43
00:03:14,880 --> 00:03:20,470
of processing and wait
for that amount of time.

44
00:03:20,470 --> 00:03:25,110
DR. JONATHAN VALVANO: So the problem
with blind is the speed of B may vary.

45
00:03:25,110 --> 00:03:30,140
And so to make blind work, A will have
to wait the longest or the worst case.

46
00:03:30,140 --> 00:03:33,360
So this is a very slow
communication protocol.

47
00:03:33,360 --> 00:03:36,070
DR. RAMESH YERRABALLI: Yes,
but it's a useful protocol

48
00:03:36,070 --> 00:03:41,140
because there are a lot of devices
that are not sophisticated.

49
00:03:41,140 --> 00:03:43,760
And this is always going to work.

50
00:03:43,760 --> 00:03:51,420
If you know from the datasheet of device
B what the specifications of device

51
00:03:51,420 --> 00:03:53,230
B are.

52
00:03:53,230 --> 00:03:56,360
Let's look at another alternative.

53
00:03:56,360 --> 00:04:00,360
The alternative that's
slightly better in my mind

54
00:04:00,360 --> 00:04:14,410
is the second one which
we call a busy-wait Now,

55
00:04:14,410 --> 00:04:22,180
if device B were able to
raise a flag, so if device B

56
00:04:22,180 --> 00:04:30,120
were able to raise a flag to indicate
to A that the last communication you

57
00:04:30,120 --> 00:04:34,410
sent-- so let's say that A
sends a communication and B

58
00:04:34,410 --> 00:04:37,320
raises a flag saying,
I'm processing this.

59
00:04:37,320 --> 00:04:41,950
So hold on and wait until
I'm finished processing.

60
00:04:41,950 --> 00:04:50,490
Then A can look at that, look at
that flag and keep checking the flag.

61
00:04:50,490 --> 00:04:54,860
And when the flag is turned off--
so when the flag is turned off,

62
00:04:54,860 --> 00:04:57,375
it then sends the next message.

63
00:04:57,375 --> 00:05:00,660

64
00:05:00,660 --> 00:05:02,730
So it repeatedly checks the flag.

65
00:05:02,730 --> 00:05:07,110
In other words, A's logic is
going to look something like this,

66
00:05:07,110 --> 00:05:16,480
send, check flag, and
repeatedly check flag,

67
00:05:16,480 --> 00:05:25,750
and when identify check flag is up,
and if it's up, go back check again,

68
00:05:25,750 --> 00:05:32,180
up check again, when it's not then
go back and send the next message.

69
00:05:32,180 --> 00:05:34,605
So this is a step up.

70
00:05:34,605 --> 00:05:39,036
But now we require that device B
be a little more sophisticated.

71
00:05:39,036 --> 00:05:43,340
That it can indicate to
the sender and the sender

72
00:05:43,340 --> 00:05:46,147
has a way of checking the flag.

73
00:05:46,147 --> 00:05:47,980
DR. JONATHAN VALVANO:
But I like interrupts.

74
00:05:47,980 --> 00:05:50,240
Let's talk about interrupts.

75
00:05:50,240 --> 00:05:53,020
Interrupts is even more sophisticated.

76
00:05:53,020 --> 00:05:59,530
We're going to take this flag which
determines the status of the device B,

77
00:05:59,530 --> 00:06:03,310
and we're going to do one
more thing with this flag.

78
00:06:03,310 --> 00:06:12,050
This flag is going to signal back
to A, as a hardware event, which

79
00:06:12,050 --> 00:06:15,680
will trigger a special software action.

80
00:06:15,680 --> 00:06:20,780
So with interrupts the flag,
the status flag of device B,

81
00:06:20,780 --> 00:06:32,005
which has two states, busy with the
flag up and done with the flag off.

82
00:06:32,005 --> 00:06:39,240

83
00:06:39,240 --> 00:06:45,910
The busy to done state transition in B
will trigger a software event in A such

84
00:06:45,910 --> 00:06:50,760
that a special code called the
interrupt service routine gets executed

85
00:06:50,760 --> 00:06:53,020
on this busy to done state transition.

86
00:06:53,020 --> 00:06:56,200
And this interrupt service routine
will then perform the service,

87
00:06:56,200 --> 00:06:59,002
or in this case, send another message.

88
00:06:59,002 --> 00:07:01,170
DR. RAMESH YERRABALLI:
So as we see, interrupts

89
00:07:01,170 --> 00:07:03,780
are by far the most flexible.

90
00:07:03,780 --> 00:07:10,060
But they do require certain
special support from the system.

91
00:07:10,060 --> 00:07:13,210
And the support is in
the form of this device

92
00:07:13,210 --> 00:07:17,010
being able to interrupt the processor.

93
00:07:17,010 --> 00:07:22,100
And the processor should be able to
suspend what its doing currently,

94
00:07:22,100 --> 00:07:26,650
take care of this interrupt, and
then resume where it left off.

95
00:07:26,650 --> 00:07:31,060
And since this is a much
more sophisticated technique,

96
00:07:31,060 --> 00:07:33,920
not all devices support this approach.

97
00:07:33,920 --> 00:07:37,300
So it's not like we can
choose between these.

98
00:07:37,300 --> 00:07:40,280
It's all about whether
the support is provided

99
00:07:40,280 --> 00:07:43,832
in the particular communication system.

100
00:07:43,832 --> 00:07:45,540
DR. JONATHAN VALVANO:
So in this chapter,

101
00:07:45,540 --> 00:07:49,310
we're going to use the busy wait
synchronization because it's simpler.

102
00:07:49,310 --> 00:07:51,927
But in the next chapter
we'll have interrupts.

103
00:07:51,927 --> 00:07:53,760
DR. RAMESH YERRABALLI:
And by the way, there

104
00:07:53,760 --> 00:08:01,460
are two other communication ideas which
are used in most advanced systems.

105
00:08:01,460 --> 00:08:08,120
They're called polling and
direct memory access, or DMA.

106
00:08:08,120 --> 00:08:10,590
We will not be looking
at those in this class,

107
00:08:10,590 --> 00:08:13,530
but you will encounter
them if you're working

108
00:08:13,530 --> 00:08:15,941
with embedded systems in the future.

109
00:08:15,941 --> 00:08:16,441
