0
00:00:00,000 --> 00:00:00,001
http://youtu.be/F9HZfJWdV-A

1
00:00:00,000 --> 00:00:02,720

2
00:00:02,720 --> 00:00:06,070
DR. RAMESH YERRABALLI: OK, so now that
we understand what a register is, and

3
00:00:06,070 --> 00:00:10,470
the fact that we have instructions that
will manipulate these registers,

4
00:00:10,470 --> 00:00:17,680
let's understand what an
instruction looks like.

5
00:00:17,680 --> 00:00:19,335
That is, the format of an instruction.

6
00:00:19,335 --> 00:00:21,950

7
00:00:21,950 --> 00:00:23,170
An instruction--

8
00:00:23,170 --> 00:00:25,300
we'll take a simple example--

9
00:00:25,300 --> 00:00:27,180
will have an operation.

10
00:00:27,180 --> 00:00:31,910
For example, I'm saying here I want
to move something into a register.

11
00:00:31,910 --> 00:00:34,520

12
00:00:34,520 --> 00:00:38,940
And in this particular case, I want
to move the number 100 into

13
00:00:38,940 --> 00:00:42,150
the register R0.

14
00:00:42,150 --> 00:00:53,410
Now, an instruction like this can convey
the purpose by commenting it

15
00:00:53,410 --> 00:00:54,350
appropriately.

16
00:00:54,350 --> 00:00:55,280
So we put a comment.

17
00:00:55,280 --> 00:01:01,630
For example, maybe the purpose of this
instruction was to set a table's size.

18
00:01:01,630 --> 00:01:07,915
We're using a table of some student
records, and this table is going to be

19
00:01:07,915 --> 00:01:08,960
of size 100.

20
00:01:08,960 --> 00:01:10,440
So, I put a comment.

21
00:01:10,440 --> 00:01:15,770
Now, the comment is prefixed
by a semicolon.

22
00:01:15,770 --> 00:01:20,770
Now, typically, an instruction
like this may have a label.

23
00:01:20,770 --> 00:01:25,190
So, for example, this is an
initialization, so I have a label.

24
00:01:25,190 --> 00:01:31,400
So, to review our instruction,
then, we say that instruction

25
00:01:31,400 --> 00:01:38,960
has an opcode, operands--

26
00:01:38,960 --> 00:01:42,890
This particular instruction
required two operands.

27
00:01:42,890 --> 00:01:46,700
There'll be other instructions that
might need three operands, four

28
00:01:46,700 --> 00:01:49,670
operands, or even zero operands.

29
00:01:49,670 --> 00:01:55,260
And then we have a possible comment.

30
00:01:55,260 --> 00:02:01,390
Now, good code should always have
copious amounts of comments so that it

31
00:02:01,390 --> 00:02:08,050
has a value for somebody else who's
looking at it and easy to understand.

32
00:02:08,050 --> 00:02:11,300
And a label.

33
00:02:11,300 --> 00:02:15,460
Now, we notice that comments and labels
are optional, whereas every

34
00:02:15,460 --> 00:02:17,870
instruction will have an opcode.

35
00:02:17,870 --> 00:02:21,420
So, this gives us an idea about what
an instruction looks like.

36
00:02:21,420 --> 00:02:27,300
Let's look at some of the kinds
of operations that we perform.

37
00:02:27,300 --> 00:02:32,170
The kinds of operations can be broadly
classified into four categories.

38
00:02:32,170 --> 00:02:38,730
The first category is, by far the most
important category, is memory access.

39
00:02:38,730 --> 00:02:42,350

40
00:02:42,350 --> 00:02:51,430
So, what we mean by memory access is
to load and store information.

41
00:02:51,430 --> 00:02:54,320
So, to load information from.

42
00:02:54,320 --> 00:02:58,110
For example, we have our registers
that are in the

43
00:02:58,110 --> 00:03:01,810
CPU, and we have memory.

44
00:03:01,810 --> 00:03:06,500
So, when we talk about load stored
operations, we're talking about

45
00:03:06,500 --> 00:03:12,660
operations to load from memory
and to store to memory.

46
00:03:12,660 --> 00:03:15,360

47
00:03:15,360 --> 00:03:20,030
So, here's an example
of a load operation.

48
00:03:20,030 --> 00:03:30,690
For example, I say LDR R1, [R0].

49
00:03:30,690 --> 00:03:38,030
So, this instruction tells the system
that I want to store into register R1.

50
00:03:38,030 --> 00:03:42,990

51
00:03:42,990 --> 00:03:52,830
Into register R1, I want to store
the contents of memory.

52
00:03:52,830 --> 00:03:54,930
So there's an address here.

53
00:03:54,930 --> 00:03:56,710
We're saying that it holds an address.

54
00:03:56,710 --> 00:04:02,020
Go to that location and access, fetch
the contents of that address, and put

55
00:04:02,020 --> 00:04:04,310
it in register R1.

56
00:04:04,310 --> 00:04:08,420
So, that's a memory access
instruction.

57
00:04:08,420 --> 00:04:13,590
The second instruction, obviously we
want to do some work on these things

58
00:04:13,590 --> 00:04:15,700
that we bring into registers.

59
00:04:15,700 --> 00:04:23,690
So, the second class of operations are
arithmetic and logic operations.

60
00:04:23,690 --> 00:04:28,560
Arithmetic and logic operations could
be something as simple as add,

61
00:04:28,560 --> 00:04:33,750
subtract, and arithmetic operations,
add, subtract, multiply, and so on.

62
00:04:33,750 --> 00:04:35,690
Multiply and divide.

63
00:04:35,690 --> 00:04:41,270
Or they can be logical operations like
performing an and operation,

64
00:04:41,270 --> 00:04:43,940
performing a shift operation.

65
00:04:43,940 --> 00:04:47,590
Again, here's a simple example
of an add operation.

66
00:04:47,590 --> 00:04:56,000
So, ADD R1, R3, R7.

67
00:04:56,000 --> 00:05:03,130
So this instruction is telling us to
take the contents of R7 and R3 and add

68
00:05:03,130 --> 00:05:05,020
them together and put
the result in R1.

69
00:05:05,020 --> 00:05:09,320

70
00:05:09,320 --> 00:05:11,560
Here's a third class of operations.

71
00:05:11,560 --> 00:05:14,040
These are control operations.

72
00:05:14,040 --> 00:05:30,470
Control operations are operations
that change the flow of code.

73
00:05:30,470 --> 00:05:35,430
What we mean by change the flow of code
is, we sometimes, in our program

74
00:05:35,430 --> 00:05:41,670
will branch from one location to another
location, or we may call a

75
00:05:41,670 --> 00:05:42,660
subroutine.

76
00:05:42,660 --> 00:05:47,900
Here's a simple example of a flow
instruction, a control instruction.

77
00:05:47,900 --> 00:05:56,140
A branch equal to a label,
which is isEqual.

78
00:05:56,140 --> 00:06:03,870
So, what this is saying is, if the Z
bit is equal to 1, which is how we

79
00:06:03,870 --> 00:06:10,150
indicate that the two things are equal,
the Z bit is equal to 1, then

80
00:06:10,150 --> 00:06:18,190
branch to a label, which
is a label like that.

81
00:06:18,190 --> 00:06:20,080
Branch to a label, which is isEqual.

82
00:06:20,080 --> 00:06:23,950

83
00:06:23,950 --> 00:06:27,660
The last class of operations
are special instructions.

84
00:06:27,660 --> 00:06:32,630
These could be instructions that don't
have an equivalent, they're not merely

85
00:06:32,630 --> 00:06:36,720
access, they're not logic operations,
but they have a special purpose.

86
00:06:36,720 --> 00:06:41,690
So these special instructions, for
example, are things like to turn off

87
00:06:41,690 --> 00:06:44,780
interrupts, to disable
or enable interrupts.

88
00:06:44,780 --> 00:06:50,900
So here's an example of
a special instruction.

89
00:06:50,900 --> 00:07:03,900
This is the CPSIE with an operand I,
which tells the system to enable

90
00:07:03,900 --> 00:07:04,200
interrupts.

91
00:07:04,200 --> 00:07:06,140
The E here is for enable.

92
00:07:06,140 --> 00:07:14,650
So there's an equivalent, which is
CPSID, which tells the system to

93
00:07:14,650 --> 00:07:15,900
disable interrupts.

94
00:07:15,900 --> 00:07:27,865
